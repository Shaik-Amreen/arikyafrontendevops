export default [
    {
        topic: 'Introduction To Java',
        content: `<h1>Introduction To Java</h1><br><p><strong>JAVA</strong> was developed by James Gosling at&nbsp;<strong>Sun Microsystems</strong><u>&nbsp;</u>Inc in the year&nbsp;<strong>1995</strong>,&nbsp;later acquired by Oracle Corporation. It is a simple programming language. Java makes writing, compiling, and debugging programming easy.&nbsp;It helps to create reusable code and modular programs.</p>
        <p><u>Java</u> is a class-based, object-oriented programming language and is designed to have as few implementation dependencies as possible. A general-purpose programming language made for developers to&nbsp;<em>write once run anywhere</em> that is compiled Java code can run on all platforms that support Java. Java applications are compiled to byte code that can run on any Java Virtual Machine. The syntax of Java is similar to c/c++.</p>
        <h3>History</h3>
        <p>Java&rsquo;s history is very interesting. It is a programming language created in 1991.<strong>&nbsp;</strong>James Gosling, Mike Sheridan, and Patrick Naughton, a team of Sun engineers known as the&nbsp;<strong>Green team&nbsp;</strong>initiated the Java language in 1991.&nbsp;<strong>Sun Microsystems</strong> released its first public implementation in 1996 as&nbsp;<strong>Java 1.0</strong>. It provides no-cost -run-times on popular platforms. Java1.0 compiler was re-written in Java by Arthur Van Hoff to strictly comply with its specifications. With the arrival of Java 2, new versions had multiple configurations built for different types of platforms.</p>
        <p>In 1997, Sun Microsystems approached the ISO standards body and later formalized Java, but it soon withdrew from the process. At one time, Sun made most of its Java implementations available without charge, despite their proprietary software status. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System.</p>
        <p>On November 13, 2006, Sun released much of its Java virtual machine as free, open-source software. On May 8, 2007, Sun finished the process, making all of its JVM&rsquo;s core code available under open-source distribution terms.</p>
        <div><br></div>
        <p>The principles for creating java were simple, robust, secured, high performance, portable, multi-threaded, interpreted, dynamic, etc. In 1995 Java was developed by&nbsp;<strong>James Gosling</strong>, who is known as the Father of Java. Currently, Java is used in mobile devices, internet programming, games, e-business, etc.</p>
        <h3>Java programming language is named JAVA. Why?</h3>
        <p>After the name OAK, the team decided to give a new name to it and the suggested words were Silk, Jolt, revolutionary, DNA, dynamic, etc. These all names were easy to spell and fun to say, but they all wanted the name to reflect the essence of technology. In accordance with James Gosling,&nbsp;<strong>Java</strong> the among the top names along with&nbsp;<strong>Silk</strong>, and since java was a unique name so most of them preferred it.</p>
        <p>Java is the name of an&nbsp;<strong>island</strong> in Indonesia where the first coffee(named java coffee) was produced. And this name was chosen by James Gosling while having coffee near his office. Note that Java is just a name, not an acronym.</p>
        <h3>Java Terminology</h3>
        <p>Before learning Java, one must be familiar with these common terms of Java.</p>
        <p><strong>1. &nbsp;Java Virtual Machine(JVM):&nbsp;</strong> This is generally referred to as&nbsp;<u>JVM</u>. There are three execution phases of a program. They are written, compile and run the program.</p>
        <ul>
            <li>Writing a program is done by a java programmer like you and me.</li>
            <li>The compilation is done by the&nbsp;<strong>JAVAC</strong> compiler which is a primary Java compiler included in the Java development kit (JDK). It takes the Java program as input and generates bytecode as output.</li>
            <li>In the Running<strong>&nbsp;</strong>phase of a program,<strong>&nbsp;JVM</strong> executes the bytecode generated by the compiler.</li>
        </ul>
        <p>Now, we understood that the function of Java Virtual Machine is to execute the bytecode produced by the compiler. Every Operating System has a different JVM but the output they produce after the execution of bytecode is the same across all the operating systems. This is why Java is known as a<strong>&nbsp;platform-independent language.</strong></p>
        <p><strong>2. Bytecode in&nbsp;</strong>the&nbsp;<strong>Development process: &nbsp;</strong>As discussed, the Javac compiler of JDK compiles the java source code into bytecode so that it can be executed by JVM. It is saved as&nbsp;<strong>.class</strong> file by the compiler. To view the bytecode, a disassembler like&nbsp;<u>javap</u> can be used.</p>
        <p><strong>3. Java Development Kit(JDK):&nbsp;</strong>While we were using the term JDK when we learn about bytecode and JVM. So, as the name suggests, it is a complete Java development kit that includes everything including compiler, Java Runtime Environment (JRE), java debuggers, java docs, etc. For the program to execute in java, we need to install JDK on our computer in order to create, compile and run the java program.</p>
        <p><strong>4. Java Runtime Environment (JRE):&nbsp;</strong>JDK includes JRE. JRE installation on our computers allows the java program to run, however, we cannot compile it. JRE includes a browser, JVM, applet supports, and plugins. For running the java program, a computer needs JRE.</p>
        <p><strong>5. Garbage Collector:&nbsp;</strong>In Java, programmers can&rsquo;t delete the objects. To delete or recollect that memory JVM has a program called&nbsp;<u>Garbage Collector</u>. Garbage Collectors can recollect the objects that are not referenced. So Java makes the life of a programmer easy by handling memory management. However, programmers should be careful about their code whether they are using objects that have been used for a long time. Because Garbage cannot recover the memory of objects being referenced.</p>
        <p><strong>6. ClassPath:&nbsp;</strong>The&nbsp;<u>classpath</u> is the file path where the java runtime and Java compiler look for&nbsp;<strong>.class</strong> files to load. By default, JDK provides many libraries. If you want to include external libraries they should be added to the classpath.</p>
        <h3>Primary/Main Features of Java</h3>
        <p><strong>1. Platform Independent: &nbsp;</strong>Compiler converts source code to bytecode and then the JVM executes the bytecode generated by the compiler. This bytecode can run on any platform be it Windows, Linux, macOS which means if we compile a program on Windows, then we can run it on Linux and vice versa. Each operating system has a different JVM, but the output produced by all the OS is the same after the execution of bytecode. That is why we call java a platform-independent language.</p>
        <p><strong>2. Object-Oriented Programming Language: &nbsp;</strong>Organizing the program in the terms of collection of objects is a way of object-oriented programming, each of which represents an instance of the class.</p>
        <p>The four main concepts of Object-Oriented programming are:</p>
        <ul>
            <li>Abstraction</li>
            <li>Encapsulation</li>
            <li>Inheritance</li>
            <li>Polymorphism</li>
        </ul>
        <p><strong>3.</strong> <strong>Simple: &nbsp;</strong>Java is one of the simple languages as it does not have complex features like pointers, operator overloading, multiple inheritances, Explicit memory allocation.&nbsp;</p>
        <p><strong>4.</strong> <strong>Robust: &nbsp;</strong>Java language is robust which means reliable. It is developed in such a way that it puts a lot of effort into checking errors as early as possible, that is why the java compiler is able to detect even those errors that are not easy to detect by another programming language. The main features of java that make it robust are garbage collection, Exception Handling, and memory allocation.</p>
        <p><strong>5.</strong> <strong>Secure:&nbsp;</strong> In java, we don&rsquo;t have pointers, so we cannot access out-of-bound arrays i.e it shows&nbsp;<strong>ArrayIndexOutOfBound Exception</strong> if we try to do so. That&rsquo;s why several security flaws like stack corruption or buffer overflow are impossible to exploit in Java. &nbsp; &nbsp; &nbsp;</p>
        <p><strong>6.</strong> <strong>Distributed: &nbsp;</strong>We can create distributed applications using the java programming language. Remote Method Invocation and Enterprise Java Beans are used for creating distributed applications in java. The java programs can be easily distributed on one or more systems that are connected to each other through an internet connection.</p>
        <p><strong>7.</strong> <strong>Multithreading: &nbsp;</strong>Java supports multithreading. It is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of CPU.</p>
        <p><strong>8.</strong> <strong>Portable: &nbsp;</strong>As we know, java code written on one machine can be run on another machine. The platform-independent feature of java in which its platform-independent bytecode can be taken to any platform for execution makes java portable.</p>
        <p><strong>9. High Performance:</strong> Java architecture is defined in such a way that it reduces overhead during the runtime and at some time java uses Just In Time (JIT) compiler where the compiler compiles code on-demand basics where it only compiles those methods that are called making applications to execute faster.</p>
        <p><strong>10. Dynamic flexibility:&nbsp;</strong>Java being completely object-oriented gives us the flexibility to add classes, &nbsp;new methods to existing classes and even create new classes through sub-classes. Java even supports functions written in other languages such as C, C++ which are referred to as native methods.</p>
        <p><strong>11. Sandbox Execution:</strong> Java programs run in a separate space that allows user to execute their applications without affecting the underlying system with help of a bytecode verifier. Bytecode verifier also provides additional security as its role is to check the code for any violation of access.</p>
        <p><strong>12. Write Once Run Anywhere:</strong> As discussed above java application generates a &lsquo;.class&rsquo; file which corresponds to our applications(program) but contains code in binary format. It provides ease t architecture-neutral ease as bytecode is not dependent on any machine architecture. It is the primary reason java is used in the enterprising IT industry globally worldwide.</p>
        <p><strong>13. Power of compilation and interpretation:</strong> Most languages are designed with purpose either they are compiled language or they are interpreted language. But java integrates arising enormous power as Java compiler compiles the source code to bytecode and JVM &nbsp;executes this bytecode to machine OS-dependent executable code.</p>
        <p><strong>Example</strong></p>
        <div>
            <div>
                <ul>
                    <li tabindex="0">Java</li>
                </ul>
                <div aria-hidden="false">
                    <div>
                        <div>
                            <div>
                                <div>
                                    <div title="Run and Edit">
                                        <p><br></p>
                                        <p><br></p>
                                        <p><br></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div>
                            <div>
                                <table border="0" cellpadding="0" cellspacing="0">
                                    <tbody>
                                        <tr>
                                            <td>
                                                <div>
                                                    <div><code>// Demo Java program</code></div>
                                                    <div><code>&nbsp;</code>&nbsp;</div>
                                                    <div><code>// Importing classes from packages</code></div>
                                                    <div><code>import</code> <code>java.io.*;</code></div>
                                                    <div><code>&nbsp;</code>&nbsp;</div>
                                                    <div><code>// Main class</code></div>
                                                    <div><code>public</code> <code>class</code> <code>GFG {</code></div>
                                                    <div><code>&nbsp;</code>&nbsp;</div>
                                                    <div><code>&nbsp; &nbsp;&nbsp;</code><code>// Main driver method</code></div>
                                                    <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main(String[] args)</code></div>
                                                    <div><code>&nbsp; &nbsp;&nbsp;</code><code>{</code></div>
                                                    <div><code>&nbsp;</code>&nbsp;</div>
                                                    <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>// Print statement</code></div>
                                                    <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(</code><code>&quot;Welcome to GeeksforGeeks&quot;</code><code>);</code></div>
                                                    <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
                                                    <div><code>}</code></div>
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div><strong>Output</strong>
            <pre>Welcone to GeeksforGeeks</pre>
        </div>
        <p><strong>Explanation:</strong></p>
        <p><strong>1. &nbsp;Comments:&nbsp;</strong>Comments are used for explaining code and are used in a similar manner in Java or C or C++. Compilers ignore the comment entries and do not execute them. Comments can be of a single line or multiple lines.</p>
        <p><strong>Single line Comments:</strong><br><strong>Syntax:</strong></p>
        <pre>// Single line comment</pre>
        <p>Multi-line<strong>&nbsp;comments:</strong><br><strong>Syntax:</strong></p>
        <pre>/* Multi line comments*/</pre>
        <p><strong>2. &nbsp;import java.io.*:&nbsp;</strong>This means all the classes of io package can be imported. Java io package provides a set of input and output streams for reading and writing data to files or other input or output sources.</p>
        <p><strong>3. &nbsp;class:&nbsp;</strong>The class contains the data and methods to be used in the program. Methods define the behavior of the class. Class&nbsp;<strong>GFG</strong> has only one method Main in JAVA.</p>
        <p><strong>4. &nbsp;static void Main():</strong> <strong>static</strong> keyword tells us that this method is accessible without instantiating the class.&nbsp;</p>
        <p><strong>5. &nbsp;void:&nbsp;</strong>keywords tell that this method will not return anything. The main<strong>()</strong> method is the entry point of our application.</p>
        <p><strong>6. &nbsp;System.in:</strong> This is the&nbsp;<strong>standard input stream</strong> that is used to read characters from the keyboard or any other standard input device.</p>
        <p><strong>7. &nbsp;System.out:&nbsp;</strong>This is the&nbsp;<strong>standard output stream</strong> that is used to produce the result of a program on an output device like the computer screen.</p>
        <p><strong>8. &nbsp;println():&nbsp;</strong>This method in Java is also used to display text on the console. It prints the text on the console and the cursor moves to the start of the next line at the console. The next printing takes place from the next line.</p>
        <blockquote>
            <p><em>Everything in java , is represented in Class as an object including the main function.</em></p>
        </blockquote>`
    },
    {
        topic: 'About Java',
        content: `<h1>About Java</h1><ul>
        <br><li><strong>Java is a simple language:</strong> Java is easy to learn and its syntax is clear and concise. It is based on C++ (so it is easier for programmers who know C++). Java has removed many confusing and rarely-used features e.g. explicit pointers, operator overloading, etc. Java also takes care of memory management and it also provides an automatic garbage collector. This collects the unused objects automatically.</li>
        <br><li><strong>Java is a platform-independent language:</strong> The programs written in Java language, after compilation, are converted into an intermediate level language called the&nbsp;<strong>bytecode</strong> which is a part of the Java platform irrespective of the machine on which the programs run. This makes java highly portable as its bytecodes can be run on any machine by an interpreter called the Java Virtual Machine(JVM) and thus java provides &lsquo;reusability of code&rsquo;.</li>
        <br><li><strong>Java is an object-oriented programming language:</strong> OOP makes the complete program simpler by dividing it into a number of objects. The objects can be used as a bridge to have data flow from one function to another. We can easily modify data and function&rsquo;s as per the requirements of the program.</li>
        <br><li><strong>Java is a robust language:</strong> Java programs must be reliable because they are used in both consumer and mission-critical applications, ranging from Blu-ray players to navigation systems.</li>
        <br><li><strong>Java is a multithreaded language:</strong> Java can perform many tasks at once by defining multiple threads. For example, a program that manages a Graphical User Interface (GUI) while waiting for input from a network connection uses another thread to perform and wait&rsquo;s instead of using the default GUI thread for both tasks. This keeps the GUI responsive.</li>
        <br><li><strong>Java programs can create applets:</strong> Applets are programs that run in web browsers. But applets support was deprecated in&nbsp;<strong>Java 9</strong> release and&nbsp;<strong>has been removed in Java 11</strong> release due to waning browser support for the Java plugin.</li>
        <br><li><strong>Java does not require any preprocessor:</strong> It does not require inclusion of header files for creating a Java application.<p>Therefore, Java is a very successful language and it is gaining popularity day by day.</p>
        </li>
    </ul>`
    },
    {
        topic: 'Java Programming Basics',
        content: `<h1>Java Programming Basics</h1>
        <p><br></p>
        <p>Java is one of the most popular and widely used programming language and platform. A platform is an environment that helps to develop and run programs written in any programming language.<br>Java is fast, reliable, and secure. From desktop to web applications, scientific supercomputers to gaming consoles, cell phones to the Internet, Java is used in every nook and corner.</p>
        <p><strong>However to become proficient in any programming language, one Firstly needs to understand the basics of that language.</strong></p>
        <p>Therefore, below are the basics of Java in the format in which it will help you the most to get a headstart :</p>
        <ol>
            <li><strong>Java Environment:&nbsp;</strong>The programming environment of Java consists of three components mainly:<ul>
                    <li>JDK</li>
                    <li>JRE</li>
                    <li>JVM</li><br>
                </ul>
                <p></p>
            </li>
            <li><strong>Java Basic Syntax:&nbsp;</strong>Every programming language has its own set of rules to declare, define and work on its components. Reading and learning about all of them together is difficult. Therefore here is a simple task of printing &ldquo;Hello World&rdquo; in Java. During this process, major components and their syntaxes are explained clearly.<div><br></div>
            </li>
            <li><strong><strong>Comments in Java</strong>:&nbsp;</strong>In a program, comments take part in making the program become more human-readable by placing the detail of code involved and proper use of comments makes maintenance easier and finding bugs easily. Comments are ignored by the compiler while compiling the code.<p><br></p>
            </li>
            <li><strong>Data Types in Java:&nbsp;</strong>Each variable in Java has an associated data type. Each data type requires different amounts of memory and has some specific operations which can be performed over it.<p><br></p>
            </li>
            <li><strong>Variables in Java:&nbsp;</strong>A variable is a name given to a memory location. It is the basic unit of storage in a program.<p><strong><br></strong></p>
            </li>
            <li><strong>Keywords in Java:&nbsp;</strong>Keywords or Reserved words are the words in a language that are used for some internal process or represent some predefined actions. These words are therefore not allowed to use as variable names or objects. Doing this will result in a compile-time error.<p><br></p>
            </li>
            <li><strong>Operators in Java:&nbsp;</strong>Operators are the foundation of any programming language. Thus the functionality of the Java programming language is incomplete without the use of operators. We can define operators as symbols that help us to perform specific mathematical and logical computations on operands. In other words, we can say that an operator operates the operands.<p><strong><br></strong></p>
            </li>
            <li><strong>Decision Making (Control Statements) in Java:</strong> Decision Making in programming is similar to decision making in real life. In programming also we face some situations where we want a certain block of code to be executed when some condition is fulfilled.<br>A programming language uses control statements to control the flow of execution of the program based on certain conditions. These are used to cause the flow of execution to advance and branch based on changes to the state of a program.<p><strong><br></strong></p>
            </li>
            <li><strong>Loops in Java:</strong> Looping in programming languages is a feature which facilitates the execution of a set of instructions/functions repeatedly while some condition evaluates to true.<br>Java provides three ways for executing the loops. While all the ways provide similar basic functionality, they differ in their syntax and condition checking time.</li>
        </ol>`
    },

    {
        topic: "Object Oriented Programming (OOPs) Concept in Java",
        content: `<h1>Object Oriented Programming (OOPs) Concept in Java</h1><p>As the name suggests,&nbsp;Object-Oriented Programming or OOPs refers to languages that uses objects in programming. Object-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism etc in programming. The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function.&nbsp;</p>
        <p>Let us do discuss pre-requisites by polishing concepts of methods declaration and passing. Starting off with the method declaration, it consists of six components:&nbsp;</p>
        <ul>
            <li><strong>Access Modifier</strong>: Defines&nbsp;<strong>access type</strong> of the method i.e. from where it can be accessed in your application. In Java, there 4 type of the access specifiers.&nbsp;<ul>
                    <li><strong>public:</strong> accessible in all class in your application.</li>
                    <li><strong>protected:</strong> accessible within the package in which it is defined and in its&nbsp;<strong>subclass(es)(including subclasses declared outside the package)</strong></li>
                    <li><strong>private:</strong> accessible only within the class in which it is defined.</li>
                    <li><strong>default (declared/defined without using any modifier):</strong> accessible within same class and package within which its class is defined.</li>
                </ul>
            </li>
            <li><strong>The return type</strong>: The data type of the value returned by the method or void if does not return a value.</li>
            <li><strong>Method Name</strong>: the rules for field names apply to method names as well, but the convention is a little different.</li>
            <li><strong>Parameter list</strong>: Comma separated list of the input parameters are defined, preceded with their data type, within the enclosed parenthesis. If there are no parameters, you must use empty parentheses ().</li>
            <li><strong>Exception list</strong>: The exceptions you expect by the method can throw, you can specify these exception(s).</li>
            <li><strong>Method body</strong>: it is enclosed between braces. The code you need to be executed to perform your intended operations.</li>
        </ul>
        <p><strong>Message Passing</strong><strong>:</strong> Objects communicate with one another by sending and receiving information to each other. A message for an object is a request for execution of a procedure and therefore will invoke a function in the receiving object that generates the desired results. Message passing involves specifying the name of the object, the name of the function and the information to be sent.</p>
        <p>Now with basic prerequisite to step learning 4 pillar of OOPS is as follows. Let us start with learning about the different characteristics of an Object-Oriented Programming language</p>
        <p>OOPs Concepts are as follows:&nbsp;</p>
        <div><br></div>
        <ol>
            <li>Class</li>
            <li>Object&nbsp;</li>
            <li>Method&nbsp;and&nbsp;method passing</li>
            <li>Pillars of OOPS<ul>
                    <li>Abstraction</li>
                    <li>Encapsulation</li>
                    <li>Inheritance</li>
                    <li>Polymorphism
                        <ul>
                            <li>Compile-time polymorphism</li>
                            <li>Run-time polymorphism</li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ol>
        <p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/20190717114649/Object-Oriented-Programming-Concepts.jpg" alt=""></p>
        <p>A&nbsp;class&nbsp;is a user defined blueprint or prototype from which objects are created. It represents the set of properties or methods that are common to all objects of one type. In general, class declarations can include these components, in order:&nbsp;</p>
        <ol>
            <li><strong>Modifiers</strong>: A class can be public or has default access (Refer&nbsp;this for details).</li>
            <li><strong>Class name:</strong> The name should begin with a initial letter (capitalized by convention).</li>
            <li><strong>Superclass(if any):</strong> The name of the class&rsquo;s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.</li>
            <li><strong>Interfaces(if any):</strong> A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface.</li>
            <li><strong>Body:</strong> The class body surrounded by braces, { }.</li>
        </ol>
        <p><strong>Object</strong><strong>&nbsp;</strong>is a basic unit of Object Oriented Programming and represents the real life entities. A typical Java program creates many objects, which as you know, interact by invoking methods. An object consists of:&nbsp;</p>
        <ol>
            <li><strong>State&nbsp;</strong>: It is represented by attributes of an object. It also reflects the properties of an object.</li>
            <li><strong>Behavior&nbsp;</strong>: It is represented by methods of an object. It also reflects the response of an object with other objects.</li>
            <li><strong>Identity&nbsp;</strong>: It gives a unique name to an object and enables one object to interact with other objects.</li>
            <li><strong>Method</strong><strong>:</strong> A method is a collection of statements that perform some specific task and return result to the caller. A method can perform some specific task without returning anything. Methods allow us to&nbsp;<strong>reuse</strong> the code without retyping the code. In Java, every method must be part of some class which is different from languages like C, C++ and Python.&nbsp;<br>Methods are&nbsp;<strong>time savers&nbsp;</strong>and help us to&nbsp;<strong>reuse</strong> the code without retyping the code.</li>
        </ol>
        <p>Let us now discuss 4 pillars of OOPS:</p>
        <p><strong>Pillar 1:&nbsp;</strong>Abstraction</p>
        <p>Data Abstraction is the property by virtue of which only the essential details are displayed to the user.The trivial or the non-essentials units are not displayed to the user. Ex: A car is viewed as a car rather than its individual components.<br>Data Abstraction may also be defined as the process of identifying only the required characteristics of an object ignoring the irrelevant details. The properties and behaviours of an object differentiate it from other objects of similar type and also help in classifying/grouping the objects.<br>Consider a real-life example of a man driving a car. The man only knows that pressing the accelerators will increase the speed of car or applying brakes will stop the car but he does not know about how on pressing the accelerator the speed is actually increasing, he does not know about the inner mechanism of the car or the implementation of accelerator, brakes etc in the car. This is what abstraction is.&nbsp;<br>In java, abstraction is achieved by&nbsp;interfaces and&nbsp;abstract classes. We can achieve 100% abstraction using interfaces.</p>
        <p><strong>Pillar 2:</strong> Encapsulation</p>
        <p>It is defined as the wrapping up of data under a single unit. It is the mechanism that binds together code and the data it manipulates. Another way to think about encapsulation is, it is a protective shield that prevents the data from being accessed by the code outside this shield.&nbsp;</p>
        <ul>
            <li>Technically in encapsulation, the variables or data of a class is hidden from any other class and can be accessed only through any member function of own class in which they are declared.</li>
            <li>As in encapsulation, the data in a class is hidden from other classes, so it is also known as&nbsp;<strong>data-hiding</strong>.</li>
            <li>Encapsulation can be achieved by Declaring all the variables in the class as private and writing public methods in the class to set and get the values of variables.</li>
        </ul>
        <p><strong>Pillar 3:</strong> Inheritence&nbsp;</p>
        <p>Inheritance is an important pillar of OOP(Object Oriented Programming). It is the mechanism in java by which one class is allow to inherit the features(fields and methods) of another class.&nbsp;</p>
        <p>Let us discuss some of frequent used important terminologies:</p>
        <ul>
            <li><strong>Super Class:&nbsp;</strong>The class whose features are inherited is known as superclass(or a base class or a parent class).</li>
            <li><strong>Sub Class:</strong> The class that inherits the other class is known as subclass(or a derived class, extended class, or child class). The subclass can add its own fields and methods in addition to the superclass fields and methods.</li>
            <li><strong>Reusability:&nbsp;</strong>Inheritance supports the concept of &ldquo;reusability&rdquo;, i.e. when we want to create a new class and there is already a class that includes some of the code that we want, we can derive our new class from the existing class. By doing this, we are reusing the fields and methods of the existing class.</li>
        </ul>
        <p><strong>Pillar 4:</strong> <strong>Polymorphism</strong></p>
        <p>It refers to the ability of OOPs programming languages to differentiate between entities with the same name efficiently. This is done by Java with the help of the signature and declaration of these entities.&nbsp;</p>
        <blockquote>
            <p><strong>Note:</strong> Polymorphism in Java are mainly of 2 types:&nbsp;</p>
            <ol>
                <li>Overloading</li>
                <li>Overriding&nbsp;</li>
            </ol>
        </blockquote>`
    },
    {
        topic: "Java Basic Syntax",
        content: `<h1>Java Basic Syntax</h1><p>A Java program is a collection of objects, and these objects communicate through method calls to each other to work together. Here is a brief discussion on the&nbsp;Classes and Objects,&nbsp;Method,&nbsp;Instance variables, syntax, and semantics of Java.</p>
        <p><strong>Basic terminologies in Java</strong></p>
        <p><strong>1. Class:</strong> The class is a blueprint (plan) of the instance of a class (object). It can be defined as a template which describes the data and behaviour associated with its instance.</p>
        <ul>
            <li>Example: Blueprint of the house is class.</li>
        </ul>
        <p><strong>2.</strong> <strong>Object</strong>: The object is an instance of a class. It is an entity which has behaviour and state.</p>
        <ul>
            <li>Example: A car is an object whose&nbsp;<strong>states&nbsp;</strong>are: brand, colour, number-plate.</li>
            <li>Behaviour<strong>:</strong> Running on the road.</li>
        </ul>
        <p><strong>3.</strong> <strong>Method</strong>: The behaviour of an object is the method.</p>
        <div><br></div>
        <ul>
            <li><strong>Example</strong>: The fuel indicator indicates the amount of fuel left in the car.</li>
        </ul>
        <p><strong>4. Instance variables</strong>: Every object has its own unique set of instance variables. The state of an object is generally created by the values that are assigned to these instance variables.</p>
        <p><strong>Example:&nbsp;</strong>Steps to compile and run a java program in a console</p>
        <pre>javac GFG.java
        java GFG</pre>
        <div>
            <div>
                <ul>
                    <li tabindex="0">Java</li>
                </ul>
                <div aria-hidden="false">
                    <div>
                        <div>
                            <div>
                                <div>
                                    <div title="Run and Edit">
                                        <p><br></p>
                                        <p><br></p>
                                        <p><br></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div>
                            <div>
                                <table border="0" cellpadding="0" cellspacing="0">
                                    <tbody>
                                        <tr>
                                            <td>
                                                <div>
                                                    <div><code>public</code> <code>class</code> <code>GFG {&nbsp;</code></div>
                                                    <div><code>&nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main (String[] args) {</code></div>
                                                    <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(</code><code>&quot;GFG!&quot;</code><code>);</code></div>
                                                    <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
                                                    <div><code>}</code></div>
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div><strong>Output</strong>
            <pre>GFG!</pre>
        </div>
        <p><strong>Note:&nbsp;</strong>When the class is public, the name of the file has to be the class name.</p>
        <p><strong>The Basic Syntax:</strong></p>
        <p><strong>1. Comments in Java</strong></p>
        <p>There are three types of comments in Java.&nbsp;</p>
        <p><strong>&nbsp;i.&nbsp;</strong>Single line Comment</p>
        <pre>// System.out.println(&quot;GFG!&quot;);</pre>
        <p><strong>ii.</strong> Multi-line Comment</p>
        <pre>/*
            System.out.println(&quot;GFG!&quot;);
            System.out.println(&quot;Alice!&quot;);
        */</pre>
        <p><strong>iii.&nbsp;</strong>Documentation Comment. Also called a&nbsp;<strong>doc comment</strong>.</p>
        <pre>/** documentation */</pre>
        <p><strong>2. Source File Name</strong></p>
        <p>The name of a source file should exactly match the public class name with the extension of .<strong>java</strong>. The name of the file can be a different name if it does not have any public class. Assume you have a public class&nbsp;<strong>GFG</strong>.</p>
        <pre>GFG.java // valid syntax
        <em>gfg</em>.java // invalid syntax</pre>
        <p><strong>3. Case Sensitivity</strong></p>
        <p>Java is a case-sensitive language, which means that the identifiers&nbsp;<em><strong>AB, Ab, aB</strong></em>,<em><strong>&nbsp;</strong></em>and&nbsp;<em><strong>ab&nbsp;</strong></em>are different in Java.</p>
        <pre>System.out.println(&quot;Alice&quot;); // valid syntax
        <em>s</em>ystem.out.println(&quot;Alice&quot;); // invalid syntax</pre>
        <p><strong>4. Class Names</strong></p>
        <p><strong>i.</strong> The first letter of the class should be in Uppercase (lowercase is allowed, but not discouraged).</p>
        <p><strong>ii.&nbsp;</strong>If several words are used to form the name of the class, each inner word&rsquo;s first letter should be in Uppercase. Underscores are allowed, but not recommended. Also allowed are numbers and currency symbols, although the latter are also discouraged because the are used for a special purpose (for inner and anonymous classes).</p>
        <pre>class MyJavaProgram    // valid syntax
        class 1Program         // invalid syntax
        class My1Program       // valid syntax
        class $Program         // valid syntax, but discouraged
        class My$Program       // valid syntax, but discouraged (inner class Program inside the class My)
        class myJavaProgram    // valid syntax, but discouraged</pre>
        <p><strong>5. public static void main(String [] args)</strong></p>
        <p>The method main() is the main entry point into a Java program; this is where the processing starts. Also allowed is the signature&nbsp;<strong>public static void main(String&hellip; args)</strong>.</p>
        <p><strong>6. Method Names</strong></p>
        <p><strong>i.&nbsp;</strong>All the method names should start with a lowercase letter.</p>
        <p><strong>ii.</strong> If several words are used to form the name of the method, then each first letter of the inner word should be in Uppercase. Underscores are allowed, but not recommended. Also allowed are digits and currency symbols.</p>
        <pre>public void employeeRecords() // valid syntax
        public void EmployeeRecords() // valid syntax, but discouraged</pre>
        <p><strong>7. Identifiers in java</strong></p>
        <p>Identifiers are the names of local variables, instance and class variables, labels, but also the names for classes, packages, modules and methods. All Unicode characters are valid, not just the ASCII subset.&nbsp;</p>
        <p><strong>i.&nbsp;</strong>All identifiers can begin with a letter, a currency symbol or an underscore (<strong>_</strong>). According to the convention, a letter should be lower case for variables.</p>
        <p><strong>ii.&nbsp;</strong>The first character of identifiers can be followed by any combination of letters, digits, currency symbols and the underscore. The underscore is not recommended for the names of variables. Constants (static final attributes and enums) should be in all Uppercase letters.</p>
        <p><strong>iii.&nbsp;</strong>Most importantly identifiers are case-sensitive.</p>
        <p><strong>iv.</strong> A keyword cannot be used as an identifier since it is a reserved word and has some special meaning.</p>
        <pre>Legal identifiers: MinNumber, total, ak74, hello_world, $amount, _under_value
        Illegal identifiers: 74ak, -amount</pre>
        <p><strong>8. White-spaces in Java</strong></p>
        <p>A line containing only white-spaces, possibly with the comment, is known as a blank line, and the Java compiler totally ignores it.</p>
        <p><strong>9. Access Modifiers:&nbsp;</strong>These modifiers control the scope of class and methods.</p>
        <ul>
            <li><strong>Access Modifiers:</strong> default, public, protected, private</li>
            <li><strong>Non-access Modifiers:</strong> final, abstract, strictfp</li>
        </ul>
        <p><strong>10. Java Keywords</strong></p>
        <p><strong>Keywords or Reserved words</strong> are the words in a language that are used for some internal process or represent some predefined actions. These words are therefore not allowed to use as variable names or objects.&nbsp;</p>
        <blockquote><br></blockquote>`
    },

    {
        topic: "Java Identifiers",
        content: `<p>In programming languages, identifiers are used for identification purposes. In Java, an identifier can be a class name, method name, variable name, or label. For example :&nbsp;<br>&nbsp;</p>
        <pre>public class Test
        {
            public static void main(String[] args)
            {
                int a = 20;
            }
        }</pre>
        <p>&nbsp;</p>
        <div>&nbsp;</div>
        <p>In the above java code, we have 5 identifiers namely :&nbsp;<br>&nbsp;</p>
        <ul>
            <li><strong>Test</strong> : class name.</li>
            <li><strong>main</strong> : method name.</li>
            <li><strong>String</strong> : predefined class name.</li>
            <li><strong>args</strong> : variable name.</li>
            <li><strong>a</strong> : &nbsp;variable name.</li>
        </ul>
        <p><strong>Rules for defining Java Identifiers</strong>&nbsp;</p>
        <p>There are certain rules for defining a valid java identifier. These rules must be followed, otherwise we get compile-time error. These rules are also valid for other languages like C,C++.&nbsp;<br>&nbsp;</p>
        <div><br></div>
        <ul>
            <li>The only allowed characters for identifiers are all alphanumeric characters([<strong>A-Z</strong>],[<strong>a-z</strong>],[<strong>0-9</strong>]), &lsquo;<strong>$</strong>&lsquo;(dollar sign) and &lsquo;<strong>_</strong>&lsquo; (underscore).For example &ldquo;geek@&rdquo; is not a valid java identifier as it contain &lsquo;@&rsquo; special character.</li>
            <li>Identifiers should&nbsp;<strong>not</strong> start with digits(<strong>[0-9]</strong>). For example &ldquo;123geeks&rdquo; is a not a valid java identifier.</li>
            <li>Java identifiers are<strong>&nbsp;case-sensitive</strong>.</li>
            <li>There is no limit on the length of the identifier but it is advisable to use an optimum length of 4 &ndash; 15 letters only.</li>
            <li><strong>Reserved</strong> <strong>Words</strong> can&rsquo;t be used as an identifier. For example &ldquo;int while = 20;&rdquo; is an invalid statement as while is a reserved word. There are&nbsp;<strong>53</strong> reserved words in Java.</li>
        </ul>
        <p><strong>Examples of valid identifiers :&nbsp;</strong><br>&nbsp;</p>
        <pre>MyVariable
        MYVARIABLE
        myvariable
        x
        i
        x1
        i1
        _myvariable
        $myvariable
        sum_of_array
        geeks123</pre>
        <p><strong>Examples of invalid identifiers :&nbsp;</strong><br>&nbsp;</p>
        <pre>My Variable  // contains a space
        123geeks   // Begins with a digit
        a+c // plus sign is not an alphanumeric character
        variable-2 // hyphen is not an alphanumeric character
        sum_&amp;_difference // ampersand is not an alphanumeric character</pre>
        <p><strong>Reserved Words</strong>&nbsp;</p>
        <p>Any programming language reserves some words to represent functionalities defined by that language. These words are called reserved words.They can be briefly categorized into two parts :&nbsp;<strong>keywords</strong>(50) and&nbsp;<strong>literals</strong>(3). Keywords define functionalities and literals define a value. Identifiers are used by symbol tables in various analyzing phases(like lexical, syntax, semantic) of a compiler architecture.&nbsp;</p>
        <p><strong>Note:</strong> The keywords const and goto are reserved, even though they are not currently used. In place of const, the final keyword is used. Some keywords like&nbsp;strictfp&nbsp;are included in later versions of Java.</p>
        <blockquote><br></blockquote>`
    },
    {
        topic: "Variables & DataTypes in Java",
        content: `<h1>Variables in Java</h1>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>Variable in Java</strong> is a data container that saves the data values during Java program execution. Every variable is assigned a data type that designates the type and quantity of value it can hold. Variable is a memory location name of the data.</p>
        <p>A variable is a name given to a memory location. It is the basic unit of storage in a program.</p>
        <p>&nbsp;</p>
        <ul>
        <li>The value stored in a variable can be changed during program execution.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>A variable is only a name given to a memory location, all the operations done on the variable effects that memory location.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>In Java, all the variables must be declared before use.</li>
        &nbsp; &nbsp; &nbsp; &nbsp;</ul>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <h3>How to declare variables?</h3>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>We can declare variables in java as pictorially depicted below as a visual aid.</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20191110223008/java-declare.jpeg" alt="" /></p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>From the image, it can be easily perceived that while declaring a variable, we need to take care of two things that are:</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>1. Datatype</strong>: Type of data that can be stored in this variable.&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>2. Dataname:</strong> Name was given to the variable.&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>In this way, a name can only be given to a memory location. It can be assigned values in two ways:&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
        <ul>
        <li>Variable Initialization</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Assigning value by taking input</li>
        &nbsp; &nbsp; &nbsp; &nbsp;</ul>
        <h3>How to initialize variables?</h3>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>It can be perceived with the help of 3 components that are as follows:</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <ul>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li><strong>datatype</strong>: Type of data that can be stored in this variable.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li><strong>variable_name</strong>: Name given to the variable.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li><strong>value</strong>: It is the initial value stored in the variable.</li>
        &nbsp; &nbsp; &nbsp; &nbsp;</ul>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><img src="http://media.geeksforgeeks.org/wp-content/uploads/Variables-in-Java.png" alt="" /></p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>Illustrations:</strong>&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <pre>float simpleInterest;
                &nbsp; &nbsp; &nbsp; &nbsp; // Declaring float variable</pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <pre>int time = 10, speed = 20;
                &nbsp; &nbsp; &nbsp; &nbsp; // Declaring and Initializing integer variable</pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <pre>char var = 'h';
                &nbsp; &nbsp; &nbsp; &nbsp; // Declaring and Initializing character variable</pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <h3>Types of Variables in Java</h3>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>Now let us discuss different types of variables which are listed as<strong>&nbsp;</strong>follows:&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <ol>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Local Variables</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Instance Variables</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Static Variables</li>
        &nbsp; &nbsp; &nbsp; &nbsp;</ol>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20220216012050/variabletypes.png" alt="" width="511" /></p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>Let us discuss the traits of every variable been up here in detail.</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>1. Local Variables</strong>&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>A variable defined within a block or method or constructor is called a local variable.&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <ul>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>These variables are created when the block is entered, or the function is called and destroyed after exiting from the block or when the call returns from the function.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>The scope of these variables exists only within the block in which the variable is declared. i.e., we can access these variables only within that block.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Initialization of the local variable is mandatory before using it in the defined scope.&nbsp; &nbsp;</li>
        </ul>
        <div>
        <div>
        <div>
        <div>
        <div>
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>/*package whatever //do not write package name here */</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>// Contributed by Shubham Jain</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>import</code> <code>java.io.*;</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>class</code> <code>GFG {</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main(String[] args)</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>int</code> <code>var =&nbsp;</code><code>10</code><code>;&nbsp;</code><code>// Declared a Local Variable</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>// This variable is local to this main method only</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(</code><code>"Local Variable: "</code> <code>+ var);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
        </tr>
        </tbody>
        </table>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <div><strong>Output</strong> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <pre>Local Variable: 10</pre>
        &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>2. Instance Variables</strong></p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>Instance variables are non-static variables and are declared in a class outside any method, constructor, or block.&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <ul>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>As instance variables are declared in a class, these variables are created when an object of the class is created and destroyed when the object is destroyed.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Unlike local variables, we may use access specifiers for instance variables. If we do not specify any access specifier, then the default access specifier will be used.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Initialization of Instance Variable is not Mandatory. Its default value is 0</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Instance Variable can be accessed only by creating objects.&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</li>
        </ul>
        <div>
        <div>
        <div>&nbsp;</div>
        <div>
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>/*package whatever //do not write package name here */</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>import</code> <code>java.io.*;</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>class</code> <code>GFG {</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>String geek;&nbsp;</code><code>// Declared Instance Variable</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>GFG()</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>{&nbsp;</code><code>// Default Constructor</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>this</code><code>.geek =&nbsp;</code><code>"Shubham Jain"</code><code>;&nbsp;</code><code>// initializing Instance Variable</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>//Main Method</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main(String[] args)</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>// Object Creation</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>GFG name =&nbsp;</code><code>new</code> <code>GFG();</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>// Displaying O/P</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(</code><code>"Geek name is: "</code> <code>+ name.geek);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
        </tr>
        </tbody>
        </table>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <div><strong>Output</strong> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <pre>Geek name is: Shubham Jain</pre>
        &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>3. Static Variables</strong></p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>Static variables are also known as Class variables.&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <ul>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>These variables are declared similarly as instance variables. The difference is that static variables are declared using the static keyword within a class outside any method constructor or block.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Unlike instance variables, we can only have one copy of a static variable per class irrespective of how many objects we create.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Static variables are created at the start of program execution and destroyed automatically when execution ends.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Initialization of Static Variable is not Mandatory. Its default value is 0</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>If we access the static variable like the Instance variable (through an object), the compiler will show the warning message, which won&rsquo;t halt the program. The compiler will replace the object name with the class name automatically.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>If we access the static variable without the class name, the compiler will automatically append the class name.</li>
        </ul>
        <div>
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>/*package whatever //do not write package name here */</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>import</code> <code>java.io.*;</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>class</code> <code>GFG {</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp;&nbsp;</code>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>String geek =&nbsp;</code><code>"Shubham Jain"</code><code>; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>//Declared static variable</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp;&nbsp;</code>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main (String[] args) {</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;</code>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp;&nbsp;</code><code>//geek variable can be accessed withod object creation</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp;&nbsp;</code><code>//Displaying O/P</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp;&nbsp;</code><code>//GFG.geek --&gt; using the static variable</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(</code><code>"Geek Name is : "</code><code>+GFG.geek);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
        </tr>
        </tbody>
        </table>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <div><strong>Output</strong> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <pre>Geek Name is : Shubham Jain</pre>
        &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <h3>Differences between the Instance variable Vs. the Static variables</h3>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>Now let us do discuss the differences between the Instance variable Vs. the Static variables</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <ul>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Each object will have its copy of the instance variable, whereas We can only have one copy of a static variable per class irrespective of how many objects we create.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Changes made in an instance variable using one object will not be reflected in other objects as each object has its own copy of the instance variable. In the case of static, changes will be reflected in other objects as static variables are common to all objects of a class.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>We can access instance variables through object references, and Static Variables can be accessed directly using the class name<strong>.</strong></li>
        &nbsp; &nbsp; &nbsp; &nbsp;</ul>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>Syntax:</strong> Static and instance variables</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <pre>                class GFG
                &nbsp; &nbsp; &nbsp; &nbsp; {
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Static variable
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; static int a;
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Instance variable
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int b; &nbsp; &nbsp; &nbsp; &nbsp;
                &nbsp; &nbsp; &nbsp; &nbsp; } </pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <h1>Scope of Variables In Java</h1>
        <p>&nbsp;</p>
        <p>Scope of a variable is the part of the program where the variable is accessible. Like C/C++, in Java, all identifiers are lexically (or statically) scoped, i.e.scope of a variable can determined at compile time and independent of function call stack.&nbsp;<br />Java programs are organized in the form of classes. Every class is part of some package. Java scope rules can be covered under following categories.<br />&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>Member Variables (Class Level Scope)</strong></p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>These variables must be declared inside class (outside any function). They can be directly accessed anywhere in class. Let&rsquo;s take a look at an example:&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <pre>public class Test
                &nbsp; &nbsp; &nbsp; &nbsp; {
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // All variables defined directly inside a class
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // are member variables
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int a;
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private String b;
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; void method1() {....}
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int method2() {....}
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char c;
                &nbsp; &nbsp; &nbsp; &nbsp; }</pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <ul>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>We can declare class variables anywhere in class, but outside methods.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Access specified of member variables doesn&rsquo;t affect scope of them within a class.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Member variables can be accessed outside a class with following rules</li>
        &nbsp; &nbsp; &nbsp; &nbsp;</ul>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <pre><strong>                Modifier &nbsp; &nbsp; &nbsp;Package &nbsp;Subclass &nbsp;World</strong>
                &nbsp; &nbsp; &nbsp; &nbsp;
                &nbsp; &nbsp; &nbsp; &nbsp; public &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Yes &nbsp; &nbsp; &nbsp;Yes &nbsp; &nbsp; Yes
                &nbsp; &nbsp; &nbsp; &nbsp;
                &nbsp; &nbsp; &nbsp; &nbsp; protected &nbsp; &nbsp; &nbsp; Yes &nbsp; &nbsp; &nbsp;Yes &nbsp; &nbsp; No
                &nbsp; &nbsp; &nbsp; &nbsp;
                &nbsp; &nbsp; &nbsp; &nbsp; Default (no
                &nbsp; &nbsp; &nbsp; &nbsp; modifier) &nbsp; &nbsp; &nbsp; Yes &nbsp; &nbsp; &nbsp; No &nbsp; &nbsp; No
                &nbsp; &nbsp; &nbsp; &nbsp;
                &nbsp; &nbsp; &nbsp; &nbsp; private &nbsp; &nbsp; &nbsp; &nbsp; No &nbsp; &nbsp; &nbsp; &nbsp;No &nbsp; &nbsp; No</pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>Local Variables (Method Level Scope)</strong></p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>Variables declared inside a method have method level scope and can&rsquo;t be accessed outside the method.&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <div>&nbsp;</div>
        <pre>public class Test
                &nbsp; &nbsp; &nbsp; &nbsp; {
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; void method1()
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Local variable (Method level scope)
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int x;
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
                &nbsp; &nbsp; &nbsp; &nbsp; }</pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>Note :</strong> Local variables don&rsquo;t exist after method&rsquo;s execution is over.&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>Here&rsquo;s another example of method scope, except this time the variable got passed in as a parameter to the method:&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <pre>class Test
                &nbsp; &nbsp; &nbsp; &nbsp; {
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; private int x;
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void setX(int x)
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.x = x;
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
                &nbsp; &nbsp; &nbsp; &nbsp; }</pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>The above code uses this keyword to differentiate between the local and class variables.</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>As an exercise, predict the output of following Java program.&nbsp;&nbsp;</p>
        <div>
        <div>
        <div>
        <div>
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>public</code> <code>class</code> <code>Test</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>static</code> <code>int</code> <code>x =&nbsp;</code><code>11</code><code>;</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>private</code> <code>int</code> <code>y =&nbsp;</code><code>33</code><code>;</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>void</code> <code>method1(</code><code>int</code> <code>x)</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>Test t =&nbsp;</code><code>new</code> <code>Test();</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>this</code><code>.x =&nbsp;</code><code>22</code><code>;</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>y =&nbsp;</code><code>44</code><code>;</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(</code><code>"Test.x: "</code> <code>+ Test.x);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(</code><code>"t.x: "</code> <code>+ t.x);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(</code><code>"t.y: "</code> <code>+ t.y);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(</code><code>"y: "</code> <code>+ y);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main(String args[])</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>Test t =&nbsp;</code><code>new</code> <code>Test();</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>t.method1(</code><code>5</code><code>);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
        </tr>
        </tbody>
        </table>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>Output:</strong>&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <pre>Test.x: 22
                &nbsp; &nbsp; &nbsp; &nbsp; t.x: 22
                &nbsp; &nbsp; &nbsp; &nbsp; t.y: 33
                &nbsp; &nbsp; &nbsp; &nbsp; y: 44</pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>Loop Variables (Block Scope)</strong>&nbsp;<br />A variable declared inside pair of brackets &ldquo;{&rdquo; and &ldquo;}&rdquo; in a method has scope within the brackets only.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
        <div>
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>public</code> <code>class</code> <code>Test</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main(String args[])</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>// The variable x has scope within</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>// brackets</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>int</code> <code>x =&nbsp;</code><code>10</code><code>;</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(x);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>// Uncommenting below line would produce</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>// error since variable x is out of scope.</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>// System.out.println(x);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
        </tr>
        </tbody>
        </table>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        </div>
        <p><strong>Output:&nbsp;</strong></p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <pre>10</pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>As another example, consider following program with a for loop.&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p>
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>class</code> <code>Test</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main(String args[])</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>for</code> <code>(</code><code>int</code> <code>x =&nbsp;</code><code>0</code><code>; x &lt;&nbsp;</code><code>4</code><code>; x++)</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(x);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>// Will produce error</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(x);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
        </tr>
        </tbody>
        </table>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>Output:&nbsp;</strong></p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <pre>11: error: cannot find symbol
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(x); &nbsp; &nbsp; &nbsp;</pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>The right way of doing above is,&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>// Above program after correcting the error</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>class</code> <code>Test</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main(String args[])</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>int</code> <code>x;</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>for</code> <code>(x =&nbsp;</code><code>0</code><code>; x &lt;&nbsp;</code><code>4</code><code>; x++)</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(x);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;</code><code>System.out.println(x);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
        </tr>
        </tbody>
        </table>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>&nbsp;</p>
        <div>
        <div>
        <div>
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>Output:</strong>&nbsp;</p>
        <pre>                0
                &nbsp; &nbsp; &nbsp; &nbsp; 1
                &nbsp; &nbsp; &nbsp; &nbsp; 2
                &nbsp; &nbsp; &nbsp; &nbsp; 3
                &nbsp; &nbsp; &nbsp; &nbsp; 4</pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>Let&rsquo;s look at tricky example of loop scope. Predict the output of following program. You may be surprised if you are regular C/C++ programmer.&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>class</code> <code>Test</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main(String args[])</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>int</code> <code>a =&nbsp;</code><code>5</code><code>;</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>for</code> <code>(</code><code>int</code> <code>a =&nbsp;</code><code>0</code><code>; a &lt;&nbsp;</code><code>5</code><code>; a++)</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(a);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
        </tr>
        </tbody>
        </table>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>&nbsp;</p>
        <div>
        <div>
        <div>
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>Output :</strong></p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <pre>6: error: variable a is already defined in method go(int)
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for (int a = 0; a &lt; 5; a++) &nbsp; &nbsp; &nbsp;
                &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^
                &nbsp; &nbsp; &nbsp; &nbsp; 1 error</pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>Note:- In C++, it will run. But in java it is an error because in java, the name of the variable of inner and outer loop must be different.</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>As an exercise, predict the output of the following Java program.&nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp;</p>
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>class</code> <code>Test</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main(String args[])</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>int</code> <code>x =&nbsp;</code><code>5</code><code>;</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>int</code> <code>x =&nbsp;</code><code>10</code><code>;</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(x);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
        </tr>
        </tbody>
        </table>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>&nbsp;</p>
        <div>
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>Q. From the above knowledge, tell whether the below code will run or not.</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>class</code> <code>Test {</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main(String args[])</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>{</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>for</code> <code>(</code><code>int</code> <code>i =&nbsp;</code><code>1</code><code>; i &lt;=&nbsp;</code><code>10</code><code>; i++) {</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(i);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>int</code> <code>i =&nbsp;</code><code>20</code><code>;</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code><code>System.out.println(i);</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>&nbsp; &nbsp;&nbsp;</code><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <div><code>}</code></div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
        </tr>
        </tbody>
        </table>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>&nbsp;</p>
        <div>
        <div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div>
        </div>
        <p><strong>Output :&nbsp;</strong></p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <pre>1
                &nbsp; &nbsp; &nbsp; &nbsp; 2
                &nbsp; &nbsp; &nbsp; &nbsp; 3
                &nbsp; &nbsp; &nbsp; &nbsp; 4
                &nbsp; &nbsp; &nbsp; &nbsp; 5
                &nbsp; &nbsp; &nbsp; &nbsp; 6
                &nbsp; &nbsp; &nbsp; &nbsp; 7
                &nbsp; &nbsp; &nbsp; &nbsp; 8
                &nbsp; &nbsp; &nbsp; &nbsp; 9
                &nbsp; &nbsp; &nbsp; &nbsp; 10
                &nbsp; &nbsp; &nbsp; &nbsp; 20</pre>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p>Yes, it will run!&nbsp;<br />See the program carefully, inner loop will terminate before the outer loop variable is declared.So the inner loop variable is destroyed first and then the new variable of same name has been created.</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <p><strong>Some Important Points about Variable scope in Java:</strong> &nbsp;</p>
        <p>&nbsp; &nbsp; &nbsp; &nbsp;</p>
        <ul>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>In general, a set of curly brackets { } defines a scope.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>In Java we can usually access a variable as long as it was defined within the same set of brackets as the code we are writing or within any curly brackets inside of the curly brackets where the variable was defined.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>Any variable defined in a class outside of any method can be used by all member methods.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>When a method has the same local variable as a member, &ldquo;this&rdquo; keyword can be used to reference the current class variable.</li>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <li>For a variable to be read after the termination of a loop, It must be declared before the body of the loop.</li>
        &nbsp; &nbsp; &nbsp; &nbsp;</ul>
        <h1 id="h1">Data Types in Java</h1>
        <p>Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java:</p>
        <ol class="points">
        <li><strong>Primitive data types:</strong>&nbsp;The primitive data types include boolean, char, byte, short, int, long, float and double.</li>
        <li><strong>Non-primitive data types:</strong>&nbsp;The non-primitive data types include&nbsp;Classes,&nbsp;Interfaces, and&nbsp;Arrays.</li>
        </ol>
        <h2 class="h2">Java Primitive Data Types</h2>
        <p>In Java language, primitive data types are the building blocks of data manipulation. These are the most basic data types available in&nbsp;Java language.</p>
        <p class="n">Java is a statically-typed programming language. It means, all&nbsp;variables&nbsp;must be declared before its use. That is why we need to declare variable's type and name.</p>
        <p>There are 8 types of primitive data types:</p>
        <ul class="points">
        <li>boolean data type</li>
        <li>byte data type</li>
        <li>char data type</li>
        <li>short data type</li>
        <li>int data type</li>
        <li>long data type</li>
        <li>float data type</li>
        <li>double data type</li>
        </ul>
        <p><img src="https://static.javatpoint.com/images/java-data-types.png" alt="Java Data Types" /></p>
        <table class="alt">
        <tbody>
        <tr>
        <th id="table_dvpt_datatype"><strong>Data Type</strong></th>
        <th id="table_dvpt_defaultvalue"><strong>Default Value</strong></th>
        <th id="table_dvpt_defaultsize"><strong>Default size</strong></th>
        </tr>
        <tr>
        <td headers="table_dvpt_datatype">boolean</td>
        <td headers="table_dvpt_defaultvalue">false</td>
        <td headers="table_dvpt_defaultsize">1 bit</td>
        </tr>
        <tr>
        <td headers="table_dvpt_datatype">char</td>
        <td headers="table_dvpt_defaultvalue">'\u0000'</td>
        <td headers="table_dvpt_defaultsize">2 byte</td>
        </tr>
        <tr>
        <td headers="table_dvpt_datatype">byte</td>
        <td headers="table_dvpt_defaultvalue">0</td>
        <td headers="table_dvpt_defaultsize">1 byte</td>
        </tr>
        <tr>
        <td headers="table_dvpt_datatype">short</td>
        <td headers="table_dvpt_defaultvalue">0</td>
        <td headers="table_dvpt_defaultsize">2 byte</td>
        </tr>
        <tr>
        <td headers="table_dvpt_datatype">int</td>
        <td headers="table_dvpt_defaultvalue">0</td>
        <td headers="table_dvpt_defaultsize">4 byte</td>
        </tr>
        <tr>
        <td headers="table_dvpt_datatype">long</td>
        <td headers="table_dvpt_defaultvalue">0L</td>
        <td headers="table_dvpt_defaultsize">8 byte</td>
        </tr>
        <tr>
        <td headers="table_dvpt_datatype">float</td>
        <td headers="table_dvpt_defaultvalue">0.0f</td>
        <td headers="table_dvpt_defaultsize">4 byte</td>
        </tr>
        <tr>
        <td headers="table_dvpt_datatype">double</td>
        <td headers="table_dvpt_defaultvalue">0.0d</td>
        <td headers="table_dvpt_defaultsize">8 byte</td>
        </tr>
        </tbody>
        </table>
        <h2 class="h2">Boolean Data Type</h2>
        <p>The Boolean data type is used to store only two possible values: true and false. This data type is used for simple flags that track true/false conditions.</p>
        <p>The Boolean data type specifies one bit of information, but its "size" can't be defined precisely.</p>
        <p><strong>Example:</strong></p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt">Boolean&nbsp;one&nbsp;=&nbsp;<span class="keyword">false</span>&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <h2 class="h2">Byte Data Type</h2>
        <p>The byte data type is an example of primitive data type. It isan 8-bit signed two's complement integer. Its value-range lies between -128 to 127 (inclusive). Its minimum value is -128 and maximum value is 127. Its default value is 0.</p>
        <p>The byte data type is used to save memory in large arrays where the memory savings is most required. It saves space because a byte is 4 times smaller than an integer. It can also be used in place of "int" data type.</p>
        <p><strong>Example:</strong></p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="keyword">byte</span>&nbsp;a&nbsp;=&nbsp;<span class="number">10</span>,&nbsp;<span class="keyword">byte</span>&nbsp;b&nbsp;=&nbsp;-<span class="number">20</span>&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <h2 class="h2">Short Data Type</h2>
        <p>The short data type is a 16-bit signed two's complement integer. Its value-range lies between -32,768 to 32,767 (inclusive). Its minimum value is -32,768 and maximum value is 32,767. Its default value is 0.</p>
        <p>The short data type can also be used to save memory just like byte data type. A short data type is 2 times smaller than an integer.</p>
        <p><strong>Example:</strong></p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="keyword">short</span>&nbsp;s&nbsp;=&nbsp;<span class="number">10000</span>,&nbsp;<span class="keyword">short</span>&nbsp;r&nbsp;=&nbsp;-<span class="number">5000</span>&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <h2 class="h2">Int Data Type</h2>
        <p>The int data type is a 32-bit signed two's complement integer. Its value-range lies between - 2,147,483,648 (-2^31) to 2,147,483,647 (2^31 -1) (inclusive). Its minimum value is - 2,147,483,648and maximum value is 2,147,483,647. Its default value is 0.</p>
        <p>The int data type is generally used as a default data type for integral values unless if there is no problem about memory.</p>
        <p><strong>Example:</strong></p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="keyword">int</span>&nbsp;a&nbsp;=&nbsp;<span class="number">100000</span>,&nbsp;<span class="keyword">int</span>&nbsp;b&nbsp;=&nbsp;-<span class="number">200000</span>&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <h2 class="h2">Long Data Type</h2>
        <p>The long data type is a 64-bit two's complement integer. Its value-range lies between -9,223,372,036,854,775,808(-2^63) to 9,223,372,036,854,775,807(2^63 -1)(inclusive). Its minimum value is - 9,223,372,036,854,775,808and maximum value is 9,223,372,036,854,775,807. Its default value is 0. The long data type is used when you need a range of values more than those provided by int.</p>
        <p><strong>Example:</strong></p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="keyword">long</span>&nbsp;a&nbsp;=&nbsp;100000L,&nbsp;<span class="keyword">long</span>&nbsp;b&nbsp;=&nbsp;-200000L&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <h2 class="h2">Float Data Type</h2>
        <p>The float data type is a single-precision 32-bit IEEE 754 floating point.Its value range is unlimited. It is recommended to use a float (instead of double) if you need to save memory in large arrays of floating point numbers. The float data type should never be used for precise values, such as currency. Its default value is 0.0F.</p>
        <p><strong>Example:</strong></p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <ol class="dp-j" start="1">
        <li class="alt"><span class="keyword">float</span>&nbsp;f1&nbsp;=&nbsp;<span class="number">234</span>.5f&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <h2 class="h2">Double Data Type</h2>
        <p>The double data type is a double-precision 64-bit IEEE 754 floating point. Its value range is unlimited. The double data type is generally used for decimal values just like float. The double data type also should never be used for precise values, such as currency. Its default value is 0.0d.</p>
        <p><strong>Example:</strong></p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="keyword">double</span>&nbsp;d1&nbsp;=&nbsp;<span class="number">12.3</span>&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <h2 class="h2">Char Data Type</h2>
        <p>The char data type is a single 16-bit Unicode character. Its value-range lies between '\u0000' (or 0) to '\uffff' (or 65,535 inclusive).The char data type is used to store characters.</p>
        <p><strong>Example:</strong></p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="keyword">char</span>&nbsp;letterA&nbsp;=&nbsp;<span class="string">'A'</span>&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <h3 class="h2">Why char uses 2 byte in java and what is \u0000 ?</h3>
        <p>It is because java uses Unicode system not ASCII code system. The \u0000 is the lowest range of Unicode system.</p>
        <ul>
        <ul>&nbsp; &nbsp; &nbsp;&nbsp;</ul>
        </ul>
        <p>&nbsp;</p>
        <h1>&nbsp;</h1> `
    },
    {
        topic: "Operators in Java",
        content: `<h1>Operators in Java</h1><p>Java provides many types of operators which can be used according to the need. They are classified based on the functionality they provide. Some of the types are:</p>
        <ol>
        <li>Arithmetic Operators</li>
        <li>Unary Operators</li>
        <li>Assignment Operator</li>
        <li>Relational Operators</li>
        <li>Logical Operators</li>
        <li>Ternary Operator</li>
        <li>Bitwise Operators</li>
        <li>Shift Operators</li>
        <li>instance of operator</li>
        </ol>
        <p>Let&rsquo;s take a look at them in detail.&nbsp;</p>
        <p><strong>1. Arithmetic Operators:</strong>&nbsp;They are used to perform simple arithmetic operations on primitive data types.&nbsp;</p>
        <ul>
        <li><strong>* :&nbsp;</strong>Multiplication</li>
        <li><strong>/ :&nbsp;</strong>Division</li>
        <li><strong>% :&nbsp;</strong>Modulo</li>
        <li><strong>+ :&nbsp;</strong>Addition</li>
        <li><strong>&ndash; :&nbsp;</strong>Subtraction</li>
        </ul>
        <p><strong>2. Unary Operators:</strong>&nbsp;Unary operators need only one operand. They are used to increment, decrement or negate a value.&nbsp;</p>
        <ul>
        <li><strong>&ndash; :</strong>&nbsp;<strong>Unary minus</strong>, used for negating the values.</li>
        <li><strong>+ :</strong>&nbsp;<strong>Unary plus</strong>&nbsp;indicates the positive value (numbers are positive without this, however). It performs an automatic conversion to int when the type of its operand is the byte, char, or short. This is called unary numeric promotion.</li>
        <li><strong>++ :</strong>&nbsp;<strong>Increment operator</strong>, used for incrementing the value by 1. There are two varieties of increment operators.&nbsp;
        <ul>
        <li><strong>Post-Increment:&nbsp;</strong>Value is first used for computing the result and then incremented.</li>
        <li><strong>Pre-Increment:&nbsp;</strong>Value is incremented first, and then the result is computed.</li>
        </ul>
        </li>
        <li><strong>&mdash; : Decrement operator</strong>, used for decrementing the value by 1. There are two varieties of decrement operators.&nbsp;
        <ul>
        <li><strong>Post-decrement:&nbsp;</strong>Value is first used for computing the result and then decremented.</li>
        <li><strong>Pre-Decrement:&nbsp;</strong>Value is decremented first, and then the result is computed.</li>
        </ul>
        </li>
        <li><strong>! : Logical not operator</strong>, used for inverting a boolean value.</li>
        </ul>
        <p><strong>3. Assignment Operator: &lsquo;=&rsquo;</strong>&nbsp;Assignment operator is used to assign a value to any variable. It has a right to left associativity, i.e. value given on the right-hand side of the operator is assigned to the variable on the left, and therefore right-hand side value must be declared before using it or should be a constant.&nbsp;</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p>The general format of the assignment operator is:</p>
        <pre>variable <strong>=</strong> value;</pre>
        <p>In many cases, the assignment operator can be combined with other operators to build a shorter version of the statement called a&nbsp;<strong>Compound Statement</strong>. For example, instead of a&nbsp;<strong>=</strong>&nbsp;a+5, we can write a&nbsp;<strong>+=</strong>&nbsp;5.&nbsp;</p>
        <ul>
        <li><strong>+=</strong>, for adding left operand with right operand and then assigning it to the variable on the left.</li>
        <li><strong>-=</strong>, for subtracting right operand from left operand and then assigning it to the variable on the left.</li>
        <li><strong>*=</strong>, for multiplying left operand with right operand and then assigning it to the variable on the left.</li>
        <li><strong>/=</strong>, for dividing left operand by right operand and then assigning it to the variable on the left.</li>
        <li><strong>%=</strong>, for assigning modulo of left operand by right operand and then assigning it to the variable on the left.</li>
        </ul>
        <p><strong>4. Relational Operators:</strong>&nbsp;These operators are used to check for relations like equality, greater than, less than. They return boolean results after the comparison and are extensively used in looping statements as well as conditional if-else statements. The general format is,&nbsp;</p>
        <pre>variable <strong>relation_operator</strong> value</pre>
        <ul>
        <li>Some of the relational operators are-&nbsp;
        <ul>
        <li><strong>==, Equal to:&nbsp;</strong>returns true if the left-hand side is equal to the right-hand side.</li>
        <li><strong>!=, Not Equal to:&nbsp;</strong>returns true if the left-hand side is not equal to the right-hand side.</li>
        <li><strong>&lt;, less than:&nbsp;</strong>returns true if the left-hand side is less than the right-hand side.</li>
        <li><strong>&lt;=, less than or equal to&nbsp;</strong>returns true if the left-hand side is less than or equal to the right-hand side.</li>
        <li><strong>&gt;, Greater than:&nbsp;</strong>returns true if the left-hand side is greater than the right-hand side.</li>
        <li><strong>&gt;=, Greater than or equal to:&nbsp;</strong>returns true if the left-hand side is greater than or equal to the right-hand side.</li>
        </ul>
        </li>
        </ul>
        <p><strong>5. Logical Operators:</strong>&nbsp;These operators are used to perform &ldquo;logical AND&rdquo; and &ldquo;logical OR&rdquo; operations, i.e., the function similar to AND gate and OR gate in digital electronics. One thing to keep in mind is the second condition is not evaluated if the first one is false, i.e., it has a short-circuiting effect. Used extensively to test for several conditions for making a decision. Java also have &ldquo;Logical NOT&rdquo;, it returns true when condition is false and vice-versa</p>
        <p><em>Conditional operators are:</em></p>
        <ul>
        <li><strong>&amp;&amp;, Logical AND:&nbsp;</strong>returns true when both conditions are true.</li>
        <li><strong>||, Logical OR:&nbsp;</strong>returns true if at least one condition is true.</li>
        <li><strong>! , Logical NOT:&nbsp;</strong>returns true when condition is false and vice-versa</li>
        </ul>
        <p><strong>6. Ternary operator:</strong>&nbsp;Ternary operator is a shorthand version of the if-else statement. It has three operands and hence the name ternary.</p>
        <p>The general format is:</p>
        <pre>condition <strong>?</strong> if true <strong>:</strong> if false</pre>
        <p>The above statement means that if the condition evaluates to true, then execute the statements after the &lsquo;?&rsquo; else execute the statements after the &lsquo;:.&rsquo;&nbsp;&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_388422" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// max of three numbers using</code></div>
        <div class="line number3 index2 alt2"><code class="comments">// ternary operator.</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">operators {</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">a = </code><code class="value">20</code><code class="plain">, b = </code><code class="value">10</code><code class="plain">, c = </code><code class="value">30</code><code class="plain">, result;</code></div>
        <div class="line number8 index7 alt1">&nbsp;</div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// result holds max of three</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// numbers</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">result</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= ((a &gt; b) ? (a &gt; c) ? a : c : (b &gt; c) ? b : c);</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Max of three numbers = "</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ result);</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Max of three numbers = 30</pre>
        </div>
        <p><strong>7. Bitwise Operators:</strong>&nbsp;These operators are used to perform the manipulation of individual bits of a number. They can be used with any of the integer types. They are used when performing update and query operations of the Binary indexed trees.&nbsp;</p>
        <ul>
        <li><strong>&amp;, Bitwise AND operator:&nbsp;</strong>returns bit by bit AND of input values.</li>
        <li><strong>|, Bitwise OR operator:&nbsp;</strong>returns bit by bit OR of input values.</li>
        <li><strong>^, Bitwise XOR operator:&nbsp;</strong>returns bit by bit XOR of input values.</li>
        <li><strong>~, Bitwise Complement Operator:&nbsp;</strong>This is a unary operator which returns the one&rsquo;s complement representation of the input value, i.e., with all bits inverted.</li>
        </ul>
        <p><strong>8. Shift Operators:</strong>&nbsp;These operators are used to shift the bits of a number left or right, thereby multiplying or dividing the number by two, respectively. They can be used when we have to multiply or divide a number by two. General format-&nbsp;</p>
        <pre> number <strong>shift_op</strong> number_of_places_to_shift;</pre>
        <ul>
        <li><strong>&lt;&lt;, Left shift operator:&nbsp;</strong>shifts the bits of the number to the left and fills 0 on voids left as a result. Similar effect as of multiplying the number with some power of two.</li>
        <li><strong>&gt;&gt;, Signed Right shift operator:&nbsp;</strong>shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit depends on the sign of the initial number. Similar effect as of dividing the number with some power of two.</li>
        <li><strong>&gt;&gt;&gt;, Unsigned Right shift operator:&nbsp;</strong>shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit is set to 0.</li>
        </ul>
        <p><strong>9. instanceof operator:</strong>&nbsp;The instance of the operator is used for type checking. It can be used to test if an object is an instance of a class, a subclass, or an interface. General format-&nbsp;</p>
        <pre>object <strong>instance of</strong> class/subclass/interface</pre>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_229116" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// instance of operator</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">operators {</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Person obj1 = </code><code class="keyword">new</code> <code class="plain">Person();</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Person obj2 = </code><code class="keyword">new</code> <code class="plain">Boy();</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// As obj is of type person, it is not an</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// instance of Boy or interface</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"obj1 instanceof Person: "</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ (obj1 </code><code class="keyword">instanceof</code> <code class="plain">Person));</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"obj1 instanceof Boy: "</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ (obj1 </code><code class="keyword">instanceof</code> <code class="plain">Boy));</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"obj1 instanceof MyInterface: "</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ (obj1 </code><code class="keyword">instanceof</code> <code class="plain">MyInterface));</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Since obj2 is of type boy,</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// whose parent class is person</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// and it implements the interface Myinterface</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// it is instance of all of these classes</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"obj2 instanceof Person: "</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ (obj2 </code><code class="keyword">instanceof</code> <code class="plain">Person));</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"obj2 instanceof Boy: "</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ (obj2 </code><code class="keyword">instanceof</code> <code class="plain">Boy));</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"obj2 instanceof MyInterface: "</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ (obj2 </code><code class="keyword">instanceof</code> <code class="plain">MyInterface));</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number30 index29 alt1"><code class="plain">}</code></div>
        <div class="line number31 index30 alt2">&nbsp;</div>
        <div class="line number32 index31 alt1"><code class="keyword">class</code> <code class="plain">Person {</code></div>
        <div class="line number33 index32 alt2"><code class="plain">}</code></div>
        <div class="line number34 index33 alt1">&nbsp;</div>
        <div class="line number35 index34 alt2"><code class="keyword">class</code> <code class="plain">Boy </code><code class="keyword">extends</code> <code class="plain">Person </code><code class="keyword">implements</code> <code class="plain">MyInterface {</code></div>
        <div class="line number36 index35 alt1"><code class="plain">}</code></div>
        <div class="line number37 index36 alt2">&nbsp;</div>
        <div class="line number38 index37 alt1"><code class="keyword">interface</code> <code class="plain">MyInterface {</code></div>
        <div class="line number39 index38 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>obj1 instanceof Person: true
        obj1 instanceof Boy: false
        obj1 instanceof MyInterface: false
        obj2 instanceof Person: true
        obj2 instanceof Boy: true
        obj2 instanceof MyInterface: true</pre>
        </div>
        <h3>Precedence and Associativity of Operators</h3>
        <p>Precedence and associative rules are used when dealing with hybrid equations involving more than one type of operator. In such cases, these rules determine which part of the equation to consider first, as there can be many different valuations for the same equation. The below table depicts the precedence of operators in decreasing order as magnitude, with the top representing the highest precedence and the bottom showing the lowest precedence.</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/operators.png" alt="Precedence and Associativity of Operators in Java" /></p>
        <h3>Interesting Questions on Operators&nbsp;</h3>
        <p><strong>1. Precedence and Associativity:</strong>&nbsp;There is often confusion when it comes to hybrid equations that are equations having multiple operators. The problem is which part to solve first. There is a golden rule to follow in these situations. If the operators have different precedence, solve the higher precedence first. If they have the same precedence, solve according to associativity, that is, either from right to left or from left to right. Explanation of the below program is well written in comments within the program itself.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist3-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist3-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_115276" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">operators {</code></div>
        <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">a = </code><code class="value">20</code><code class="plain">, b = </code><code class="value">10</code><code class="plain">, c = </code><code class="value">0</code><code class="plain">, d = </code><code class="value">20</code><code class="plain">, e = </code><code class="value">40</code><code class="plain">, f = </code><code class="value">30</code><code class="plain">;</code></div>
        <div class="line number5 index4 alt2">&nbsp;</div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// precedence rules for arithmetic operators.</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// (* = / = %) &gt; (+ = -)</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// prints a+(b/d)</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"a+b/d = "</code> <code class="plain">+ (a + b / d));</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if same precedence then associative</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// rules are followed.</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// e/f -&gt; b*d -&gt; a+(b*d) -&gt; a+(b*d)-(e/f)</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"a+b*d-e/f = "</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ (a + b * d - e / f));</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>a+b/d = 20
        a+b*d-e/f = 219</pre>
        </div>
        <p><strong>2. Be a Compiler:&nbsp;</strong>Compiler in our systems uses a lex tool to match the greatest match when generating tokens. This creates a bit of a problem if overlooked. For example, consider the statement&nbsp;<strong>a=b+++c</strong>; too many of the readers, this might seem to create a compiler error. But this statement is absolutely correct as the token created by lex are a, =, b, ++, +, c. Therefore, this statement has a similar effect of first assigning b+c to a and then incrementing b. Similarly, a=b+++++c; would generate error as tokens generated are a, =, b, ++, ++, +, c. which is actually an error as there is no operand after the second unary operand.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist4-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist4-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_576638" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">operators {</code></div>
        <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">a = </code><code class="value">20</code><code class="plain">, b = </code><code class="value">10</code><code class="plain">, c = </code><code class="value">0</code><code class="plain">;</code></div>
        <div class="line number5 index4 alt2">&nbsp;</div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// a=b+++c is compiled as</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// b++ +c</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// a=b+c then b=b+1</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">a = b++ + c;</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Value of a(b+c), "</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">" b(b+1), c = "</code> <code class="plain">+ a + </code><code class="string">", "</code> <code class="plain">+ b</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">", "</code> <code class="plain">+ c);</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// a=b+++++c is compiled as</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// b++ ++ +c</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// which gives error.</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// a=b+++++c;</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// System.out.println(b+++++c);</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number20 index19 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Value of a(b+c),  b(b+1), c = 10, 11, 0</pre>
        </div>
        <p><strong>3. Using + over ():&nbsp;</strong>When using + operator inside&nbsp;<em><strong>system.out.println()</strong></em>&nbsp;make sure to do addition using parenthesis. If we write something before doing addition, then string addition takes place, that is, associativity of addition is left to right, and hence integers are added to a string first producing a string, and string objects concatenate when using +. Therefore it can create unwanted results.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist5-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist5-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_458726" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">operators {</code></div>
        <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number4 index3 alt1">&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">5</code><code class="plain">, y = </code><code class="value">8</code><code class="plain">;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// concatenates x and y as</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// first x is added to "concatenation (x+y) = "</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// producing "concatenation (x+y) = 5"</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// and then 8 is further concatenated.</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Concatenation (x+y)= "</code> <code class="plain">+ x + y);</code></div>
        <div class="line number12 index11 alt1">&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// addition of x and y</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Addition (x+y) = "</code> <code class="plain">+ (x + y));</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Concatenation (x+y)= 58
        Addition (x+y) = 13</pre>
        </div>`
    },
    {
        topic: "Packages In Java",
        content: `<h1>Packages In Java</h1>
        <div class="text">
        <div>&nbsp;</div>
        <p><strong>Package</strong>&nbsp;in&nbsp;Java&nbsp;is a mechanism to encapsulate a group of classes, sub packages and interfaces. Packages are used for:</p>
        <ul>
        <li>Preventing naming conflicts. For example there can be two classes with name Employee in two packages, college.staff.cse.Employee and college.staff.ee.Employee</li>
        <li>Making searching/locating and usage of classes, interfaces, enumerations and annotations easier</li>
        <li>Providing controlled access: protected and default have package level access control. A protected member is accessible by classes in the same package and its subclasses. A default member (without any access specifier) is accessible by classes in the same package only.</li>
        <li>Packages can be considered as data encapsulation (or data-hiding).</li>
        </ul>
        <p>All we need to do is put related classes into packages. After that, we can simply write an import class from existing packages and use it in our program. A package is a container of a group of related classes where some of the classes are accessible are exposed and others are kept for internal purpose.<br />We can reuse existing classes from the packages as many time as we need it in our program.</p>
        <p align="center"><strong>How packages work?</strong></p>
        <p>Package names and directory structure are closely related. For example if a package name is&nbsp;<em>college.staff.cse</em>, then there are three directories,&nbsp;<em>college</em>,&nbsp;<em>staff</em>&nbsp;and&nbsp;<em>cse</em>&nbsp;such that&nbsp;<em>cse</em>&nbsp;is present in&nbsp;<em>staff</em>&nbsp;and&nbsp;<em>staff</em>&nbsp;is present&nbsp;<em>college</em>. Also, the directory&nbsp;<em>college</em>&nbsp;is accessible through&nbsp;<a href="https://en.wikipedia.org/wiki/Classpath_(Java)">CLASSPATH</a>&nbsp;variable, i.e., path of parent directory of college is present in CLASSPATH. The idea is to make sure that classes are easy to locate.<br /><strong>Package naming conventions :</strong>&nbsp;Packages are named in reverse order of domain names, i.e., org.geeksforgeeks.practice. For example, in a college, the recommended convention is college.tech.cse, college.tech.ee, college.art.history, etc.</p>
        <p><strong>Adding a class to a Package :</strong>&nbsp;We can add more classes to a created package by using package name at the top of the program and saving it in the package directory. We need a new&nbsp;<strong>java</strong>&nbsp;file to define a public class, otherwise we can add the new class to an existing&nbsp;<strong>.java</strong>&nbsp;file and recompile it.</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p><strong>Subpackages:</strong>&nbsp;Packages that are inside another package are the&nbsp;<strong>subpackages</strong>. These are not imported by default, they have to imported explicitly. Also, members of a subpackage have no access privileges, i.e., they are considered as different package for protected and default access specifiers.<br /><strong>Example :</strong></p>
        <pre>import java.util.*;
        </pre>
        <p><strong>util</strong>&nbsp;is a subpackage created inside&nbsp;<strong>java</strong>&nbsp;package.</p>
        <p>&nbsp;</p>
        <p align="center"><strong>Accessing classes inside a package</strong></p>
        <p>Consider following two statements :</p>
        <pre>// import the Vector class from util package.
        import java.util.vector; 
        
        // import all the classes from util package
        import java.util.*; 
        </pre>
        <ul>
        <li>First Statement is used to import&nbsp;<strong>Vector</strong>&nbsp;class from&nbsp;<strong>util</strong>&nbsp;package which is contained inside&nbsp;<strong>java</strong>.</li>
        <li>Second statement imports all the classes from&nbsp;<strong>util</strong>&nbsp;package.</li>
        </ul>
        <pre>// All the classes and interfaces of this package
        // will be accessible but not subpackages.
        import package.*;
        
        // Only mentioned class of this package will be accessible.
        import package.classname;
        
        // Class name is generally used when two packages have the same
        // class name. For example in below code both packages have
        // date class so using a fully qualified name to avoid conflict
        import java.util.Date;
        import my.package.Date;
        </pre>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_602764" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate accessing of members when</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// corresponding classes are imported and not imported.</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.Vector;</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">ImportDemo</code></div>
        <div class="line number6 index5 alt1"><code class="plain">{</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">ImportDemo()</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// java.util.Vector is imported, hence we are</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// able to access directly in our code.</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Vector newVector = </code><code class="keyword">new</code> <code class="plain">Vector();</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// java.util.ArrayList is not imported, hence&nbsp;</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// we were referring to it using the complete&nbsp;</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// package.</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">java.util.ArrayList newList = </code><code class="keyword">new</code> <code class="plain">java.util.ArrayList();</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String arg[])</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">ImportDemo();</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>&nbsp;<br /><strong>Types of packages:</strong><br /><img class="aligncenter size-full wp-image-139664" src="https://media.geeksforgeeks.org/wp-content/uploads/java-types-of-packages.jpg" alt="packages" width="518" height="343" /></p>
        <p><strong>Built-in Packages</strong><br />These packages consist of a large number of classes which are a part of Java&nbsp;<strong>API</strong>.Some of the commonly used built-in packages are:<br />1)&nbsp;<strong>java.lang:&nbsp;</strong>Contains language support classes(e.g classed which defines primitive data types, math operations). This package is automatically imported.<br />2)&nbsp;<strong>&nbsp;java.io:&nbsp;</strong>Contains classed for supporting input / output operations.<br />3)&nbsp;<strong>&nbsp;java.util:&nbsp;</strong>Contains utility classes which implement data structures like Linked List, Dictionary and support ; for Date / Time operations.<br />4)&nbsp;<strong>&nbsp;java.applet:&nbsp;</strong>Contains classes for creating Applets.<br />5)&nbsp;<strong>&nbsp;java.awt:&nbsp;</strong>Contain classes for implementing the components for graphical user interfaces (like button , ;menus etc).<br />6)&nbsp;<strong>&nbsp;java.net:&nbsp;</strong>Contain classes for supporting networking operations.</p>
        <p><strong>User-defined packages</strong><br />These are the packages that are defined by the user. First we create a directory&nbsp;<strong>myPackage</strong>&nbsp;(name should be same as the name of the package). Then create the&nbsp;<strong>MyClass</strong>&nbsp;inside the directory with the first statement being the&nbsp;<strong>package names</strong>.</p>
        <pre>// Name of the package must be same as the directory
        // under which this file is saved
        package myPackage;
        
        public class MyClass
        {
            public void getNames(String s)
            {        
                System.out.println(s);        
            }
        }
        </pre>
        <p>Now we can use the&nbsp;<strong>MyClass</strong>&nbsp;class in our program.</p>
        <pre>/* import 'MyClass' class from 'names' myPackage */
        import myPackage.MyClass;
        
        public class PrintName 
        {
           public static void main(String args[]) 
           {       
              // Initializing the String variable 
              // with a value 
              String name = "GeeksforGeeks";
              
              // Creating an instance of class MyClass in 
              // the package.
              MyClass obj = new MyClass();
              
              obj.getNames(name);
           }
        }
        </pre>
        <p><strong>Note :</strong>&nbsp;<strong>MyClass.java</strong>&nbsp;must be saved inside the&nbsp;<strong>myPackage</strong>&nbsp;directory since it is a part of the package.</p>
        <p>&nbsp;</p>
        <p align="center"><strong>Using Static Import</strong></p>
        <p>Static import is a feature introduced in&nbsp;<strong>Java</strong>&nbsp;programming language ( versions 5 and above ) that allows members ( fields and methods ) defined in a class as public&nbsp;<strong>static</strong>&nbsp;to be used in Java code without specifying the class in which the field is defined.<br />Following program demonstrates&nbsp;<strong>static import</strong>&nbsp;:</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_872933" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Note static keyword after import.</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="keyword">static</code> <code class="plain">java.lang.System.*;</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">StaticImportDemo</code></div>
        <div class="line number5 index4 alt2"><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain">{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// We don't need to use 'System.out'&nbsp;</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// as imported using static.</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">out.println(</code><code class="string">"GeeksforGeeks"</code><code class="plain">);</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output:</p>
        <pre> GeeksforGeeks</pre>
        <p align="center"><strong>Handling name conflicts</strong></p>
        <p>The only time we need to pay attention to packages is when we have a name conflict . For example both, java.util and java.sql packages have a class named Date. So if we import both packages in program as follows:</p>
        <pre>import java.util.*;
        import java.sql.*;
        
        //And then use Date class, then we will get a compile-time error :
        
        Date today ; //ERROR-- java.util.Date or java.sql.Date?
        </pre>
        <p>The compiler will not be able to figure out which Date class do we want. This problem can be solved by using a specific import statement:</p>
        <pre>import java.util.Date;
        import java.sql.*;
        </pre>
        <p>If we need both Date classes then, we need to use a full package name every time we declare a new object of that class.<br />For Example:</p>
        <pre>java.util.Date deadLine = new java.util.Date();
        java.sql.Date today = new java.sql.Date();
        </pre>
        <p align="center"><strong>Directory structure</strong></p>
        <p>The package name is closely associated with the directory structure used to store the classes. The classes (and other entities) belonging to a specific package are stored together in the same directory. Furthermore, they are stored in a sub-directory structure specified by its package name. For example, the class Circle of package com.zzz.project1.subproject2 is stored as &ldquo;$BASE_DIR\com\zzz\project1\subproject2\Circle.class&rdquo;, where $BASE_DIR denotes the base directory of the package. Clearly, the &ldquo;dot&rdquo; in the package name corresponds to a sub-directory of the file system.</p>
        <p>The base directory ($BASE_DIR) could be located anywhere in the file system. Hence, the Java compiler and runtime must be informed about the location of the $BASE_DIR so as to locate the classes. This is accomplished by an environment variable called CLASSPATH. CLASSPATH is similar to another environment variable PATH, which is used by the command shell to search for the executable programs.</p>
        <p><strong>Setting CLASSPATH</strong>:<br />CLASSPATH can be set by any of the following ways:</p>
        <ul>
        <li>CLASSPATH can be set permanently in the environment: In Windows, choose control panel ? System ? Advanced ? Environment Variables ? choose &ldquo;System Variables&rdquo; (for all the users) or &ldquo;User Variables&rdquo; (only the currently login user) ? choose &ldquo;Edit&rdquo; (if CLASSPATH already exists) or &ldquo;New&rdquo; ? Enter &ldquo;CLASSPATH&rdquo; as the variable name ? Enter the required directories and JAR files (separated by semicolons) as the value (e.g., &ldquo;.;c:\javaproject\classes;d:\tomcat\lib\servlet-api.jar&rdquo;). Take note that you need to include the current working directory (denoted by &lsquo;.&rsquo;) in the CLASSPATH.<br />To check the current setting of the CLASSPATH, issue the following command:
        <pre>&gt; SET CLASSPATH
        </pre>
        </li>
        <li>CLASSPATH can be set temporarily for that particular CMD shell session by issuing the following command:
        <pre>&gt; SET CLASSPATH=.;c:\javaproject\classes;d:\tomcat\lib\servlet-api.jar
        </pre>
        </li>
        <li>Instead of using the CLASSPATH environment variable, you can also use the command-line option -classpath or -cp of the javac and java commands, for example,
        <pre>&gt; java &ndash;classpath c:\javaproject\classes com.abc.project1.subproject2.MyClass3
        </pre>
        <p><strong>Illustration of user-defined packages:</strong><br />Creating our first package:<br />File name &ndash; ClassOne.java</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_790369" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2 highlighted"><code class="keyword">package</code> <code class="plain">package_name;</code></div>
        <div class="line number2 index1 alt1 highlighted"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number3 index2 alt2 highlighted"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">ClassOne {</code></div>
        <div class="line number4 index3 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">methodClassOne() {</code></div>
        <div class="line number5 index4 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Hello there its ClassOne"</code><code class="plain">);</code></div>
        <div class="line number6 index5 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number7 index6 alt2 highlighted"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Creating our second package:<br />File name &ndash; ClassTwo.java</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_583745" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2 highlighted"><code class="keyword">package</code> <code class="plain">package_one;</code></div>
        <div class="line number2 index1 alt1 highlighted"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number3 index2 alt2 highlighted"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">ClassTwo {</code></div>
        <div class="line number4 index3 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">methodClassTwo(){</code></div>
        <div class="line number5 index4 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Hello there i am ClassTwo"</code><code class="plain">);</code></div>
        <div class="line number6 index5 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp;&nbsp;&nbsp;&nbsp;</code></div>
        <div class="line number7 index6 alt2 highlighted"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Making use of both the created packages:<br />File name &ndash; Testing.java</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_982684" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2 highlighted"><code class="keyword">import</code> <code class="plain">package_one.ClassTwo;</code></div>
        <div class="line number2 index1 alt1 highlighted"><code class="keyword">import</code> <code class="plain">package_name.ClassOne;</code></div>
        <div class="line number3 index2 alt2 highlighted"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number4 index3 alt1 highlighted"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Testing {</code></div>
        <div class="line number5 index4 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args){</code></div>
        <div class="line number6 index5 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ClassTwo a = </code><code class="keyword">new</code> <code class="plain">ClassTwo();</code></div>
        <div class="line number7 index6 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ClassOne b = </code><code class="keyword">new</code> <code class="plain">ClassOne();</code></div>
        <div class="line number8 index7 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">a.methodClassTwo();</code></div>
        <div class="line number9 index8 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">b.methodClassOne();</code></div>
        <div class="line number10 index9 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number11 index10 alt2 highlighted"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output:</p>
        <pre>Hello there i am ClassTwo
        Hello there its ClassOne
        </pre>
        <p>Now having a look at the directory structure of both the packages and the testing class file:<br /><a href="https://media.geeksforgeeks.org/wp-content/uploads/112.jpg"><img class="alignnone size-full wp-image-161606" src="https://media.geeksforgeeks.org/wp-content/uploads/112.jpg" alt="Directory structure" width="737" height="444" /></a></p>
        <p><strong>Important points:</strong></p>
        <ol>
        <li>Every class is part of some package.</li>
        <li>If no package is specified, the classes in the file goes into a special unnamed package (the same unnamed package for all files).</li>
        <li>All classes/interfaces in a file are part of the same package. Multiple files can specify the same package name.</li>
        <li>If package name is specified, the file must be in a subdirectory called name (i.e., the directory name must match the package name).</li>
        <li>We can access public classes in another (named) package using:&nbsp;<strong>package-name.class-name</strong></li>
        </ol>
        </li>
        </ul>
        </div>`,
    },
    {
        topic: "Decision Making in Java",
        content: `<h1>Decision Making in Java (if, if-else, switch, break, continue, jump)</h1><p>Decision Making in programming is similar to decision-making in real life. In programming also face some situations where we want a certain block of code to be executed when some condition is fulfilled.&nbsp;</p>
        <p>A programming language uses control statements to control the flow of execution of a program based on certain conditions. These are used to cause the flow of execution to advance and branch based on changes to the state of a program.&nbsp;</p>
        <p><strong>Java&rsquo;s Selection statements:</strong>&nbsp;</p>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/?ref=lbp#if" target="_blank" rel="noopener noreferrer nofollow">if</a></li>
        <li><a href="https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/?ref=lbp#if-else" target="_blank" rel="noopener noreferrer nofollow">if-else</a></li>
        <li><a href="https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/?ref=lbp#nested-if" target="_blank" rel="noopener noreferrer nofollow">nested-if</a></li>
        <li><a href="https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/?ref=lbp#if-else-if" target="_blank" rel="noopener noreferrer nofollow">if-else-if</a></li>
        <li><a href="https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/?ref=lbp#switch-case" target="_blank" rel="noopener noreferrer nofollow">switch-case</a></li>
        <li><a href="https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/?ref=lbp#jump" target="_blank" rel="noopener noreferrer nofollow">jump</a>&nbsp;&ndash; break, continue, return</li>
        </ul>
        <p><strong>1. if:&nbsp;</strong>if statement is the most simple decision-making statement. It is used to decide whether a certain statement or block of statements will be executed or not i.e if a certain condition is true then a block of statement is executed otherwise not.&nbsp;</p>
        <p><strong>Syntax</strong>:&nbsp;</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <pre>if(condition) 
        {
           // Statements to execute if
           // condition is true
        }</pre>
        <p>Here, the&nbsp;<strong>condition</strong>&nbsp;after evaluation will be either true or false. if statement accepts boolean values &ndash; if the value is true then it will execute the block of statements under it.&nbsp;<br />If we do not provide the curly braces &lsquo;{&lsquo; and &lsquo;}&rsquo; after&nbsp;<strong>if( condition )</strong>&nbsp;then by default if statement will consider the immediate one statement to be inside its block. For example,&nbsp;</p>
        <pre>if(condition)
           statement1;
           statement2;
        
        // Here if the condition is true, if block 
        // will consider only statement1 to be inside 
        // its block.</pre>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/if.png" alt="if-statement-in-java" /></p>
        <p><strong>Example:</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_67316" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate If statement</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">IfDemo {</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">10</code><code class="plain">;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i &gt; </code><code class="value">15</code><code class="plain">)</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"10 is less than 15"</code><code class="plain">);</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This statement will be executed</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// as if considers one statement by default</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"I am Not in if"</code><code class="plain">);</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number14 index13 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>I am Not in if</pre>
        </div>
        <p><strong>2. if-else</strong>: The if statement alone tells us that if a condition is true it will execute a block of statements and if the condition is false it won&rsquo;t. But what if we want to do something else if the condition is false. Here comes the else statement. We can use the else statement with if statement to execute a block of code when the condition is false.&nbsp;</p>
        <p><strong>Syntax</strong>:&nbsp;</p>
        <pre>if (condition)
        {
            // Executes this block if
            // condition is true
        }
        else
        {
            // Executes this block if
            // condition is false
        }</pre>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/if-else.png" alt="if-else-statement" /></p>
        <p><strong>Example:</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_413951" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate if-else statement</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">IfElseDemo {</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">10</code><code class="plain">;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i &lt; </code><code class="value">15</code><code class="plain">)</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"i is smaller than 15"</code><code class="plain">);</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"i is greater than 15"</code><code class="plain">);</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>i is smaller than 15</pre>
        </div>
        <p><strong>Time Complexity:&nbsp;</strong>O(1)</p>
        <p><strong>Auxiliary Space :&nbsp;</strong>O(1)</p>
        <p><strong>3. nested-if:</strong>&nbsp;A nested if is an if statement that is the target of another if or else. Nested if statements mean an if statement inside an if statement. Yes, java allows us to nest if statements within if statements. i.e, we can place an if statement inside another if statement.&nbsp;</p>
        <p><strong>Syntax:&nbsp;</strong></p>
        <pre>if (condition1) 
        {
           // Executes when condition1 is true
           if (condition2) 
           {
              // Executes when condition2 is true
           }
        }</pre>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/nested-if-modified-1.png" alt="nested-if" /></p>
        <p><strong>Example:</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist3-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist3-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_215248" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate nested-if statement</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">NestedIfDemo {</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">10</code><code class="plain">;</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i == </code><code class="value">10</code><code class="plain">) {</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// First if statement</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i &lt; </code><code class="value">15</code><code class="plain">)</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"i is smaller than 15"</code><code class="plain">);</code></div>
        <div class="line number12 index11 alt1">&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Nested - if statement</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Will only be executed if statement above</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// it is true</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i &lt; </code><code class="value">12</code><code class="plain">)</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"i is smaller than 12 too"</code><code class="plain">);</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"i is greater than 15"</code><code class="plain">);</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>i is smaller than 15
        i is smaller than 12 too</pre>
        </div>
        <p><strong>Time Complexity:&nbsp;</strong>O(1)</p>
        <p><strong>Auxiliary Space :&nbsp;</strong>O(1)</p>
        <p><strong>4. if-else-if ladder:</strong>&nbsp;Here, a user can decide among multiple options.The if statements are executed from the top down. As soon as one of the conditions controlling the if is true, the statement associated with that if is executed, and the rest of the ladder is bypassed. If none of the conditions is true, then the final else statement will be executed.&nbsp;</p>
        <pre>if (condition)
            statement;
        else if (condition)
            statement;
        .
        .
        else
            statement;</pre>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/if-elseif.png" alt="if-else-if-ladder" /></p>
        <p><strong>Example:</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist4-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist4-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_85167" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate if-else-if ladder</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">ifelseifDemo {</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">20</code><code class="plain">;</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i == </code><code class="value">10</code><code class="plain">)</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"i is 10"</code><code class="plain">);</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(i == </code><code class="value">15</code><code class="plain">)</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"i is 15"</code><code class="plain">);</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(i == </code><code class="value">20</code><code class="plain">)</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"i is 20"</code><code class="plain">);</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">else</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"i is not present"</code><code class="plain">);</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>i is 20</pre>
        </div>
        <p><strong>Time Complexity:&nbsp;</strong>O(1)</p>
        <p><strong>Auxiliary Space :&nbsp;</strong>O(1)</p>
        <p><strong>5. switch-case:</strong>&nbsp;The switch statement is a multiway branch statement. It provides an easy way to dispatch execution to different parts of code based on the value of the expression.&nbsp;</p>
        <p><strong>Syntax:&nbsp;</strong></p>
        <pre>switch (expression)
        {
          case value1:
            statement1;
            break;
          case value2:
            statement2;
            break;
          .
          .
          case valueN:
            statementN;
            break;
          default:
            statementDefault;
        }</pre>
        <ul>
        <li>The expression can be of type byte, short, int char, or an enumeration. Beginning with JDK7,&nbsp;<em>expression</em>&nbsp;can also be of type String.</li>
        <li>Duplicate case values are not allowed.</li>
        <li>The default statement is optional.</li>
        <li>The break statement is used inside the switch to terminate a statement sequence.</li>
        <li>The break statement is optional. If omitted, execution will continue on into the next case.</li>
        </ul>
        <p><strong>6. jump:</strong>&nbsp;Java supports three jump statements:&nbsp;<strong>break, continue</strong>&nbsp;and&nbsp;<strong>return</strong>. These three statements transfer control to another part of the program.&nbsp;</p>
        <ul>
        <li><strong>Break:</strong>&nbsp;In Java, a break is majorly used for:&nbsp;
        <ul>
        <li>Terminate a sequence in a switch statement (discussed above).</li>
        <li>To exit a loop.</li>
        <li>Used as a &ldquo;civilized&rdquo; form of goto.</li>
        </ul>
        </li>
        <li><strong>Continue:&nbsp;</strong>Sometimes it is useful to force an early iteration of a loop. That is, you might want to continue running the loop but stop processing the remainder of the code in its body for this particular iteration. This is, in effect, a goto just past the body of the loop, to the loop&rsquo;s end. The continue statement performs such an action.&nbsp;<br />&nbsp;</li>
        </ul>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/continue-1.png" alt="continue-in-java" /></p>
        <p><strong>Example:</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist5-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist5-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_174500" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate using</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// continue in an if statement</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">ContinueDemo {</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; </code><code class="value">10</code><code class="plain">; i++) {</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If the number is even</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// skip and continue</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i % </code><code class="value">2</code> <code class="plain">== </code><code class="value">0</code><code class="plain">)</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">continue</code><code class="plain">;</code></div>
        <div class="line number11 index10 alt2">&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// If number is odd, print it</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(i + </code><code class="string">" "</code><code class="plain">);</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>1 3 5 7 9 </pre>
        </div>
        <p><strong>Time Complexity:&nbsp;</strong>O(1)</p>
        <p><strong>Auxiliary Space :&nbsp;</strong>O(1)</p>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/return-keyword-java/"><strong>Return:</strong></a><strong>&nbsp;</strong>The return statement is used to explicitly return from a method. That is, it causes program control to transfer back to the caller of the method.</li>
        </ul>
        <p><strong>Example:</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist6-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist6-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_893775" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate using return</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">Return {</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">boolean</code> <code class="plain">t = </code><code class="keyword">true</code><code class="plain">;</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Before the return."</code><code class="plain">);</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(t)</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code><code class="plain">;</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Compiler will bypass every statement</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// after return</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"This won't execute."</code><code class="plain">);</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number15 index14 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Before the return.</pre>
        </div>
        <p><strong>Time Complexity:&nbsp;</strong>O(1)</p>
        <p><strong>Auxiliary Space :&nbsp;</strong>O(1)</p>`
    },
    {
        topic: "Loops in Java",
        content: `<h1>Loops in Java</h1><p>Looping in programming languages is a feature which facilitates the execution of a set of instructions/functions repeatedly while some condition evaluates to true.<br />Java provides three ways for executing the loops. While all the ways provide similar basic functionality, they differ in their syntax and condition checking time.</p>
        <ol>
        <li><strong><a href="https://www.geeksforgeeks.org/java-while-loop-with-examples/" target="_blank" rel="noopener">while loop:</a></strong>&nbsp;A while loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition. The while loop can be thought of as a repeating if statement.<br /><strong>Syntax :</strong>
        <pre>while (boolean condition)
        {
           loop statements...
        }
        </pre>
        <p>Flowchart:<br /><a href="https://media.geeksforgeeks.org/wp-content/uploads/Loop1.png"><img class="alignnone wp-image-166215" src="https://media.geeksforgeeks.org/wp-content/uploads/Loop1.png" alt="while loop" /></a></p>
        <ul>
        <li>While loop starts with the checking of condition. If it evaluated to true, then the loop body statements are executed otherwise first statement following the loop is executed. For this reason it is also called&nbsp;<strong>Entry control loop</strong></li>
        <li>Once the condition is evaluated to true, the statements in the loop body are executed. Normally the statements contain an update value for the variable being processed for the next iteration.</li>
        <li>When the condition becomes false, the loop terminates which marks the end of its life cycle.</li>
        </ul>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_49359" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate while loop</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">whileLoopDemo</code></div>
        <div class="line number3 index2 alt2"><code class="plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">1</code><code class="plain">;</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Exit when x becomes greater than 4</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(x &lt;= </code><code class="value">4</code><code class="plain">)</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Value of x:"</code> <code class="plain">+ x);</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Increment the value of x for</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// next iteration</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">x++;</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number18 index17 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>Value of x:1
        Value of x:2
        Value of x:3
        Value of x:4
        </pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/java-for-loop-with-examples/" target="_blank" rel="noopener">for loop:</a></strong>&nbsp;for loop provides a concise way of writing the loop structure. Unlike a while loop, a for statement consumes the initialization, condition and increment/decrement in one line thereby providing a shorter, easy to debug structure of looping.<br /><strong>Syntax:</strong>
        <div id="AP_G4GR_5">&nbsp;</div>
        <pre>for (initialization condition; testing condition; 
                                      increment/decrement)
        {
            statement(s)
        }
        </pre>
        <p>Flowchart:<br /><img class="aligncenter size-full wp-image-141360" src="https://media.geeksforgeeks.org/wp-content/uploads/loop2.png" alt="for-loop-in-java" width="625" height="350" /></p>
        <ol>
        <li><strong>Initialization condition:&nbsp;</strong>Here, we initialize the variable in use. It marks the start of a for loop. An already declared variable can be used or a variable can be declared, local to loop only.</li>
        <li><strong>Testing Condition:</strong>&nbsp;It is used for testing the exit condition for a loop. It must return a boolean value. It is also an&nbsp;<strong>Entry Control Loop</strong>&nbsp;as the condition is checked prior to the execution of the loop statements.</li>
        <li><strong>Statement execution:</strong>&nbsp;Once the condition is evaluated to true, the statements in the loop body are executed.</li>
        <li><strong>Increment/ Decrement:</strong>&nbsp;It is used for updating the variable for next iteration.</li>
        <li><strong>Loop termination:</strong>When the condition becomes false, the loop terminates marking the end of its life cycle.</li>
        </ol>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_628939" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate for loop.</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">forLoopDemo</code></div>
        <div class="line number3 index2 alt2"><code class="plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// for loop begins when x=2</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// and runs till x &lt;=4</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">2</code><code class="plain">; x &lt;= </code><code class="value">4</code><code class="plain">; x++)</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Value of x:"</code> <code class="plain">+ x);</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number11 index10 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>Value of x:2
        Value of x:3
        Value of x:4
        </pre>
        <p align="center"><strong>Enhanced For loop</strong></p>
        <p>Java also includes another version of for loop introduced in Java 5. Enhanced for loop provides a simpler way to iterate through the elements of a collection or array. It is inflexible and should be used only when there is a need to iterate through the elements in a sequential manner without knowing the index of the currently processed element.<br />Also note that the object/variable is immutable when enhanced for loop is used i.e it ensures that the values in the array can not be modified, so it can be said as read-only loop where you can&rsquo;t update the values as opposite to other loops where values can be modified.<br />We recommend using this form of the for statement instead of the general form whenever possible.(as per JAVA doc.)<br /><strong>Syntax:</strong></p>
        <pre>for (T element:Collection obj/array)
        {
            statement(s)
        }
        </pre>
        <p>Lets take an example to demonstrate how enhanced for loop can be used to simplify the work. Suppose there is an array of names and we want to print all the names in that array. Let&rsquo;s see the difference between these two examples<br />Enhanced for loop simplifies the work as follows-</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_627384" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate enhanced for loop</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">enhancedforloop</code></div>
        <div class="line number3 index2 alt2"><code class="plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String array[] = {</code><code class="string">"Ron"</code><code class="plain">, </code><code class="string">"Harry"</code><code class="plain">, </code><code class="string">"Hermoine"</code><code class="plain">};</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//enhanced for loop</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(String x:array)</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(x);</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">/* for loop for same function</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">for (int i = 0; i &lt; array.length; i++)</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">{</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">System.out.println(array[i]);</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">}</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">*/</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number21 index20 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output:</p>
        <pre>Ron
        Harry
        Hermoine
        </pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/java-do-while-loop-with-examples/" target="_blank" rel="noopener">do while:</a></strong>&nbsp;do while loop is similar to while loop with only difference that it checks for condition after executing the statements, and therefore is an example of&nbsp;<strong>Exit Control Loop.</strong><br /><strong>Syntax:</strong>
        <pre>do
        {
            statements..
        }
        while (condition);
        </pre>
        <p>Flowchart:<br /><a href="https://media.geeksforgeeks.org/wp-content/uploads/loop3.png"><img class="alignnone wp-image-166218" src="https://media.geeksforgeeks.org/wp-content/uploads/loop3.png" alt="do-while" /></a></p>
        <ol>
        <li>do while loop starts with the execution of the statement(s). There is no checking of any condition for the first time.</li>
        <li>After the execution of the statements, and update of the variable value, the condition is checked for true or false value. If it is evaluated to true, next iteration of loop starts.</li>
        <li>When the condition becomes false, the loop terminates which marks the end of its life cycle.</li>
        <li>It is important to note that the do-while loop will execute its statements atleast once before any condition is checked, and therefore is an example of exit control loop.</li>
        </ol>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_166584" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate do-while loop</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">dowhileloopDemo</code></div>
        <div class="line number3 index2 alt2"><code class="plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">21</code><code class="plain">;</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">do</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// The line will be printed even</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if the condition is false</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Value of x:"</code> <code class="plain">+ x);</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">x++;</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(x &lt; </code><code class="value">20</code><code class="plain">);</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>Value of x: 21
        </pre>
        </li>
        </ol>
        <p align="center"><strong>Pitfalls of Loops</strong></p>
        <ol>
        <li><strong>Infinite loop:</strong>&nbsp;One of the most common mistakes while implementing any sort of looping is that that it may not ever exit, that is the loop runs for infinite time. This happens when the condition fails for some reason.<br />Examples:
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_272612" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">//Java program to illustrate various pitfalls.</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">LooppitfallsDemo</code></div>
        <div class="line number3 index2 alt2"><code class="plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// infinite loop because condition is not apt</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// condition should have been i&gt;0.</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">5</code><code class="plain">; i != </code><code class="value">0</code><code class="plain">; i -= </code><code class="value">2</code><code class="plain">)</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(i);</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">5</code><code class="plain">;</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// infinite loop because update statement</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// is not provided.</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(x == </code><code class="value">5</code><code class="plain">)</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"In the loop"</code><code class="plain">);</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number22 index21 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </li>
        <li>Another pitfall is that you might be adding something into you collection object through loop and you can run out of memory. If you try and execute the below program, after some time, out of memory exception will be thrown.
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_120198" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">//Java program for out of memory exception.</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.ArrayList;</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Integer1</code></div>
        <div class="line number4 index3 alt1"><code class="plain">{</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ArrayList&lt;Integer&gt; ar = </code><code class="keyword">new</code> <code class="plain">ArrayList&lt;&gt;();</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; Integer.MAX_VALUE; i++)</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ar.add(i);</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number13 index12 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
        at java.util.Arrays.copyOf(Unknown Source)
        at java.util.Arrays.copyOf(Unknown Source)
        at java.util.ArrayList.grow(Unknown Source)
        at java.util.ArrayList.ensureCapacityInternal(Unknown Source)
        at java.util.ArrayList.add(Unknown Source)
        at article.Integer1.main(Integer1.java:9)</pre>
        </li>
        </ol>`,
    },
    {
        topic: "Jump Statements in Java",
        content: `<h1>Continue Statement in Java</h1>
        <p>Suppose a person wants code to execute for the values as per the code is designed to be executed but forcefully the same user wants to skip out the execution for which code should have been executed as designed above but will not as per the demand of the user. In simpler words, it is a&nbsp;<a href="https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/">decision-making</a>&nbsp;problem as per the demand of the user.</p>
        <p><strong>Real-Life Example:</strong></p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20201102141150/GFGContinue.png" alt="" /></p>
        <blockquote>
        <p>Consider a man is climbing up to go to his house in between there are 11 stairs. Being in hurry to climb up he directly stepped onto 3 staircases and then 4, 5, 6, 7, 8, 9 and jumps to last one. During this he missed out staircase 1st, 2nd and 10th and he completed the goal to reach his house. He continued his journey skipping staircase of. his choices.&nbsp;</p>
        <p>In computers, it interprets staircases which is/are supposed to be skipped as &lsquo;continue&rsquo;. The action to miss out execution which are supposed to be executed, is interpreted as continue statement be it any programming language.</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        </blockquote>
        <p><a href="https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/">Continue</a>&nbsp;statement is often used inside in programming languages inside loops control structures. Inside the loop,&nbsp;<strong>when a continue statement is encountered the control directly jumps to the beginning of the loop for the next iteration instead of executing the statements of the current iteration.</strong>&nbsp;The continue statement is used when we want to skip a particular condition and continue the rest execution. Java continue statement is used for all type of loops but it is generally used in for, while, and do-while loops.</p>
        <ul>
        <li>In the case of for loop, the continue keyword force control to jump immediately to the update statement.</li>
        <li>Whereas in the case of a while loop or do-while loop, control immediately jumps to the Boolean expression.</li>
        </ul>
        <p><strong>Syntax:&nbsp;</strong>continue keyword along with a semicolon</p>
        <pre>continue;</pre>
        <p><strong>Flow Chart of Continue Statement</strong></p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20201021223902/j1-660x615.png" alt="" /></p>
        <p>The above&nbsp;<a href="https://www.geeksforgeeks.org/an-introduction-to-flowcharts/">flowchart</a>&nbsp;is most important for the understanding of this keyword. Always remember the<strong>&nbsp;</strong>condition is always placed inside diamond boxes and statements in rectangular boxes. Now jumping onto the implementation part</p>
        <p><strong>Case 1: Continue statement inside for loop</strong></p>
        <p>In this program, illustration for how to use the continue statement within For loop. When the value of &lsquo;i&rsquo; becomes 10 or 12, the continue statement plays its role and skip their execution but for other values of&rsquo; &lsquo;i&rsquo; the loop will run smoothly.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_85819" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to illustrate the use of continue statement</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="comments">// Importing Classes/Files</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// For loop for iteration</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt;= </code><code class="value">15</code><code class="plain">; i++) {</code></div>
        <div class="line number12 index11 alt1">&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Check condition for continue</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i == </code><code class="value">10</code> <code class="plain">|| i == </code><code class="value">12</code><code class="plain">) {</code></div>
        <div class="line number15 index14 alt2">&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Using continue statement to skip the</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// execution of loop when i==10 or i==12</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">continue</code><code class="plain">;</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing elements to show continue statement</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(i + </code><code class="string">" "</code><code class="plain">);</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number24 index23 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output :</strong></p>
        <pre>0 1 2 3 4 5 6 7 8 9 11 13 14 15 </pre>
        <p><strong>Time Complexity:&nbsp;</strong>O(1)</p>
        <p><strong>Auxiliary Space :&nbsp;</strong>O(1)</p>
        <p><strong>Case 2: Continue statement inside while loop</strong></p>
        <p>In the above program, we give example, how to use the continue statement within the While loop. When the value of count becomes 7 or 15, the continue statement plays its role and skip their execution but for other values of the count, the loop will run smoothly.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_567457" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to illustrate the use of continue statement</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// inside the While loop</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number4 index3 alt1">&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initializing a variable say it count&nbsp; to a value</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// greater than the value greater among the loop</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// values</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">count = </code><code class="value">20</code><code class="plain">;</code></div>
        <div class="line number12 index11 alt1">&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// While loop for iteration</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">while</code> <code class="plain">(count &gt;= </code><code class="value">0</code><code class="plain">) {</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(count == </code><code class="value">7</code> <code class="plain">|| count == </code><code class="value">15</code><code class="plain">) {</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">count--;</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Decrementing variable initialized above</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Showing continue execution inside loop</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// skipping when count==7 or count==15</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">continue</code><code class="plain">;</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2">&nbsp;</div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing values after continue statement</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(count + </code><code class="string">" "</code><code class="plain">);</code></div>
        <div class="line number26 index25 alt1">&nbsp;</div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Decrementing the count variable</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">count--;</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number31 index30 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>20 19 18 17 16 14 13 12 11 10 9 8 6 5 4 3 2 1 0 </pre>
        <p><strong>Time Complexity:&nbsp;</strong>O(1)</p>
        <p><strong>Auxiliary Space :&nbsp;</strong>O(1)</p>
        <p><strong>Case 3: Continue statement inside do while loop</strong></p>
        <p>In the above program, we give example, how to use the continue statement within the do-While loop. When the value of i becomes 4 or 18, the continue statement plays its role and skip their execution but for other values of i, the loop will run smoothly.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist3-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist3-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_802388" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to illustrate the use of continue statement</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// inside the Do-While loop</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing generic Classes/Files</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number8 index7 alt1">&nbsp;</div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating and Initializing a variable</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">;</code></div>
        <div class="line number14 index13 alt1">&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Do-While loop for iteration</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">do</code> <code class="plain">{</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i == </code><code class="value">4</code> <code class="plain">|| i == </code><code class="value">18</code><code class="plain">) {</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Incrementing loop variable by 2</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i += </code><code class="value">2</code><code class="plain">;</code></div>
        <div class="line number21 index20 alt2">&nbsp;</div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Illustrating continue statement skipping</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the execution&nbsp; when i==7 or i==15</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">continue</code><code class="plain">;</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number26 index25 alt1">&nbsp;</div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing to showcase continue affect</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(i);</code></div>
        <div class="line number29 index28 alt2">&nbsp;</div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Incrementing variable by 2</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i += </code><code class="value">2</code><code class="plain">;</code></div>
        <div class="line number32 index31 alt1">&nbsp;</div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Condition check</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">} </code><code class="keyword">while</code> <code class="plain">(i &lt;= </code><code class="value">35</code><code class="plain">);</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number36 index35 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>0
        2
        6
        8
        10
        12
        14
        16
        20
        22
        24
        26
        28
        30
        32
        34</pre>
        <p><strong>Time Complexity:&nbsp;</strong>O(1)</p>
        <p><strong>Auxiliary Space :&nbsp;</strong>O(1)</p>
        <p><strong>Case 4: Continue statement inside Inner loop(Nested Loop)</strong></p>
        <p>In the above program, we give example, how to use the continue statement within Nested loops. When the value of i becomes 3 and j become 2, the continue statement plays its role and skip their execution but for other values of i and j, the loop will run smoothly.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist4-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist4-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_61444" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to illustrate the use of continue statement</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// inside an inner loop or simply nested loops</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing generic Classes/Files</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number8 index7 alt1">&nbsp;</div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main drive method</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Outer loop for iteration</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt;= </code><code class="value">4</code><code class="plain">; i++) {</code></div>
        <div class="line number14 index13 alt1">&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Inner loop for iteration</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">j = </code><code class="value">1</code><code class="plain">; j &lt;= </code><code class="value">3</code><code class="plain">; j++) {</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i == </code><code class="value">3</code> <code class="plain">&amp;&amp; j == </code><code class="value">2</code><code class="plain">) {</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Continue statement in inner loop to</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// skip the execution when i==3 and j==2</code></div>
        <div class="line number21 index20 alt2">&nbsp;</div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">continue</code><code class="plain">;</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number24 index23 alt1">&nbsp;</div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print elements to showcase keyword affect</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(i + </code><code class="string">" * "</code> <code class="plain">+ j);</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number30 index29 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:&nbsp;</strong></p>
        <pre>1 * 1
        1 * 2
        1 * 3
        2 * 1
        2 * 2
        2 * 3
        3 * 1
        3 * 3
        4 * 1
        4 * 2
        4 * 3</pre>
        <p><strong>Time Complexity:&nbsp;</strong>O(1)</p>
        <p><strong>Auxiliary Space :&nbsp;</strong>O(1)</p>
        <h1>Break statement in Java</h1>
        <p>Break Statement is a loop control statement that is used to terminate the loop. As soon as the break statement is encountered from within a loop, the loop iterations stop there, and control returns from the loop immediately to the first statement after the loop.&nbsp;<br /><strong>Syntax:</strong>&nbsp;</p>
        <pre>break;</pre>
        <p>Basically, break statements are used in situations when we are not sure about the actual number of iterations for the loop or we want to terminate the loop based on some condition.&nbsp;&nbsp;</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/break.png" alt="" /></p>
        <p><strong>Break:</strong>&nbsp;In Java, the break is majorly used for:&nbsp;</p>
        <ul>
        <li>Terminate a sequence in a switch statement (discussed above).</li>
        <li>To exit a loop.</li>
        <li>Used as a &ldquo;civilized&rdquo; form of goto.</li>
        </ul>
        <p><strong>Using break to exit a Loop</strong></p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p>Using break, we can force immediate termination of a loop, bypassing the conditional expression and any remaining code in the body of the loop.&nbsp;<br />Note: Break, when used inside a set of nested loops, will only break out of the innermost loop.&nbsp;&nbsp;</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/exit.png" alt="using-break-to-exit-a-loop-in-java" /></p>
        <p>Example:</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_83123" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate using</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// break to exit a loop</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">BreakLoopDemo {</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initially loop is set to run from 0-9</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; </code><code class="value">10</code><code class="plain">; i++) {</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// terminate loop when i is 5.</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(i == </code><code class="value">5</code><code class="plain">)</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code><code class="plain">;</code></div>
        <div class="line number11 index10 alt2">&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"i: "</code> <code class="plain">+ i);</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Loop complete."</code><code class="plain">);</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output</strong>:&nbsp;</p>
        <pre>i: 0
        i: 1
        i: 2
        i: 3
        i: 4
        Loop complete.</pre>
        <p><strong>Time Complexity:&nbsp;</strong>O(1)</p>
        <p><strong>Auxiliary Space :&nbsp;</strong>O(1)</p>
        <p><strong>Using break as a Form of Goto</strong></p>
        <p>Java does not have a goto statement because it provides a way to branch in an arbitrary and unstructured manner. Java uses the label. A Label is used to identifies a block of code.&nbsp;<br />Syntax:&nbsp;</p>
        <pre>label:
        {
          statement1;
          statement2;
          statement3;
          .
          .
        }</pre>
        <p>Now, break statement can be use to jump out of target block.&nbsp;<br />Note: You cannot break to any label which is not defined for an enclosing block.&nbsp;<br />Syntax:&nbsp;&nbsp;</p>
        <pre>break label;</pre>
        <p>Example:&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_775760" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// using break with goto</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">BreakLabelDemo {</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">boolean</code> <code class="plain">t = </code><code class="keyword">true</code><code class="plain">;</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// label first</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">first : {</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Illegal statement here</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// as label second is not</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// introduced yet break second;</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">second : {</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">third : {</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Before break</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Before the break statement"</code><code class="plain">);</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// break will take the control out of</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// second label</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(t)</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">break</code> <code class="plain">second;</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"This won't execute."</code><code class="plain">);</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"This won't execute."</code><code class="plain">);</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number27 index26 alt2">&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// First block</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"This is after second block."</code><code class="plain">);</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number32 index31 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output</strong>:&nbsp;</p>
        <pre>Before the break statement.
        This is after the second block.</pre>
        <p><strong>Time Complexity:&nbsp;</strong>O(1)</p>
        <p><strong>Auxiliary Space :&nbsp;</strong>O(1)</p>
        <h1>return keyword in Java</h1>
        <p>In Java, return is a reserved keyword i.e, we can&rsquo;t use it as an identifier. It is used to exit from a method, with or without a value. Usage of return keyword as there exist two ways as listed below as follows:</p>
        <p>Case 1: Methods returning a value<br />Case 2: Methods not returning a value<br />Let us illustrate by directly implementing them as follows:</p>
        <p>Case 1: Methods returning a value</p>
        <p>For methods that define a return type, return statement must be immediately followed by return value.</p>
        <p>Example:</p>
        <p><br />// Java Program to Illustrate Usage of return Keyword<br /> <br />// Main method<br />class GFG {<br /> <br /> // Method 1<br /> // Since return type of RR method is double<br /> // so this method should return double value<br /> double RR(double a, double b) {<br /> double sum = 0;<br /> sum = (a + b) / 2.0;<br /> <br /> // Return statement as we already above have declared<br /> // return type to be double<br /> return sum;<br /> }<br /> <br /> // Method 2<br /> // Main driver method<br /> public static void main(String[] args)<br /> {<br /> // Print statement<br /> System.out.println(new GFG().RR(5.5, 6.5));<br /> }<br />}<br />Output<br />6.0<br />Time Complexity: O(1)</p>
        <p>Auxiliary Space : O(1)</p>
        <p>Output explanation: When we are calling a class GFG method that has return sum which returns the value of sum and that&rsquo;s value gets displayed on the console.</p>
        <p>Case 2: Methods not returning a value</p>
        <p>For methods that do not return a value, return statement in Java can be skipped. here there arise two cases when there is no value been returned by the user as listed below as follows:</p>
        <p>#1: Method not using return statement in void function<br />#2: Methods with return type void <br />#1: Method not using return statement in void function</p>
        <p>Example</p>
        <p><br />// Java program to illustrate no return<br />// keyword needed inside void method<br /> <br />// Main class<br />class GFG {<br /> <br /> // Since return type of RR method is<br /> // void so this method shouldn't return any value<br /> void demoSum(int a, int b)<br /> {<br /> int sum = 0;<br /> sum = (a + b) / 10;<br /> System.out.println(sum);<br /> <br /> // No return statement in this method<br /> }<br /> <br /> // Method 2<br /> // Main driver method<br /> public static void main(String[] args)<br /> {<br /> // Calling the method<br /> // Over custom inputs<br /> new GFG().demoSum(5, 5);<br /> <br /> // Display message on the console for successful<br /> // execution of the program<br /> System.out.print(<br /> "No return keyword is used and program executed successfully");<br /> }<br /> <br /> // Note here we are not returning anything<br /> // as the return type is void<br />}<br />Output<br />1<br />No return keyword is used and program executed successfully<br />Note: Return statement not required (but can be used) for methods with return type void. We can use &ldquo;return;&rdquo; which means not return anything.</p>
        <p>#2: Methods with void return type</p>
        <p>Example 1-A:</p>
        <p><br />// Java program to illustrate usage of<br />// return keyword in void method<br /> <br />// Class 1<br />// Main class<br />class GFG {<br /> <br /> // Method 1<br /> // Since return type of RR method is<br /> // void so this method should not return any value<br /> void demofunction(double j)<br /> {<br /> if (j &lt; 9)<br /> <br /> // return statement below(only using<br /> // return statement and not returning<br /> // anything):<br /> // control exits the method if this<br /> // condition(i.e, j&lt;9) is true.<br /> return;<br /> ++j;<br /> }<br /> <br /> // Method 2<br /> // Main driver method<br /> public static void main(String[] args)<br /> {<br /> // Calling above method declared in above class<br /> new GFG().demofunction(5.5);<br /> <br /> // Display message on console to illustrate<br /> // successful execution of program<br /> System.out.println("Program executed successfully");<br /> }<br />}<br />Output<br />Program executed successfully<br />Output explanation: If the statement if(j&lt;9) is true then control exits from the method and does not execute the rest of the statement of the RR method and hence comes back again to main() method.</p>
        <p>Now moving ahead geek you must be wondering what if we do use return statement at the end of the program?</p>
        <p>return statement can be used at various places in the method but we need to ensure that it must be the last statement to get executed in a method.</p>
        <p>Note: return statement need not to be last statement in a method, but it must be last statement to execute in a method.</p>
        <p>Example 1-B:</p>
        <p><br />// Java program to illustrate return must not be always<br />// last statement, but must be last statement<br />// in a method to execute<br /> <br />// Main class<br />class GFG {<br /> <br /> // Method 1<br /> // Helper method<br /> // Since return type of RR method is void<br /> // so this method should not return any value<br /> void demofunction(double i)<br /> {<br /> // Demo condition check<br /> if (i &lt; 9)<br /> <br /> // See here return need not be last<br /> // statement but must be last statement<br /> // in a method to execute<br /> return;<br /> <br /> else<br /> ++i;<br /> }<br /> <br /> // Method 2<br /> // main driver method<br /> public static void main(String[] args)<br /> {<br /> // Calling the method<br /> new GFG().demofunction(7);<br /> <br /> // Display message to illustrate<br /> // successful execution of program<br /> System.out.println("Program executed successfully");<br /> }<br />}<br />Output<br />Program executed successfully<br />Output explanation:</p>
        <p>As the condition (i&lt;9) becomes true, it executes return statement, and hence flow comes out of &lsquo;demofunction&rsquo; method and comes back again to main. Following this, the return statement must be the last statement to execute in a method, which means there is no point in defining any code after return which is clarified below as follows:</p>
        <p>Example 2A</p>
        <p>// Java program to illustrate usage of<br />// statement after return statement<br /> <br />// Main class<br />class GFG {<br /> <br /> // Since return type of RR method is void<br /> // so this method should return any value<br /> // Method 1<br /> void demofunction(double j)<br /> {<br /> return;<br /> <br /> // Here get compile error since can't<br /> // write any statement after return keyword<br /> <br /> ++j;<br /> }<br /> <br /> // Method 2<br /> // Main driver method<br /> public static void main(String[] args)<br /> {<br /> <br /> // Calling the above defined function<br /> new GFG().demofunction(5);<br /> }<br />}<br />Output:</p>
        <p>&nbsp;</p>
        <p>Example 2-B</p>
        <p><br />// Java program to illustrate usage<br />// of return keyword<br /> <br />// Main class<br />class GFG {<br /> <br /> // Since return type of RR method is<br /> // void so this method should not return any value<br /> // Method 1<br /> void demofunction(double val)<br /> {<br /> <br /> // Condition check<br /> if (val &lt; 0) {<br /> <br /> System.out.println(val);<br /> return;<br /> <br /> // System.out.println("oshea");<br /> }<br /> else<br /> ++val;<br /> }<br /> <br /> // Method 2<br /> // Main drive method<br /> public static void main(String[] args)<br /> {<br /> <br /> // CAlling the above method<br /> new GFG().demofunction(-1);<br /> <br /> // Display message to illustrate<br /> // successful execution of program<br /> System.out.println("Program Executed Successfully");<br /> }<br />}<br />Output<br />-1.0<br />Program Executed Successfully<br />Note: In the above program we do uncomment statements it will throw an error.</p>`,
    },
    {
        topic: "Arrays in Java",
        content: `<h1>Arrays in Java</h1><p>Normally, an array is a collection of similar type of elements which has contiguous memory location.</p>
        <p><strong>Java array</strong>&nbsp;is an object which contains elements of a similar data type. Additionally, The elements of an array are stored in a contiguous memory location. It is a data structure where we store similar elements. We can store only a fixed set of elements in a Java array.</p>
        <p>Array in Java is index-based, the first element of the array is stored at the 0th index, 2nd element is stored on 1st index and so on.</p>
        <p>Unlike C/C++, we can get the length of the array using the length member. In C/C++, we need to use the sizeof operator.&nbsp;</p>
        <p>In Java, array is an object of a dynamically generated class. Java array inherits the Object class, and implements the Serializable as well as Cloneable interfaces. We can store primitive values or objects in an array in Java. Like C/C++, we can also create single dimentional or multidimentional arrays in Java.</p>
        <p>Moreover, Java provides the feature of anonymous arrays which is not available in C/C++.</p>
        <h1><img src="https://www.javatpoint.com/images/core/array.gif" alt="Java array" /></h1>
        <h3 class="h3">Advantages</h3>
        <ul class="points">
        <li><strong>Code Optimization:</strong>&nbsp;It makes the code optimized, we can retrieve or sort the data efficiently.</li>
        <li><strong>Random access:</strong>&nbsp;We can get any data located at an index position.</li>
        </ul>
        <h3 class="h3">Disadvantages</h3>
        <ul class="points">
        <li><strong>Size Limit:</strong>&nbsp;We can store only the fixed size of elements in the array. It doesn't grow its size at runtime. To solve this problem, collection framework is used in Java which grows automatically.</li>
        </ul>
        <hr />
        <h1>&nbsp;</h1>
        <h3 class="h2">Types of Array in java</h3>
        <p>There are two types of array.</p>
        <ul>
        <li>Single Dimensional Array</li>
        <li>Multidimensional Array</li>
        </ul>
        <hr />
        <h2 class="h2">Single Dimensional Array in Java</h2>
        <p><strong>Syntax to Declare an Array in Java</strong></p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt">dataType[]&nbsp;arr;&nbsp;(or)&nbsp;&nbsp;</li>
        <li class="">dataType&nbsp;[]arr;&nbsp;(or)&nbsp;&nbsp;</li>
        <li class="alt">dataType&nbsp;arr[];&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p><strong>Instantiation of an Array in Java</strong></p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt">arrayRefVar=<span class="keyword">new</span>&nbsp;datatype[size];&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <h3 class="h3ex">Example of Java Array</h3>
        <p>Let's see the simple example of java array, where we are going to declare, instantiate, initialize and traverse an array.</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;illustrate&nbsp;how&nbsp;to&nbsp;declare,&nbsp;instantiate,&nbsp;initialize</span>&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//and&nbsp;traverse&nbsp;the&nbsp;Java&nbsp;array.</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">class</span>&nbsp;Testarray{&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String&nbsp;args[]){&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">int</span>&nbsp;a[]=<span class="keyword">new</span>&nbsp;<span class="keyword">int</span>[<span class="number">5</span>];<span class="comment">//declaration&nbsp;and&nbsp;instantiation</span>&nbsp;&nbsp;</li>
        <li class="">a[<span class="number">0</span>]=<span class="number">10</span>;<span class="comment">//initialization</span>&nbsp;&nbsp;</li>
        <li class="alt">a[<span class="number">1</span>]=<span class="number">20</span>;&nbsp;&nbsp;</li>
        <li class="">a[<span class="number">2</span>]=<span class="number">70</span>;&nbsp;&nbsp;</li>
        <li class="alt">a[<span class="number">3</span>]=<span class="number">40</span>;&nbsp;&nbsp;</li>
        <li class="">a[<span class="number">4</span>]=<span class="number">50</span>;&nbsp;&nbsp;</li>
        <li class="alt"><span class="comment">//traversing&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;i=<span class="number">0</span>;i&lt;a.length;i++)<span class="comment">//length&nbsp;is&nbsp;the&nbsp;property&nbsp;of&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class="alt">System.out.println(a[i]);&nbsp;&nbsp;</li>
        <li class="">}}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <h1><span class="testit"></span></h1>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>10
        20
        70
        40
        50
        </pre>
        </div>
        <hr />
        <h2 class="h2">Declaration, Instantiation and Initialization of Java Array</h2>
        <p>We can declare, instantiate and initialize the java array together by:</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <ol class="dp-j" start="1">
        <li class="alt"><span class="keyword">int</span>&nbsp;a[]={<span class="number">33</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};<span class="comment">//declaration,&nbsp;instantiation&nbsp;and&nbsp;initialization</span>&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Let's see the simple example to print this array.</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;illustrate&nbsp;the&nbsp;use&nbsp;of&nbsp;declaration,&nbsp;instantiation&nbsp;</span>&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//and&nbsp;initialization&nbsp;of&nbsp;Java&nbsp;array&nbsp;in&nbsp;a&nbsp;single&nbsp;line</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">class</span>&nbsp;Testarray1{&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String&nbsp;args[]){&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">int</span>&nbsp;a[]={<span class="number">33</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};<span class="comment">//declaration,&nbsp;instantiation&nbsp;and&nbsp;initialization</span>&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//printing&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;i=<span class="number">0</span>;i&lt;a.length;i++)<span class="comment">//length&nbsp;is&nbsp;the&nbsp;property&nbsp;of&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class="">System.out.println(a[i]);&nbsp;&nbsp;</li>
        <li class="alt">}}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>33
        3
        4
        5
        </pre>
        </div>
        <h2 class="h2">For-each Loop for Java Array</h2>
        <p>We can also print the Java array using&nbsp;<strong><a href="https://www.javatpoint.com/for-each-loop">for-each loop</a></strong>. The Java for-each loop prints the array elements one by one. It holds an array element in a variable, then executes the body of the loop.</p>
        <p>The syntax of the for-each loop is given below:</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="keyword">for</span>(data_type&nbsp;variable:array){&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//body&nbsp;of&nbsp;the&nbsp;loop</span>&nbsp;&nbsp;</li>
        <li class="alt">}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Let us see the example of print the elements of Java array using the for-each loop&nbsp;</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;print&nbsp;the&nbsp;array&nbsp;elements&nbsp;using&nbsp;for-each&nbsp;loop</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">class</span>&nbsp;Testarray1{&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String&nbsp;args[]){&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">int</span>&nbsp;arr[]={<span class="number">33</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};&nbsp;&nbsp;</li>
        <li class="alt"><span class="comment">//printing&nbsp;array&nbsp;using&nbsp;for-each&nbsp;loop</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;i:arr)&nbsp;&nbsp;</li>
        <li class="alt">System.out.println(i);&nbsp;&nbsp;</li>
        <li class="">}}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>33
        3
        4
        5
        </pre>
        </div>
        <hr />
        <h2 class="h2">Passing Array to a Method in Java</h2>
        <p>We can pass the java array to method so that we can reuse the same logic on any array.</p>
        <p>Let's see the simple example to get the minimum number of an array using a method&nbsp;</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;demonstrate&nbsp;the&nbsp;way&nbsp;of&nbsp;passing&nbsp;an&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//to&nbsp;method.</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">class</span>&nbsp;Testarray2{&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//creating&nbsp;a&nbsp;method&nbsp;which&nbsp;receives&nbsp;an&nbsp;array&nbsp;as&nbsp;a&nbsp;parameter</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;min(<span class="keyword">int</span>&nbsp;arr[]){&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">int</span>&nbsp;min=arr[<span class="number">0</span>];&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;i=<span class="number">1</span>;i&lt;arr.length;i++)&nbsp;&nbsp;</li>
        <li class="">&nbsp;<span class="keyword">if</span>(min&gt;arr[i])&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;min=arr[i];&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;</li>
        <li class="alt">System.out.println(min);&nbsp;&nbsp;</li>
        <li class="">}&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String&nbsp;args[]){&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">int</span>&nbsp;a[]={<span class="number">33</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};<span class="comment">//declaring&nbsp;and&nbsp;initializing&nbsp;an&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class="">min(a);<span class="comment">//passing&nbsp;array&nbsp;to&nbsp;method</span>&nbsp;&nbsp;</li>
        <li class="alt">}}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>3
        </pre>
        </div>
        <h2 class="h2">Anonymous Array in Java</h2>
        <p>Java supports the feature of an anonymous array, so you don't need to declare the array while passing an array to the method.</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;demonstrate&nbsp;the&nbsp;way&nbsp;of&nbsp;passing&nbsp;an&nbsp;anonymous&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//to&nbsp;method.</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">public</span>&nbsp;<span class="keyword">class</span>&nbsp;TestAnonymousArray{&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//creating&nbsp;a&nbsp;method&nbsp;which&nbsp;receives&nbsp;an&nbsp;array&nbsp;as&nbsp;a&nbsp;parameter</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;printArray(<span class="keyword">int</span>&nbsp;arr[]){&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;i=<span class="number">0</span>;i&lt;arr.length;i++)&nbsp;&nbsp;</li>
        <li class="alt">System.out.println(arr[i]);&nbsp;&nbsp;</li>
        <li class="">}&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String&nbsp;args[]){&nbsp;&nbsp;</li>
        <li class="alt">printArray(<span class="keyword">new</span>&nbsp;<span class="keyword">int</span>[]{<span class="number">10</span>,<span class="number">22</span>,<span class="number">44</span>,<span class="number">66</span>});<span class="comment">//passing&nbsp;anonymous&nbsp;array&nbsp;to&nbsp;method</span>&nbsp;&nbsp;</li>
        <li class="">}}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>10
        22
        44
        66
        </pre>
        </div>
        <h2 class="h2">Returning Array from the Method</h2>
        <p>We can also return an array from the method in Java.</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;return&nbsp;an&nbsp;array&nbsp;from&nbsp;the&nbsp;method</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">class</span>&nbsp;TestReturnArray{&nbsp;&nbsp;</li>
        <li class="alt"><span class="comment">//creating&nbsp;method&nbsp;which&nbsp;returns&nbsp;an&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">static</span>&nbsp;<span class="keyword">int</span>[]&nbsp;get(){&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">return</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="keyword">int</span>[]{<span class="number">10</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">90</span>,<span class="number">60</span>};&nbsp;&nbsp;</li>
        <li class="">}&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String&nbsp;args[]){&nbsp;&nbsp;</li>
        <li class="alt"><span class="comment">//calling&nbsp;method&nbsp;which&nbsp;returns&nbsp;an&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">int</span>&nbsp;arr[]=get();&nbsp;&nbsp;</li>
        <li class="alt"><span class="comment">//printing&nbsp;the&nbsp;values&nbsp;of&nbsp;an&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;i=<span class="number">0</span>;i&lt;arr.length;i++)&nbsp;&nbsp;</li>
        <li class="alt">System.out.println(arr[i]);&nbsp;&nbsp;</li>
        <li class="">}}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>10
        30
        50
        90
        60
        </pre>
        </div>
        <h2 class="h2">ArrayIndexOutOfBoundsException</h2>
        <p>The Java Virtual Machine (JVM) throws an ArrayIndexOutOfBoundsException if length of the array in negative, equal to the array size or greater than the array size while traversing the array.</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;demonstrate&nbsp;the&nbsp;case&nbsp;of&nbsp;</span>&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//ArrayIndexOutOfBoundsException&nbsp;in&nbsp;a&nbsp;Java&nbsp;Array.</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">public</span>&nbsp;<span class="keyword">class</span>&nbsp;TestArrayException{&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String&nbsp;args[]){&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">int</span>&nbsp;arr[]={<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>};&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;i=<span class="number">0</span>;i&lt;=arr.length;i++){&nbsp;&nbsp;</li>
        <li class="alt">System.out.println(arr[i]);&nbsp;&nbsp;</li>
        <li class="">}&nbsp;&nbsp;</li>
        <li class="alt">}}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 4
            at TestArrayException.main(TestArrayException.java:5)
        50
        60
        70
        80
        </pre>
        </div>
        <hr />
        <h2 class="h2">Multidimensional Array in Java</h2>
        <p>In such case, data is stored in row and column based index (also known as matrix form).</p>
        <p><strong>Syntax to Declare Multidimensional Array in Java</strong>&nbsp;</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <ol class="dp-j" start="1">
        <li class="alt">dataType[][]&nbsp;arrayRefVar;&nbsp;(or)&nbsp;&nbsp;</li>
        <li class="">dataType&nbsp;[][]arrayRefVar;&nbsp;(or)&nbsp;&nbsp;</li>
        <li class="alt">dataType&nbsp;arrayRefVar[][];&nbsp;(or)&nbsp;&nbsp;</li>
        <li class="">dataType&nbsp;[]arrayRefVar[];&nbsp;&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p><strong>Example to instantiate Multidimensional Array in Java</strong></p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="keyword">int</span>[][]&nbsp;arr=<span class="keyword">new</span>&nbsp;<span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];<span class="comment">//3&nbsp;row&nbsp;and&nbsp;3&nbsp;column</span>&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p><strong>Example to initialize Multidimensional Array in Java</strong></p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt">arr[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;&nbsp;&nbsp;</li>
        <li class="">arr[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">2</span>;&nbsp;&nbsp;</li>
        <li class="alt">arr[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">3</span>;&nbsp;&nbsp;</li>
        <li class="">arr[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">4</span>;&nbsp;&nbsp;</li>
        <li class="alt">arr[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">5</span>;&nbsp;&nbsp;</li>
        <li class="">arr[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">6</span>;&nbsp;&nbsp;</li>
        <li class="alt">arr[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">7</span>;&nbsp;&nbsp;</li>
        <li class="">arr[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">8</span>;&nbsp;&nbsp;</li>
        <li class="alt">arr[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">9</span>;&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <h3 class="h3ex">Example of Multidimensional Java Array</h3>
        <p>Let's see the simple example to declare, instantiate, initialize and print the 2Dimensional array.</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;illustrate&nbsp;the&nbsp;use&nbsp;of&nbsp;multidimensional&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">class</span>&nbsp;Testarray3{&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String&nbsp;args[]){&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//declaring&nbsp;and&nbsp;initializing&nbsp;2D&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">int</span>&nbsp;arr[][]={{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>},{<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>},{<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>}};&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//printing&nbsp;2D&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++){&nbsp;&nbsp;</li>
        <li class="">&nbsp;<span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++){&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;System.out.print(arr[i][j]+<span class="string">"&nbsp;"</span>);&nbsp;&nbsp;</li>
        <li class="">&nbsp;}&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;System.out.println();&nbsp;&nbsp;</li>
        <li class="">}&nbsp;&nbsp;</li>
        <li class="alt">}}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>1 2 3
        2 4 5
        4 4 5
        </pre>
        </div>
        <h2 class="h2">Jagged Array in Java</h2>
        <p>If we are creating odd number of columns in a 2D array, it is known as a jagged array. In other words, it is an array of arrays with different number of columns.</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;illustrate&nbsp;the&nbsp;jagged&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">class</span>&nbsp;TestJaggedArray{&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String[]&nbsp;args){&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//declaring&nbsp;a&nbsp;2D&nbsp;array&nbsp;with&nbsp;odd&nbsp;columns</span>&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">int</span>&nbsp;arr[][]&nbsp;=&nbsp;<span class="keyword">new</span>&nbsp;<span class="keyword">int</span>[<span class="number">3</span>][];&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[<span class="number">0</span>]&nbsp;=&nbsp;<span class="keyword">new</span>&nbsp;<span class="keyword">int</span>[<span class="number">3</span>];&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[<span class="number">1</span>]&nbsp;=&nbsp;<span class="keyword">new</span>&nbsp;<span class="keyword">int</span>[<span class="number">4</span>];&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[<span class="number">2</span>]&nbsp;=&nbsp;<span class="keyword">new</span>&nbsp;<span class="keyword">int</span>[<span class="number">2</span>];&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//initializing&nbsp;a&nbsp;jagged&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">int</span>&nbsp;count&nbsp;=&nbsp;<span class="number">0</span>;&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span>&nbsp;(<span class="keyword">int</span>&nbsp;i=<span class="number">0</span>;&nbsp;i&lt;arr.length;&nbsp;i++)&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;j=<span class="number">0</span>;&nbsp;j&lt;arr[i].length;&nbsp;j++)&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[i][j]&nbsp;=&nbsp;count++;&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//printing&nbsp;the&nbsp;data&nbsp;of&nbsp;a&nbsp;jagged&nbsp;array&nbsp;</span>&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span>&nbsp;(<span class="keyword">int</span>&nbsp;i=<span class="number">0</span>;&nbsp;i&lt;arr.length;&nbsp;i++){&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span>&nbsp;(<span class="keyword">int</span>&nbsp;j=<span class="number">0</span>;&nbsp;j&lt;arr[i].length;&nbsp;j++){&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(arr[i][j]+<span class="string">"&nbsp;"</span>);&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<span class="comment">//new&nbsp;line</span>&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
        <li class="alt">}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>0 1 2 
        3 4 5 6 
        7 8 
        </pre>
        </div>
        <hr />
        <h2 class="h2">What is the class name of Java array?</h2>
        <p>In Java, an array is an object. For array object, a proxy class is created whose name can be obtained by getClass().getName() method on the object.</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;get&nbsp;the&nbsp;class&nbsp;name&nbsp;of&nbsp;array&nbsp;in&nbsp;Java</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">class</span>&nbsp;Testarray4{&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String&nbsp;args[]){&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//declaration&nbsp;and&nbsp;initialization&nbsp;of&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">int</span>&nbsp;arr[]={<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>};&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//getting&nbsp;the&nbsp;class&nbsp;name&nbsp;of&nbsp;Java&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class="alt">Class&nbsp;c=arr.getClass();&nbsp;&nbsp;</li>
        <li class="">String&nbsp;name=c.getName();&nbsp;&nbsp;</li>
        <li class="alt"><span class="comment">//printing&nbsp;the&nbsp;class&nbsp;name&nbsp;of&nbsp;Java&nbsp;array&nbsp;</span>&nbsp;&nbsp;</li>
        <li class="">System.out.println(name);&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;</li>
        <li class="">}}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>I
        </pre>
        </div>
        <hr />
        <h2 class="h2">Copying a Java Array</h2>
        <p>We can copy an array to another by the arraycopy() method of System class.</p>
        <p><strong>Syntax of arraycopy method</strong></p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;arraycopy(&nbsp;&nbsp;</li>
        <li class="">Object&nbsp;src,&nbsp;<span class="keyword">int</span>&nbsp;srcPos,Object&nbsp;dest,&nbsp;<span class="keyword">int</span>&nbsp;destPos,&nbsp;<span class="keyword">int</span>&nbsp;length&nbsp;&nbsp;</li>
        <li class="alt">)&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <h3 class="h3">Example of Copying an Array in Java</h3>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;copy&nbsp;a&nbsp;source&nbsp;array&nbsp;into&nbsp;a&nbsp;destination&nbsp;array&nbsp;in&nbsp;Java</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">class</span>&nbsp;TestArrayCopyDemo&nbsp;{&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//declaring&nbsp;a&nbsp;source&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">char</span>[]&nbsp;copyFrom&nbsp;=&nbsp;{&nbsp;<span class="string">'d'</span>,&nbsp;<span class="string">'e'</span>,&nbsp;<span class="string">'c'</span>,&nbsp;<span class="string">'a'</span>,&nbsp;<span class="string">'f'</span>,&nbsp;<span class="string">'f'</span>,&nbsp;<span class="string">'e'</span>,&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">'i'</span>,&nbsp;<span class="string">'n'</span>,&nbsp;<span class="string">'a'</span>,&nbsp;<span class="string">'t'</span>,&nbsp;<span class="string">'e'</span>,&nbsp;<span class="string">'d'</span>&nbsp;};&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//declaring&nbsp;a&nbsp;destination&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">char</span>[]&nbsp;copyTo&nbsp;=&nbsp;<span class="keyword">new</span>&nbsp;<span class="keyword">char</span>[<span class="number">7</span>];&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//copying&nbsp;array&nbsp;using&nbsp;System.arraycopy()&nbsp;method</span>&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(copyFrom,&nbsp;<span class="number">2</span>,&nbsp;copyTo,&nbsp;<span class="number">0</span>,&nbsp;<span class="number">7</span>);&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//printing&nbsp;the&nbsp;destination&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(String.valueOf(copyTo));&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li>
        <li class="">}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>caffein
        </pre>
        </div>
        <hr />
        <h2 class="h2">Cloning an Array in Java</h2>
        <p>Since, Java array implements the Cloneable interface, we can create the clone of the Java array. If we create the clone of a single-dimensional array, it creates the deep copy of the Java array. It means, it will copy the actual value. But, if we create the clone of a multidimensional array, it creates the shallow copy of the Java array which means it copies the references.</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;clone&nbsp;the&nbsp;array</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">class</span>&nbsp;Testarray1{&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String&nbsp;args[]){&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">int</span>&nbsp;arr[]={<span class="number">33</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};&nbsp;&nbsp;</li>
        <li class="alt">System.out.println(<span class="string">"Printing&nbsp;original&nbsp;array:"</span>);&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;i:arr)&nbsp;&nbsp;</li>
        <li class="alt">System.out.println(i);&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;</li>
        <li class="alt">System.out.println(<span class="string">"Printing&nbsp;clone&nbsp;of&nbsp;the&nbsp;array:"</span>);&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">int</span>&nbsp;carr[]=arr.clone();&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;i:carr)&nbsp;&nbsp;</li>
        <li class="">System.out.println(i);&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;</li>
        <li class="">System.out.println(<span class="string">"Are&nbsp;both&nbsp;equal?"</span>);&nbsp;&nbsp;</li>
        <li class="alt">System.out.println(arr==carr);&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;</li>
        <li class="alt">}}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>Printing original array:
        33
        3
        4
        5
        Printing clone of the array:
        33
        3
        4
        5
        Are both equal?
        false
        </pre>
        </div>
        <h2 class="h2">Addition of 2 Matrices in Java</h2>
        <div id="ce4fe94a-b0f5-43e7-9ca2-ceb16237f78e" class="_ap_apex_ad" style="display: block; clear: both; text-align: center; margin: 10px auto 10px 20px; width: 300px; height: 250px; overflow: hidden; float: right;" data-section="ce4fe94a-b0f5-43e7-9ca2-ceb16237f78e" data-xpath="#city &gt; table:eq(0) &gt; tbody:eq(0) &gt; tr:eq(0) &gt; td:eq(0) &gt; h2:eq(12)" data-section-id="" data-ap-network="adpTags" data-render-time="1651323652775" data-refresh-time="1651323670141" data-timeout="944">&nbsp;</div>
        <p>Let's see a simple example that adds two matrices.</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;demonstrate&nbsp;the&nbsp;addition&nbsp;of&nbsp;two&nbsp;matrices&nbsp;in&nbsp;Java</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">class</span>&nbsp;Testarray5{&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String&nbsp;args[]){&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//creating&nbsp;two&nbsp;matrices</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">int</span>&nbsp;a[][]={{<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>},{<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>}};&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">int</span>&nbsp;b[][]={{<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>},{<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>}};&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//creating&nbsp;another&nbsp;matrix&nbsp;to&nbsp;store&nbsp;the&nbsp;sum&nbsp;of&nbsp;two&nbsp;matrices</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">int</span>&nbsp;c[][]=<span class="keyword">new</span>&nbsp;<span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;</li>
        <li class="alt"><span class="comment">//adding&nbsp;and&nbsp;printing&nbsp;addition&nbsp;of&nbsp;2&nbsp;matrices</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++){&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++){&nbsp;&nbsp;</li>
        <li class="">c[i][j]=a[i][j]+b[i][j];&nbsp;&nbsp;</li>
        <li class="alt">System.out.print(c[i][j]+<span class="string">"&nbsp;"</span>);&nbsp;&nbsp;</li>
        <li class="">}&nbsp;&nbsp;</li>
        <li class="alt">System.out.println();<span class="comment">//new&nbsp;line</span>&nbsp;&nbsp;</li>
        <li class="">}&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;</li>
        <li class="">}}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>2 6 8
        6 8 10
        </pre>
        </div>
        <h2 class="h2">Multiplication of 2 Matrices in Java</h2>
        <p>In the case of matrix multiplication, a one-row element of the first matrix is multiplied by all the columns of the second matrix which can be understood by the image given below.</p>
        <h1><img src="https://static.javatpoint.com/cpp/images/matrix-multiplication-in-cpp1.png" alt="Matrix Multiplication in Java" /></h1>
        <p>Let's see a simple example to multiply two matrices of 3 rows and 3 columns.</p>
        <div class="codeblock">
        <div class="dp-highlighter">
        <div class="bar">&nbsp;</div>
        <ol class="dp-j" start="1">
        <li class="alt"><span class="comment">//Java&nbsp;Program&nbsp;to&nbsp;multiply&nbsp;two&nbsp;matrices</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">public</span>&nbsp;<span class="keyword">class</span>&nbsp;MatrixMultiplicationExample{&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">void</span>&nbsp;main(String&nbsp;args[]){&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//creating&nbsp;two&nbsp;matrices&nbsp;&nbsp;</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">int</span>&nbsp;a[][]={{<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>},{<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>},{<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>}};&nbsp;&nbsp;&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">int</span>&nbsp;b[][]={{<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>},{<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>},{<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>}};&nbsp;&nbsp;&nbsp;&nbsp;</li>
        <li class="alt">&nbsp;&nbsp;&nbsp;&nbsp;</li>
        <li class=""><span class="comment">//creating&nbsp;another&nbsp;matrix&nbsp;to&nbsp;store&nbsp;the&nbsp;multiplication&nbsp;of&nbsp;two&nbsp;matrices&nbsp;&nbsp;</span>&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">int</span>&nbsp;c[][]=<span class="keyword">new</span>&nbsp;<span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];&nbsp;&nbsp;<span class="comment">//3&nbsp;rows&nbsp;and&nbsp;3&nbsp;columns</span>&nbsp;&nbsp;</li>
        <li class="">&nbsp;&nbsp;&nbsp;&nbsp;</li>
        <li class="alt"><span class="comment">//multiplying&nbsp;and&nbsp;printing&nbsp;multiplication&nbsp;of&nbsp;2&nbsp;matrices&nbsp;&nbsp;</span>&nbsp;&nbsp;</li>
        <li class=""><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++){&nbsp;&nbsp;&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++){&nbsp;&nbsp;&nbsp;&nbsp;</li>
        <li class="">c[i][j]=<span class="number">0</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
        <li class="alt"><span class="keyword">for</span>(<span class="keyword">int</span>&nbsp;k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
        <li class="">{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
        <li class="alt">c[i][j]+=a[i][k]*b[k][j];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
        <li class="">}<span class="comment">//end&nbsp;of&nbsp;k&nbsp;loop</span>&nbsp;&nbsp;</li>
        <li class="alt">System.out.print(c[i][j]+<span class="string">"&nbsp;"</span>);&nbsp;&nbsp;<span class="comment">//printing&nbsp;matrix&nbsp;element</span>&nbsp;&nbsp;</li>
        <li class="">}<span class="comment">//end&nbsp;of&nbsp;j&nbsp;loop</span>&nbsp;&nbsp;</li>
        <li class="alt">System.out.println();<span class="comment">//new&nbsp;line&nbsp;&nbsp;</span>&nbsp;&nbsp;</li>
        <li class="">}&nbsp;&nbsp;&nbsp;&nbsp;</li>
        <li class="alt">}}&nbsp;&nbsp;</li>
        </ol>
        </div>
        </div>
        <p>Output:</p>
        <div class="codeblock3">
        <pre>6 6 6 
        12 12 12 
        18 18 18 </pre>
        </div>`,
    },
    {
        topic: "Strings in Java",
        content: `<h1>Strings in Java</h1>
        <p>Strings in Java are Objects that are backed internally by a char array. Since arrays are immutable(cannot grow), Strings are immutable as well. Whenever a change to a String is made, an entirely new String is created.&nbsp;</p>
        <p><strong>Syntax:</strong>&nbsp;&nbsp;</p>
        <pre>&lt;String_Type&gt; &lt;string_variable&gt; = "&lt;sequence_of_string&gt;";&nbsp;</pre>
        <p><strong>Example:</strong>&nbsp;&nbsp;</p>
        <pre>String str = "Geeks";</pre>
        <p>&nbsp;</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/finnnal.png" alt="" /></p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p><strong>Memory allotment of String</strong></p>
        <p>Whenever a String Object is created as a literal, the object will be created in String constant pool. This allows JVM to optimize the initialization of String literal.</p>
        <p><strong>For example:</strong>&nbsp;</p>
        <pre>String str = "Geeks";</pre>
        <p>The string can also be declared using&nbsp;<strong>new</strong>&nbsp;operator i.e. dynamically allocated. In case of String are dynamically allocated they are assigned a new memory location in heap. This string will not be added to String constant pool.</p>
        <p><strong>For example:&nbsp;</strong></p>
        <pre>String str = new String("Geeks");</pre>
        <p>If you want to store this string in the constant pool then you will need to &ldquo;intern&rdquo; it.</p>
        <p><strong>For example:</strong></p>
        <pre>String internedString = str.intern(); 
        // this will add the string to string constant pool.</pre>
        <p>It is preferred to use String literals as it allows JVM to optimize memory allocation.</p>
        <p><strong>An example that shows how to declare String</strong>&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_109780" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java code to illustrate String</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.lang.*;</code></div>
        <div class="line number4 index3 alt1">&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">Test {</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Declare String without using new operator</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String s = </code><code class="string">"GeeksforGeeks"</code><code class="plain">;</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Prints the String.</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"String s = "</code> <code class="plain">+ s);</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Declare String using new operator</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String s1 = </code><code class="keyword">new</code> <code class="plain">String(</code><code class="string">"GeeksforGeeks"</code><code class="plain">);</code></div>
        <div class="line number16 index15 alt1">&nbsp;</div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Prints the String.</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"String s1 = "</code> <code class="plain">+ s1);</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number20 index19 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output:</strong>&nbsp;
        <pre>String s = GeeksforGeeks
        String s1 = GeeksforGeeks</pre>
        <p>&nbsp;</p>
        </div>
        <p><strong>Interfaces and Classes in Strings in Java</strong></p>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/tag/java-charbuffer/">CharBuffer</a>: This class implements the CharSequence interface. This class is used to allow character buffers to be used in place of CharSequences. An example of such usage is the regular-expression package java.util.regex.<br />&nbsp;</li>
        <li><a href="https://www.geeksforgeeks.org/string-class-in-java/">String</a>: String is a sequence of characters. In java, objects of String are immutable which means a constant and cannot be changed once created.</li>
        </ul>
        <p><strong>Creating a String</strong></p>
        <ul>
        <li>There are two ways to create a string in Java:&nbsp;
        <ul>
        <li><em><strong>String literal</strong></em></li>
        </ul>
        </li>
        </ul>
        <pre>String s = &ldquo;GeeksforGeeks&rdquo;;</pre>
        <ul>
        <li><strong>Using&nbsp;</strong><em><strong>new</strong></em><strong>&nbsp;keyword</strong></li>
        </ul>
        <pre>String s = new String (&ldquo;GeeksforGeeks&rdquo;);</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-class-in-java/">StringBuffer</a>:&nbsp;<br /><strong>StringBuffer&nbsp;</strong>is a peer class of&nbsp;<strong>String&nbsp;</strong>that provides much of the functionality of strings. The string represents fixed-length, immutable character sequences while StringBuffer represents growable and writable character sequences.<br /><strong>Syntax:</strong></li>
        </ul>
        <pre>StringBuffer s = new StringBuffer("GeeksforGeeks");</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuilder-class-in-java-with-examples/">StringBuilder</a>:&nbsp;<br />The&nbsp;<strong>StringBuilder</strong>&nbsp;in Java represents a mutable sequence of characters. Since the String Class in Java creates an immutable sequence of characters, the StringBuilder class provides an alternate to String Class, as it creates a mutable sequence of characters.<br /><strong>Syntax:</strong></li>
        </ul>
        <pre>StringBuilder str = new StringBuilder();
        str.append("GFG");</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringtokenizer-class-java-example-set-1-constructors/">StringTokenizer</a>:&nbsp;<br />StringTokenizer class in Java is used to break a string into tokens.&nbsp;<br /><strong>Example:</strong></li>
        </ul>
        <p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/StringTokenizer.png" alt="stringtokenizer" /></p>
        <ul>
        <li>A StringTokenizer object internally maintains a current position within the string to be tokenized. Some operations advance this current position past the characters processed.&nbsp;A token is returned by taking a substring of the string that was used to create the StringTokenizer object.<br />&nbsp;</li>
        <li><a href="https://www.geeksforgeeks.org/java-util-stringjoiner-java8/">StringJoiner</a>:&nbsp;<br />StringJoiner is a class in&nbsp;<a href="https://www.geeksforgeeks.org/tag/java-util-package/"><em>java.util</em></a>&nbsp;package which is used to construct a sequence of characters(strings) separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix. Though this can also be with the help of StringBuilder class to append delimiter after each string, StringJoiner provides an easy way to do that without much code to write.<br /><strong>Syntax:</strong></li>
        </ul>
        <blockquote>
        <p>public StringJoiner(CharSequence delimiter)</p>
        </blockquote>
        <p><strong>Above we saw we can create string by &nbsp;String Literal.&nbsp;</strong></p>
        <blockquote>
        <p>For ex-&nbsp;// String s=&rdquo;Welcome&rdquo;;&nbsp;</p>
        </blockquote>
        <p>Here the JVM checks the String Constant Pool. If the string does not exist, then a new string instance is created and placed in a pool. If the string exists, then it will not create a new object. Rather, it will return the reference to the same instance.&nbsp;The cache which stores these string instances is known as the String Constant pool or String Pool. In earlier versions of Java up to JDK 6 String pool was located inside PermGen(Permanent Generation) space. But in JDK 7 it is moved to the main heap area.&nbsp;</p>
        <p><strong>Why did the String pool move from PermGen to&nbsp;</strong>the&nbsp;<strong>normal heap area?&nbsp;</strong></p>
        <p>PermGen space is limited, the default size is just 64 MB. it was a problem with creating and storing too many string objects in PermGen space. That&rsquo;s why the String pool was moved to a larger heap area.&nbsp;To make Java more memory efficient, the concept of string literal is used. By the use of the &lsquo;new&rsquo; keyword, The JVM will create a new string object in the normal heap area even if the same string object is present in the string pool.&nbsp;</p>
        <p>For ex-&nbsp;</p>
        <blockquote>
        <p>String a=new String(&ldquo;Bhubaneswar&rdquo;)</p>
        </blockquote>
        <p>Let&rsquo;s have a look at the concept with a java program and visualize the actual JVM memory structure:&nbsp;</p>
        <p>Program:</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_200711" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">class</code> <code class="plain">StringStorage {</code></div>
        <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String s1 = </code><code class="string">"TAT"</code><code class="plain">;</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String s2 = </code><code class="string">"TAT"</code><code class="plain">;</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String s3 = </code><code class="keyword">new</code> <code class="plain">String(</code><code class="string">"TAT"</code><code class="plain">);</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String s4 = </code><code class="keyword">new</code> <code class="plain">String(</code><code class="string">"TAT"</code><code class="plain">);</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s1);</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s2);</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s3);</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s4);</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number13 index12 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>TAT
        TAT
        TAT
        TAT
        </pre>
        </div>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20210711152428/JVMMemoryArea2.png" alt="JVM Memory Area" /></p>
        <p><strong>Note:</strong>&nbsp;All objects in Java are stored in a heap. The reference variable is to the object stored in the stack area or they can be contained in other objects which puts them in the heap area also.</p>
        <h1>String class in Java&nbsp;</h1>
        <p>String is a sequence of characters. In java, objects of String are immutable which means a constant and cannot be changed once created.</p>
        <p><strong>Creating a String</strong></p>
        <p>There are two ways to create string in Java:</p>
        <ul>
        <li><strong><em>String literal</em></strong>
        <pre>String s = &ldquo;GeeksforGeeks&rdquo;;</pre>
        </li>
        <li><strong>Using&nbsp;<em>new</em>&nbsp;keyword</strong>
        <pre>String s = new String (&ldquo;GeeksforGeeks&rdquo;);</pre>
        </li>
        </ul>
        <p align="center"><strong>Constructors</strong></p>
        <ol>
        <li><strong>String(byte[] byte_arr)</strong>&nbsp;&ndash; Construct a new String by decoding the&nbsp;<em>byte array</em>. It uses the platform&rsquo;s default character set for decoding.<br /><strong>Example:</strong>
        <div id="AP_G4GR_5">&nbsp;</div>
        <pre>byte[] b_arr = {71, 101, 101, 107, 115};
        String s_byte =new String(b_arr); //Geeks
        </pre>
        </li>
        <li><strong>String(byte[] byte_arr, Charset char_set)</strong>&nbsp;&ndash; Construct a new String by decoding the&nbsp;<em>byte array</em>. It uses the&nbsp;<em>char_set</em>&nbsp;for decoding.<br /><strong>Example:</strong>
        <pre>byte[] b_arr = {71, 101, 101, 107, 115};
        Charset cs = Charset.defaultCharset();
        String s_byte_char = new String(b_arr, cs); //Geeks
        </pre>
        </li>
        <li><strong>String(byte[] byte_arr, String char_set_name)</strong>&nbsp;&ndash; Construct a new String by decoding the&nbsp;<em>byte array</em>. It uses the&nbsp;<em>char_set_name</em>&nbsp;for decoding.<br />It looks similar to the above constructs and they appear before similar functions but it takes the&nbsp;<em>String(which contains char_set_name)</em>&nbsp;as parameter while the above constructor takes&nbsp;<em>CharSet.</em><br /><strong>Example:</strong>
        <pre>byte[] b_arr = {71, 101, 101, 107, 115};
        String s = new String(b_arr, "US-ASCII"); //Geeks
        </pre>
        </li>
        <li><strong>String(byte[] byte_arr, int start_index, int length)</strong>&nbsp;&ndash; Construct a new string from the&nbsp;<em>bytes array</em>&nbsp;depending on the&nbsp;<em>start_index(Starting location)</em>&nbsp;and&nbsp;<em>length(number of characters from starting location).</em><br /><strong>Example:</strong>
        <pre>byte[] b_arr = {71, 101, 101, 107, 115};
        String s = new String(b_arr, 1, 3); // eek
        </pre>
        </li>
        <li><strong>String(byte[] byte_arr, int start_index, int length, Charset char_set)</strong>&nbsp;&ndash; Construct a new string from the&nbsp;<em>bytes array</em>&nbsp;depending on the&nbsp;<em>start_index(Starting location)</em>&nbsp;and&nbsp;<em>length(number of characters from starting location)</em>.Uses&nbsp;<em>char_set</em>&nbsp;for decoding.<br /><strong>Example:</strong>
        <pre>byte[] b_arr = {71, 101, 101, 107, 115};
        Charset cs = Charset.defaultCharset();
        String s = new String(b_arr, 1, 3, cs); // eek
        </pre>
        </li>
        <li><strong>String(byte[] byte_arr, int start_index, int length, String char_set_name)&nbsp;</strong>&ndash; Construct a new string from the<em>&nbsp;bytes array</em>&nbsp;depending on the&nbsp;<em>start_index(Starting location)</em>&nbsp;and&nbsp;<em>length(number of characters from starting location)</em>.Uses&nbsp;<em>char_set_name</em>&nbsp;for decoding.<br /><strong>Example:</strong>
        <pre>byte[] b_arr = {71, 101, 101, 107, 115};
        String s = new String(b_arr, 1, 4, "US-ASCII"); // eeks
        </pre>
        </li>
        <li><strong>String(char[] char_arr)</strong>&nbsp;&ndash; Allocates a new String from the given&nbsp;<em>Character array</em><br /><strong>Example:</strong>
        <pre>char char_arr[] = {'G', 'e', 'e', 'k', 's'};
        String s = new String(char_arr); //Geeks
        </pre>
        </li>
        <li><strong>String(char[] char_array, int start_index, int count)</strong>&nbsp;&ndash; Allocates a String from a given&nbsp;<em>character array</em>&nbsp;but choose&nbsp;<em>count</em>&nbsp;characters from the&nbsp;<em>start_index</em>.<br /><strong>Example:</strong>
        <pre>char char_arr[] = {'G', 'e', 'e', 'k', 's'};
        String s = new String(char_arr , 1, 3); //eek
        </pre>
        </li>
        <li><strong>String(int[] uni_code_points, int offset, int count)</strong>&nbsp;&ndash; Allocates a String from a&nbsp;<em>uni_code_array</em>&nbsp;but choose&nbsp;<em>count</em>&nbsp;characters from the&nbsp;<em>start_index</em>.<br /><strong>Example:</strong>
        <pre>int[] uni_code = {71, 101, 101, 107, 115};
        String s = new String(uni_code, 1, 3); //eek
        </pre>
        </li>
        <li><strong>String(StringBuffer s_buffer)</strong>&nbsp;&ndash; Allocates a new string from the string in&nbsp;<em>s_buffer</em><br /><strong>Example:</strong>
        <pre>StringBuffer s_buffer = new StringBuffer("Geeks");
        String s = new String(s_buffer); //Geeks
        </pre>
        </li>
        <li><strong>String(StringBuilder s_builder)</strong>&nbsp;&ndash; Allocates a new string from the string in&nbsp;<em>s_builder</em><br /><strong>Example:</strong>
        <pre>StringBuilder s_builder = new StringBuilder("Geeks");
        String s = new String(s_builder); //Geeks
        </pre>
        </li>
        </ol>
        <p><strong>String Methods</strong></p>
        <ol>
        <li><strong>int length():&nbsp;</strong>Returns the number of characters in the String.
        <pre>"GeeksforGeeks".length();&nbsp; // returns 13</pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/java-string-charat-method-example/">Char charAt(int i)</a>:&nbsp;</strong>Returns the character at i<sup>th</sup>&nbsp;index.
        <pre>"GeeksforGeeks".charAt(3); // returns&nbsp; &lsquo;k&rsquo;</pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/substring-in-java/">String substring (int i)</a>:&nbsp;</strong>Return the substring from the i<sup>th&nbsp;</sup>&nbsp;index character to end.
        <pre>"GeeksforGeeks".substring(3); // returns &ldquo;ksforGeeks&rdquo;</pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/substring-in-java/">String substring (int i, int j)</a>:&nbsp;</strong>Returns the substring from i to j-1 index.
        <pre> "GeeksforGeeks".substring(2, 5); // returns &ldquo;eks&rdquo;</pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/java-string-concat-examples/">String concat( String str)</a>:&nbsp;</strong>Concatenates specified string to the end of this string.
        <pre> String s1 = &rdquo;Geeks&rdquo;;
         String s2 = &rdquo;forGeeks&rdquo;;
         String output = s1.concat(s2); // returns &ldquo;GeeksforGeeks&rdquo;
        </pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/java-string-indexof/">int indexOf (String s)</a>:&nbsp;</strong>Returns the index within the string of the first occurrence of the specified string.
        <pre> String s = &rdquo;Learn Share Learn&rdquo;;
         int output = s.indexOf(&ldquo;Share&rdquo;); // returns 6
        </pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/java-string-indexof/">int indexOf (String s, int i)</a>:&nbsp;</strong>Returns the index within the string of the first occurrence of the specified string, starting at the specified index.
        <pre> String s = &rdquo;Learn Share Learn&rdquo;;
         int output = s.indexOf("ea",3);// returns 13
        </pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/java-lang-string-lastindexof-method/">Int lastIndexOf( String s)</a>:&nbsp;</strong>Returns the index within the string of the last occurrence of the specified string.
        <pre> String s = &rdquo;Learn Share Learn&rdquo;;
         int output = s.lastIndexOf("a"); // returns 14
        </pre>
        </li>
        <li><strong>boolean equals( Object otherObj):&nbsp;</strong>Compares this string to the specified object.
        <pre> Boolean out = &ldquo;Geeks&rdquo;.equals(&ldquo;Geeks&rdquo;); // returns true
         Boolean out = &ldquo;Geeks&rdquo;.equals(&ldquo;geeks&rdquo;); // returns false
        </pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/equalsignorecase-in-java/">boolean&nbsp; equalsIgnoreCase (String anotherString)</a>:&nbsp;</strong>Compares string to another string, ignoring case considerations.
        <pre> Boolean out= &ldquo;Geeks&rdquo;.equalsIgnoreCase(&ldquo;Geeks&rdquo;); // returns true
         Boolean out = &ldquo;Geeks&rdquo;.equalsIgnoreCase(&ldquo;geeks&rdquo;); // returns true</pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/java-lang-string-compareto/">&nbsp;int compareTo( String anotherString)</a>:&nbsp;</strong>Compares two string lexicographically.
        <pre> int out = s1.compareTo(s2);&nbsp; // where s1 ans s2 are
                                     // strings to be compared
        
         This returns difference s1-s2. If :
         out &lt; 0  // s1 comes before s2
         out = 0  // s1 and s2 are equal.
         out &gt; 0   // s1 comes after s2.
        </pre>
        </li>
        <li><strong>int compareToIgnoreCase( String anotherString):&nbsp;</strong>Compares two string lexicographically, ignoring case considerations.
        <pre> int out = s1.compareToIgnoreCase(s2);&nbsp; 
        // where s1 ans s2 are 
        // strings to be compared
        
         This returns difference s1-s2. If :
         out &lt; 0  // s1 comes before s2
         out = 0   // s1 and s2 are equal.
         out &gt; 0   // s1 comes after s2.
        </pre>
        <p><em>Note- In this case, it will not consider case of a letter (it will ignore whether it is uppercase or lowercase).</em></p>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/java-string-tolowercase-examples/">String toLowerCase()</a>:&nbsp;</strong>Converts all the characters in the String to lower case.
        <pre>String word1 = &ldquo;HeLLo&rdquo;;
        String word3 = word1.toLowerCase(); // returns &ldquo;hello"
        </pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/java-touppercase-examples/">String toUpperCase()</a>:&nbsp;</strong>Converts all the characters in the String to upper case.
        <pre>String word1 = &ldquo;HeLLo&rdquo;;
        String word2 = word1.toUpperCase(); // returns &ldquo;HELLO&rdquo;
        </pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/java-string-trim-method-example/">String trim()</a>:&nbsp;</strong>Returns the copy of the String, by removing whitespaces at both ends. It does not affect whitespaces in the middle.
        <pre>String word1 = &ldquo; Learn Share Learn &ldquo;;
        String word2 = word1.trim(); // returns &ldquo;Learn Share Learn&rdquo;
        </pre>
        </li>
        <li><strong><a href="https://www.geeksforgeeks.org/java-lang-string-replace-method-java/">&nbsp;String replace (char oldChar, char newChar)</a>:&nbsp;</strong>Returns new string by replacing all occurrences of&nbsp;<em>oldChar&nbsp;</em>with&nbsp;<em>newChar.</em>
        <pre>String s1 = &ldquo;feeksforfeeks&ldquo;;
        String s2 = &ldquo;feeksforfeeks&rdquo;.replace(&lsquo;f&rsquo; ,&rsquo;g&rsquo;); // returns &ldquo;geeksgorgeeks&rdquo;
        </pre>
        <p><em>Note:- s1 is still feeksforfeeks and s2 is geeksgorgeeks</em></p>
        <p>Program to illustrate all string &nbsp;methods:</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_620898" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java code to illustrate different constructors and methods&nbsp;</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// String class.</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">Test</code></div>
        <div class="line number7 index6 alt2"><code class="plain">{</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args)</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String s= </code><code class="string">"GeeksforGeeks"</code><code class="plain">;</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// or String s= new String ("GeeksforGeeks");</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns the number of characters in the String.</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"String length = "</code> <code class="plain">+ s.length());</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns the character at ith index.</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Character at 3rd position = "</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ s.charAt(</code><code class="value">3</code><code class="plain">));</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Return the substring from the ith&nbsp; index character</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// to end of string</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Substring "</code> <code class="plain">+ s.substring(</code><code class="value">3</code><code class="plain">));</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns the substring from i to j-1 index.</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Substring&nbsp; = "</code> <code class="plain">+ s.substring(</code><code class="value">2</code><code class="plain">,</code><code class="value">5</code><code class="plain">));</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Concatenates string2 to the end of string1.</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String s1 = </code><code class="string">"Geeks"</code><code class="plain">;</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String s2 = </code><code class="string">"forGeeks"</code><code class="plain">;</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Concatenated string&nbsp; = "</code> <code class="plain">+</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s1.concat(s2));</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns the index within the string</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// of the first occurrence of the specified string.</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String s4 = </code><code class="string">"Learn Share Learn"</code><code class="plain">;</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Index of Share "</code> <code class="plain">+&nbsp;</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s4.indexOf(</code><code class="string">"Share"</code><code class="plain">));</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns the index within the string of the</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// first occurrence of the specified string,</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// starting at the specified index.</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Index of a&nbsp; = "</code> <code class="plain">+&nbsp;</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s4.indexOf(</code><code class="string">'a'</code><code class="plain">,</code><code class="value">3</code><code class="plain">));</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Checking equality of Strings</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Boolean out = </code><code class="string">"Geeks"</code><code class="plain">.equals(</code><code class="string">"geeks"</code><code class="plain">);</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Checking Equality&nbsp; "</code> <code class="plain">+ out);</code></div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">out = </code><code class="string">"Geeks"</code><code class="plain">.equals(</code><code class="string">"Geeks"</code><code class="plain">);</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Checking Equality&nbsp; "</code> <code class="plain">+ out);</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">out = </code><code class="string">"Geeks"</code><code class="plain">.equalsIgnoreCase(</code><code class="string">"gEeks "</code><code class="plain">);</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Checking Equality "</code> <code class="plain">+ out);</code></div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//If ASCII difference is zero then the two strings are similar</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">out1 = s1.compareTo(s2);</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"the difference between ASCII value is="</code><code class="plain">+out1);</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Converting cases</code></div>
        <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String word1 = </code><code class="string">"GeeKyMe"</code><code class="plain">;</code></div>
        <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Changing to lower Case "</code> <code class="plain">+</code></div>
        <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">word1.toLowerCase());</code></div>
        <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Converting cases</code></div>
        <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String word2 = </code><code class="string">"GeekyME"</code><code class="plain">;</code></div>
        <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Changing to UPPER Case "</code> <code class="plain">+&nbsp;</code></div>
        <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">word2.toUpperCase());</code></div>
        <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Trimming the word</code></div>
        <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String word4 = </code><code class="string">" Learn Share Learn "</code><code class="plain">;</code></div>
        <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Trim the word "</code> <code class="plain">+ word4.trim());</code></div>
        <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Replacing characters</code></div>
        <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String str1 = </code><code class="string">"feeksforfeeks"</code><code class="plain">;</code></div>
        <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Original String "</code> <code class="plain">+ str1);</code></div>
        <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String str2 = </code><code class="string">"feeksforfeeks"</code><code class="plain">.replace(</code><code class="string">'f'</code> <code class="plain">,</code><code class="string">'g'</code><code class="plain">) ;</code></div>
        <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Replaced f with g -&gt; "</code> <code class="plain">+ str2);</code></div>
        <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp;</code></div>
        <div class="line number77 index76 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output :</p>
        <pre>String length = 13
        Character at 3rd position = k
        Substring ksforGeeks
        Substring = eks
        Concatenated string = GeeksforGeeks
        Index of Share 6
        Index of a = 8
        Checking Equality false
        Checking Equality true
        Checking Equality false
        the difference between ASCII value is=-31
        Changing to lower Case geekyme
        Changing to UPPER Case GEEKYME
        Trim the word Learn Share Learn
        Original String feeksforfeeks
        Replaced f with g -&gt; geeksgorgeeks</pre>
        </li>
        </ol>
        <h1>StringBuffer class in Java</h1>
        <p><strong>StringBuffer&nbsp;</strong>is a peer class of&nbsp;<strong>String&nbsp;</strong>that provides much of the functionality of strings. The string represents fixed-length, immutable character sequences while StringBuffer represents growable and writable character sequences.&nbsp;<strong>StringBuffer&nbsp;</strong>may have characters and substrings inserted in the middle or appended to the end. It<strong>&nbsp;</strong>will automatically grow to make room for such additions and often has more characters preallocated than are actually needed, to allow room for growth.</p>
        <p><strong>Some Interesting Facts about the StringBuffer class</strong>&nbsp;</p>
        <p>Do keep the following points in the back of your mind:&nbsp;<strong>&nbsp;</strong></p>
        <ul>
        <li>java.lang.StringBuffer extends (or inherits from)&nbsp;<a href="https://www.geeksforgeeks.org/object-class-in-java/">Object class</a>.</li>
        <li>All Implemented Interfaces of StringBuffer class: Serializable, Appendable, CharSequence.</li>
        <li>public final class StringBuffer&nbsp;extends Object&nbsp;implements Serializable, CharSequence, Appendable.</li>
        <li>String buffers are safe for use by multiple threads. The methods can be synchronized wherever necessary so that all the operations on any particular instance behave as if they occur in some serial order.</li>
        <li>Whenever an operation occurs involving a source sequence (such as appending or inserting from a source sequence) this class synchronizes only on the string buffer performing the operation, not on the source.</li>
        <li>It inherits some of the methods from the Object class which such as&nbsp;<em>clone(), equals(), finalize(), getClass(), hashCode(),&nbsp;</em>notifies()<em>, notifyAll().</em></li>
        </ul>
        <blockquote>
        <p><strong>Remember:&nbsp;</strong>StringBuilder<strong>,&nbsp;</strong>J2SE 5 adds a new string class to Java&rsquo;s already powerful string handling capabilities. This new class is called StringBuilder. It is identical to StringBuffer except for one important&nbsp;difference: it is not synchronized, which means that it is not thread-safe. The advantage of&nbsp;StringBuilder&nbsp;is faster performance. However, in cases in which you are using multithreading, &nbsp;you must use StringBuffer rather than StringBuilder.</p>
        </blockquote>
        <p><strong>Constructors&nbsp;of StringBuffer class&nbsp;</strong></p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p><strong>1. StringBuffer()</strong>: It reserves room for 16 characters without reallocation</p>
        <pre>StringBuffer s = <strong>new </strong>StringBuffer();</pre>
        <p><strong>2.</strong>&nbsp;<strong>StringBuffer( int&nbsp;size)</strong>: It accepts an integer argument that explicitly sets the size of the buffer.&nbsp;</p>
        <pre>StringBuffer s = <strong>new </strong>StringBuffer(20);</pre>
        <p><strong>3.</strong>&nbsp;<strong>StringBuffer(String str):&nbsp;</strong>It accepts a string<strong>&nbsp;</strong>argument that sets the initial contents of the StringBuffer object and reserves room for 16 more characters without reallocation.</p>
        <pre>StringBuffer s = <strong>new </strong>StringBuffer("GeeksforGeeks");</pre>
        <p><strong>Methods of StringBuffer class&nbsp;</strong></p>
        <figure class="table">
        <table>
        <thead>
        <tr>
        <th><strong>Methods</strong></th>
        <th><strong>Action Performed</strong></th>
        </tr>
        </thead>
        <tbody>
        <tr>
        <td>append()</td>
        <td>Used to add text at the end of the existing text.</td>
        </tr>
        <tr>
        <td>length()</td>
        <td>The length of a StringBuffer can be found by the length( ) method</td>
        </tr>
        <tr>
        <td>capacity()</td>
        <td>the total&nbsp;allocated capacity can be found by the capacity( ) method</td>
        </tr>
        <tr>
        <td>charAt()</td>
        <td>&nbsp;</td>
        </tr>
        <tr>
        <td>delete()</td>
        <td>Deletes a sequence of characters from the invoking object</td>
        </tr>
        <tr>
        <td>deleteCharAt()</td>
        <td>Deletes the character at the index specified by&nbsp;<em>loc</em></td>
        </tr>
        <tr>
        <td>ensureCapacity()</td>
        <td>Ensures capacity is at least equals to the given minimum.</td>
        </tr>
        <tr>
        <td>insert()</td>
        <td>Inserts text at the specified index position</td>
        </tr>
        <tr>
        <td>length()</td>
        <td>Returns length of the string &nbsp;</td>
        </tr>
        <tr>
        <td>reverse()</td>
        <td>Reverse the characters within a StringBuffer object</td>
        </tr>
        <tr>
        <td>replace()</td>
        <td>Replace one set of characters with another set inside a StringBuffer object</td>
        </tr>
        </tbody>
        </table>
        </figure>
        <blockquote>
        <p><strong>Note:</strong>&nbsp;Besides that, all the methods that are used in the String class can also be used. These auxiliary methods are as follows:</p>
        </blockquote>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-ensurecapacity-method-in-java-with-examples/"><strong>ensureCapacity()</strong></a></li>
        </ul>
        <p>It is used to increase the capacity of a StringBuffer object. The new capacity will be set to either the value we specify or twice the current capacity plus two (i.e. capacity+2), whichever is larger.&nbsp;Here, capacity specifies the size of the buffer.</p>
        <p><strong>Syntax:</strong></p>
        <pre>void ensureCapacity(int&nbsp;capacity)</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-appendcodepoint-method-in-java/"><strong>appendCodePoint(int codePoint)</strong></a><strong>:</strong>&nbsp;This method appends the string representation of the codePoint argument to this sequence.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public StringBuffer appendCodePoint(int codePoint)</pre>
        <ul>
        <li><strong>charAt(int index)</strong></li>
        </ul>
        <p>This method returns the char value in this sequence at the specified index.</p>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public char charAt(int index)</pre>
        <ul>
        <li><strong>IntStream chars()</strong>: This method returns a stream of int zero-extending the char values from this sequence.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public IntStream chars()</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-codepointat-method-in-java-with-examples/"><strong>int codePointAt(int index)</strong></a>: This method returns the character (Unicode code point) at the specified index.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public int codePointAt(int index)</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-codepointbefore-method-in-java-with-examples/"><strong>int codePointBefore(int index)</strong></a>: This method returns the character (Unicode code point) before the specified index.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public int codePointBefore(int index)</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-codepointcount-method-in-java-with-examples/"><strong>int codePointCount(int beginIndex, int endIndex)</strong></a>: This method returns the number of Unicode code points in the specified text range of this sequence.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public int codePointCount(int beginIndex, int endIndex)</pre>
        <ul>
        <li><strong>IntStream codePoints()</strong>: This method returns a stream of code point values from this sequence.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public IntStream codePoints()</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-getchars-method-in-java-with-examples/"><strong>void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</strong></a>: In this method, the characters are copied from this sequence into the destination character array dst.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-indexof-method-in-java-with-examples/"><strong>int indexOf(String str)</strong></a>: This method returns the index within this string of the first occurrence of the specified substring.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public int indexOf(String str)
        public int indexOf(String str, int fromIndex)</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-lastindexof-method-in-java-with-examples/"><strong>int lastIndexOf(String str)</strong></a>: This method returns the index within this string of the last occurrence of the specified substring.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public int lastIndexOf(String str)
        public int lastIndexOf(String str, int fromIndex)</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-offsetbycodepoints-method-in-java-with-examples/"><strong>int offsetByCodePoints(int index, int codePointOffset)</strong></a>: This method returns the index within this sequence that is offset from the given index by codePointOffset code points.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public int offsetByCodePoints(int index, int codePointOffset) </pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-setcharat-method-in-java-with-examples/"><strong>void setCharAt(int index, char ch)</strong></a>: In this method, the character at the specified index is set to ch.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public void setCharAt(int index, char ch)</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-setlength-in-java-with-examples/"><strong>void setLength(int newLength)</strong></a>: This method sets the length of the character sequence.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public void setLength(int newLength)</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-subsequence-in-java-with-examples/"><strong>CharSequence subSequence(int start, int end)</strong></a>: This method returns a new character sequence that is a subsequence of this sequence.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public CharSequence subSequence(int start, int end)</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-substring-method-in-java-with-examples/"><strong>String substring(int start)</strong></a>: This method returns a new String that contains a subsequence of characters currently contained in this character sequence.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public String substring(int start)
        public String substring(int start,int end)</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-tostring-method-in-java-with-examples/"><strong>String toString()</strong></a>: This method returns a string representing the data in this sequence.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public String toString()</pre>
        <ul>
        <li><a href="https://www.geeksforgeeks.org/stringbuffer-trimtosize-method-in-java-with-examples/"><strong>void trimToSize()</strong></a>: This method attempts to reduce storage used for the character sequence.</li>
        </ul>
        <p><strong>Syntax:</strong>&nbsp;</p>
        <pre>public void trimToSize()</pre>
        <blockquote>
        <p>Above we only have discussed the most widely used methods and do keep a tight bound around them as they are widely used in programming geeks.</p>
        </blockquote>
        <p><strong>Implementation:</strong>&nbsp;</p>
        <p><strong>Example 1:</strong><em><strong>&nbsp;</strong>length() and capacity()</em>&nbsp;Methods</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_509222" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate StringBuffer class</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// via length() and capacity() methods</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing I/O classes</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// Main class</code></div>
        <div class="line number8 index7 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// main driver method</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating adn storing string by creating object of</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// StringBuffer</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">StringBuffer s = </code><code class="keyword">new</code> <code class="plain">StringBuffer(</code><code class="string">"GeeksforGeeks"</code><code class="plain">);</code></div>
        <div class="line number17 index16 alt2">&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Getting the length of the string</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">p = s.length();</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Getting the capacity of the string</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">q = s.capacity();</code></div>
        <div class="line number23 index22 alt2">&nbsp;</div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing the length and capacity of</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// above generated input string on console</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Length of string GeeksforGeeks="</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ p);</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Capacity of string GeeksforGeeks="</code> <code class="plain">+ q);</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number31 index30 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Length of string GeeksforGeeks=13
        Capacity of string GeeksforGeeks=29</pre>
        </div>
        <p><strong>Example 2:&nbsp;</strong><a href="https://www.geeksforgeeks.org/stringbuffer-append-method-in-java-with-examples/"><strong>append()</strong></a><strong>&nbsp;</strong></p>
        <p>It is used to add text at the end of the existing text.&nbsp;</p>
        <p>Here are a few of its forms:&nbsp;</p>
        <pre>StringBuffer append(String str)
        StringBuffer append(int&nbsp;num)</pre>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_117605" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate StringBuffer class</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// via append() method</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing required classes</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// Main class</code></div>
        <div class="line number8 index7 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating an object of StringBuffer class and</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// passing random string</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">StringBuffer s = </code><code class="keyword">new</code> <code class="plain">StringBuffer(</code><code class="string">"Geeksfor"</code><code class="plain">);</code></div>
        <div class="line number16 index15 alt1">&nbsp;</div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Usage of append() method</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.append(</code><code class="string">"Geeks"</code><code class="plain">);</code></div>
        <div class="line number19 index18 alt2">&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns GeeksforGeeks</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s);</code></div>
        <div class="line number22 index21 alt1">&nbsp;</div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.append(</code><code class="value">1</code><code class="plain">);</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns GeeksforGeeks1</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s);</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number27 index26 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>GeeksforGeeks
        GeeksforGeeks1</pre>
        </div>
        <p><strong>Example 3:&nbsp;</strong><a href="https://www.geeksforgeeks.org/stringbuffer-insert-java/"><strong>insert()</strong></a></p>
        <p>It is used to insert text at the specified index position.&nbsp;</p>
        <p><strong>Syntax:</strong>&nbsp;These are a few of its as follows:</p>
        <pre>StringBuffer insert(int&nbsp;index, String str)
        StringBuffer insert(int&nbsp;index, char ch)</pre>
        <p>Here, the&nbsp;<em>index&nbsp;</em>specifies the index at which point the string will be inserted into the invoking<strong>&nbsp;StringBuffer&nbsp;</strong>object.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist3-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist3-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_48500" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate StringBuffer class</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// via insert() method</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing required I/O classes</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// Main class</code></div>
        <div class="line number8 index7 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating an object of StringBuffer class</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">StringBuffer s = </code><code class="keyword">new</code> <code class="plain">StringBuffer(</code><code class="string">"GeeksGeeks"</code><code class="plain">);</code></div>
        <div class="line number15 index14 alt2">&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Inserting element and position as an arguments</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.insert(</code><code class="value">5</code><code class="plain">, </code><code class="string">"for"</code><code class="plain">);</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns GeeksforGeeks</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s);</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.insert(</code><code class="value">0</code><code class="plain">, </code><code class="value">5</code><code class="plain">);</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns 5GeeksforGeeks</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s);</code></div>
        <div class="line number24 index23 alt1">&nbsp;</div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.insert(</code><code class="value">3</code><code class="plain">, </code><code class="keyword">true</code><code class="plain">);</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns 5GetrueeksforGeeks</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s);</code></div>
        <div class="line number28 index27 alt1">&nbsp;</div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.insert(</code><code class="value">5</code><code class="plain">, </code><code class="value">41</code><code class="plain">.35d);</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns 5Getr41.35ueeksforGeeks</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s);</code></div>
        <div class="line number32 index31 alt1">&nbsp;</div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.insert(</code><code class="value">8</code><code class="plain">, </code><code class="value">41</code><code class="plain">.35f);</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns 5Getr41.41.3535ueeksforGeeks</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s);</code></div>
        <div class="line number36 index35 alt1">&nbsp;</div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Declaring and initializing character array</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">char</code> <code class="plain">geeks_arr[] = { </code><code class="string">'p'</code><code class="plain">, </code><code class="string">'a'</code><code class="plain">, </code><code class="string">'w'</code><code class="plain">, </code><code class="string">'a'</code><code class="plain">, </code><code class="string">'n'</code> <code class="plain">};</code></div>
        <div class="line number39 index38 alt2">&nbsp;</div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Inserting character array at offset 9</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.insert(</code><code class="value">2</code><code class="plain">, geeks_arr);</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns 5Gpawanetr41.41.3535ueeksforGeeks</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s);</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number45 index44 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output:</strong>&nbsp;
        <pre>GeeksforGeeks
        5GeeksforGeeks
        5GetrueeksforGeeks
        5Getr41.35ueeksforGeeks
        5Getr41.41.3535ueeksforGeeks
        5Gpawanetr41.41.3535ueeksforGeeks</pre>
        <p>&nbsp;</p>
        </div>
        <p><strong>Example 4:</strong>&nbsp;<a href="https://www.geeksforgeeks.org/stringbuffer-reverse-method-in-java/"><strong>reverse( )</strong></a></p>
        <p>It can reverse the characters within a StringBuffer object using&nbsp;<strong>reverse( ).</strong>&nbsp;This method returns the reversed object on which it was called.<strong>&nbsp;</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist4-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist4-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_800908" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate StringBuffer class</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// via reverse() method</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing I/O classes</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// Main class</code></div>
        <div class="line number8 index7 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating a string via creating</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// object of StringBuffer class</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">StringBuffer s = </code><code class="keyword">new</code> <code class="plain">StringBuffer(</code><code class="string">"GeeksGeeks"</code><code class="plain">);</code></div>
        <div class="line number16 index15 alt1">&nbsp;</div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Invoking reverse() method</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.reverse();</code></div>
        <div class="line number19 index18 alt2">&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns "skeeGrofskeeG"</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s);</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>skeeGskeeG</pre>
        </div>
        <p><strong>Example 5:&nbsp;</strong><a href="https://www.geeksforgeeks.org/stringbuffer-delete-method-in-java-with-examples/"><strong>delete( )</strong></a><strong>&nbsp;and&nbsp;</strong><a href="https://www.geeksforgeeks.org/stringbuffer-deletecharat-method-in-java/"><strong>deleteCharAt()</strong></a></p>
        <p>It can delete characters within a StringBuffer by using the methods&nbsp;<strong>delete( )&nbsp;</strong>and&nbsp;<strong>deleteCharAt( )</strong>.The&nbsp;<strong>delete( )&nbsp;</strong>method deletes a sequence of characters from the invoking object. Here, the start Index&nbsp;specifies the index of the first character to remove, and the end Index&nbsp;specifies an index one past the last character to remove. Thus, the substring deleted runs from start Index&nbsp;to endIndex&ndash;1. The resulting StringBuffer object is returned. The &nbsp;&nbsp;<strong>deleteCharAt( )&nbsp;</strong>method deletes the character at the index specified by&nbsp;<em>loc.&nbsp;</em>It returns the resulting StringBuffer object.</p>
        <p><strong>Syntax:</strong></p>
        <pre>StringBuffer delete(int&nbsp;startIndex, int&nbsp;endIndex)
        StringBuffer deleteCharAt(int loc)</pre>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist5-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist5-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_975024" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate StringBuffer class</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// via delete() and deleteCharAt() Methods</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing I/O classes</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// Main class</code></div>
        <div class="line number8 index7 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">StringBuffer s = </code><code class="keyword">new</code> <code class="plain">StringBuffer(</code><code class="string">"GeeksforGeeks"</code><code class="plain">);</code></div>
        <div class="line number14 index13 alt1">&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.delete(</code><code class="value">0</code><code class="plain">, </code><code class="value">5</code><code class="plain">);</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns forGeeks</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s);</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.deleteCharAt(</code><code class="value">7</code><code class="plain">);</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns forGeek</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s);</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>forGeeks
        forGeek</pre>
        </div>
        <p><strong>Example 6:</strong>&nbsp;<a href="https://www.geeksforgeeks.org/stringbuffer-replace-method-in-java-with-examples/"><strong>replace()</strong></a></p>
        <p>It can replace one set of characters with another set inside a StringBuffer object by calling&nbsp;replace( ). The substring being replaced is specified by the indexes start Index&nbsp;and endIndex. Thus, the substring at start Index&nbsp;through endIndex&ndash;1 is replaced. The replacement string is passed in str. The resulting StringBuffer object is returned.</p>
        <p><strong>Syntax:</strong></p>
        <pre>StringBuffer replace(int startIndex, int endIndex, String str)</pre>
        <p><strong>Example</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist6-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist6-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_732356" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate StringBuffer class</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// via replace() method</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing I/O classes</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// Main class</code></div>
        <div class="line number8 index7 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">StringBuffer s = </code><code class="keyword">new</code> <code class="plain">StringBuffer(</code><code class="string">"GeeksforGeeks"</code><code class="plain">);</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.replace(</code><code class="value">5</code><code class="plain">, </code><code class="value">8</code><code class="plain">, </code><code class="string">"are"</code><code class="plain">);</code></div>
        <div class="line number15 index14 alt2">&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns GeeksareGeeks</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s);</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number19 index18 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>GeeksareGeeks</pre>
        </div>
        <p>&nbsp;</p>`,
    },
    {
        topic: "OOPS in Java",
        content: `<h1 class="h1">Java OOPs Concepts</h1>
        <div id="upr">
        <ol>
        <li>Object-Oriented Programming</li>
        <li>Advantage of OOPs over Procedure-oriented programming language</li>
        <li>Difference between Object-oriented and Object-based programming language.</li>
        </ol>
        </div>
        <p>In this page, we will learn about the basics of OOPs. Object-Oriented Programming is a paradigm that provides many concepts, such as&nbsp;<strong>inheritance</strong>,&nbsp;<strong>data binding</strong>,&nbsp;<strong>polymorphism</strong>, etc.</p>
        <p><strong>Simula</strong>&nbsp;is considered the first object-oriented programming language. The programming paradigm where everything is represented as an object is known as a truly object-oriented programming language.</p>
        <p><strong>Smalltalk</strong>&nbsp;is considered the first truly object-oriented programming language.</p>
        <p>The popular object-oriented languages are&nbsp;Java,&nbsp;C#,&nbsp;PHP,&nbsp;Python,&nbsp;C++, etc.</p>
        <p>The main aim of object-oriented programming is to implement real-world entities, for example, object, classes, abstraction, inheritance, polymorphism, etc.</p>
        <h2 id="oops" class="h2">OOPs (Object-Oriented Programming System)</h2>
        <p><strong>Object</strong>&nbsp;means a real-world entity such as a pen, chair, table, computer, watch, etc.&nbsp;<strong>Object-Oriented Programming</strong>&nbsp;is a methodology or paradigm to design a program using classes and objects. It simplifies software development and maintenance by providing some concepts:</p>
        <ul class="points">
        <li>Object</li>
        <li>Class</li>
        <li>Inheritance</li>
        <li>Polymorphism</li>
        <li>Abstraction</li>
        <li>Encapsulation</li>
        </ul>
        <p>Apart from these concepts, there are some other terms which are used in Object-Oriented design:</p>
        <ul class="points">
        <li>Coupling</li>
        <li>Cohesion</li>
        <li>Association</li>
        <li>Aggregation</li>
        <li>Composition</li>
        </ul>
        <p><img src="https://static.javatpoint.com/images/java-oops.png" alt="Java OOPs Concepts" />&nbsp;<ins class="adsbygoogle cm_jtp_wtc_responsive" data-ad-client="ca-pub-4699858549023382" data-ad-slot="6746133113" data-adsbygoogle-status="done" data-ad-status="filled"><ins id="aswift_0_expand" tabindex="0" title="Advertisement"><ins id="aswift_0_anchor"></ins></ins></ins></p>
        <h2 class="h3">Object</h2>
        <p><img class="imageright" src="https://static.javatpoint.com/images/objects.png" alt="Java Object" /></p>
        <p>Any entity that has state and behavior is known as an object. For example, a chair, pen, table, keyboard, bike, etc. It can be physical or logical.</p>
        <p>An Object can be defined as an instance of a class. An object contains an address and takes up some space in memory. Objects can communicate without knowing the details of each other's data or code. The only necessary thing is the type of message accepted and the type of response returned by the objects.</p>
        <p><strong>Example:</strong>&nbsp;A dog is an object because it has states like color, name, breed, etc. as well as behaviors like wagging the tail, barking, eating, etc.</p>
        <h2 class="h3">Class</h2>
        <p><em>Collection of objects</em>&nbsp;is called class. It is a logical entity.</p>
        <p>A class can also be defined as a blueprint from which you can create an individual object. Class doesn't consume any space.</p>
        <h3 class="h3">Inheritance</h3>
        <p><em>When one object acquires all the properties and behaviors of a parent object</em>, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.</p>
        <p><img class="imageright" src="https://static.javatpoint.com/images/polymorphism.gif" alt="Polymorphism in Java" width="250" height="250" /></p>
        <h3 class="h3">Polymorphism</h3>
        <p>If&nbsp;<em>one task is performed in different ways</em>, it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc.</p>
        <p>In Java, we use method overloading and method overriding to achieve polymorphism.</p>
        <p>Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.</p>
        <h4 class="h3">Abstraction</h4>
        <p><em>Hiding internal details and showing functionality</em>&nbsp;is known as abstraction. For example phone call, we don't know the internal processing.</p>
        <p>In Java, we use abstract class and interface to achieve abstraction.</p>
        <p><img class="imageright" src="https://static.javatpoint.com/images/capsule.png" alt="Encapsulation in Java OOPs Concepts" width="200" height="100" /></p>
        <h3 class="h3">Encapsulation</h3>
        <p><em>Binding (or wrapping) code and data together into a single unit are known as encapsulation</em>. For example, a capsule, it is wrapped with different medicines.</p>
        <p>A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private here.</p>
        <h3 class="h3">Coupling</h3>
        <p>Coupling refers to the knowledge or information or dependency of another class. It arises when classes are aware of each other. If a class has the details information of another class, there is strong coupling. In Java, we use private, protected, and public modifiers to display the visibility level of a class, method, and field. You can use interfaces for the weaker coupling because there is no concrete implementation.</p>
        <h3 class="h3">Cohesion</h3>
        <p>Cohesion refers to the level of a component which performs a single well-defined task. A single well-defined task is done by a highly cohesive method. The weakly cohesive method will split the task into separate parts. The java.io package is a highly cohesive package because it has I/O related classes and interface. However, the java.util package is a weakly cohesive package because it has unrelated classes and interfaces.</p>
        <h3 class="h3">Association</h3>
        <p>Association represents the relationship between the objects. Here, one object can be associated with one object or many objects. There can be four types of association between the objects:</p>
        <ul class="points">
        <li>One to One</li>
        <li>One to Many</li>
        <li>Many to One, and</li>
        <li>Many to Many</li>
        </ul>
        <p>Let's understand the relationship with real-time examples. For example, One country can have one prime minister (one to one), and a prime minister can have many ministers (one to many). Also, many MP's can have one prime minister (many to one), and many ministers can have many departments (many to many).</p>
        <p>Association can be undirectional or bidirectional.</p>
        <h3 class="h3">Aggregation</h3>
        <p>Aggregation is a way to achieve Association. Aggregation represents the relationship where one object contains other objects as a part of its state. It represents the weak relationship between objects. It is also termed as a&nbsp;<em>has-a</em>&nbsp;relationship in Java. Like, inheritance represents the&nbsp;<em>is-a</em>&nbsp;relationship. It is another way to reuse objects.</p>
        <h3 class="h3">Composition</h3>
        <p>The composition is also a way to achieve Association. The composition represents the relationship where one object contains other objects as a part of its state. There is a strong relationship between the containing object and the dependent object. It is the state where containing objects do not have an independent existence. If you delete the parent object, all the child objects will be deleted automatically.</p>
        <hr />
        <h2 class="h2">Advantage of OOPs over Procedure-oriented programming language</h2>
        <p>1) OOPs makes development and maintenance easier, whereas, in a procedure-oriented programming language, it is not easy to manage if code grows as project size increases.</p>
        <p>2) OOPs provides data hiding, whereas, in a procedure-oriented programming language, global data can be accessed from anywhere.</p>
        <p><img src="https://static.javatpoint.com/images/globaldata2.png" alt="Global Data" /></p>
        <p>Figure: Data Representation in Procedure-Oriented Programming</p>
        <p><br /><img src="https://static.javatpoint.com/images/objectdata2.png" alt="Object Data" /></p>
        <p>Figure: Data Representation in Object-Oriented Programming</p>
        <p>3) OOPs provides the ability to simulate real-world event much more effectively. We can provide the solution of real word problem if we are using the Object-Oriented Programming language.</p>
        <hr />
        <h2 class="h3">What is the difference between an object-oriented programming language and object-based programming language?</h2>
        <p>Object-based programming language follows all the features of OOPs except Inheritance. JavaScript and VBScript are examples of object-based programming languages.</p>
        
        

<p>As the name suggests,&nbsp;Object-Oriented Programming&nbsp;or OOPs refers to languages that uses objects in programming. Object-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism etc in programming. The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function.&nbsp;</p>
<p>Let us do discuss pre-requisites by polishing concepts of methods declaration and passing. Starting off with the method declaration, it consists of six components:&nbsp;</p>
<ul>
<li><strong>Access Modifier</strong>: Defines&nbsp;<strong>access type</strong>&nbsp;of the method i.e. from where it can be accessed in your application. In Java, there 4 type of the access specifiers.&nbsp;
<ul>
<li><strong>public:</strong>&nbsp;accessible in all class in your application.</li>
<li><strong>protected:</strong>&nbsp;accessible within the package in which it is defined and in its&nbsp;<strong>subclass(es)(including subclasses declared outside the package)</strong></li>
<li><strong>private:</strong>&nbsp;accessible only within the class in which it is defined.</li>
<li><strong>default (declared/defined without using any modifier):</strong>&nbsp;accessible within same class and package within which its class is defined.</li>
</ul>
</li>
<li><strong>The return type</strong>: The data type of the value returned by the method or void if does not return a value.</li>
<li><strong>Method Name</strong>: the rules for field names apply to method names as well, but the convention is a little different.</li>
<li><strong>Parameter list</strong>: Comma separated list of the input parameters are defined, preceded with their data type, within the enclosed parenthesis. If there are no parameters, you must use empty parentheses ().</li>
<li><strong>Exception list</strong>: The exceptions you expect by the method can throw, you can specify these exception(s).</li>
<li><strong>Method body</strong>: it is enclosed between braces. The code you need to be executed to perform your intended operations.</li>
</ul>
<p><strong>Message Passing</strong><strong>:</strong>&nbsp;Objects communicate with one another by sending and receiving information to each other. A message for an object is a request for execution of a procedure and therefore will invoke a function in the receiving object that generates the desired results. Message passing involves specifying the name of the object, the name of the function and the information to be sent.</p>
<p>Now with basic prerequisite to step learning 4 pillar of OOPS is as follows. Let us start with learning about the different characteristics of an Object-Oriented Programming language</p>
<p>OOPs Concepts are as follows:&nbsp;</p>
<div id="AP_G4GR_5">&nbsp;</div>
<ol>
<li>Class</li>
<li>Object&nbsp;</li>
<li>Method and&nbsp;method passing</li>
<li>Pillars of OOPS
<ul>
<li>Abstraction</li>
<li>Encapsulation</li>
<li>Inheritance</li>
<li>Polymorphism<br />
<ul>
<li>Compile-time polymorphism</li>
<li>Run-time polymorphism</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/20190717114649/Object-Oriented-Programming-Concepts.jpg" alt="" width="500" height="500" /></p>
<p>A&nbsp;class&nbsp;is a user defined blueprint or prototype from which objects are created. It represents the set of properties or methods that are common to all objects of one type. In general, class declarations can include these components, in order:&nbsp;</p>
<ol>
<li><strong>Modifiers</strong>: A class can be public or has default access (Refer&nbsp;this&nbsp;for details).</li>
<li><strong>Class name:</strong>&nbsp;The name should begin with a initial letter (capitalized by convention).</li>
<li><strong>Superclass(if any):</strong>&nbsp;The name of the class&rsquo;s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.</li>
<li><strong>Interfaces(if any):</strong>&nbsp;A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface.</li>
<li><strong>Body:</strong>&nbsp;The class body surrounded by braces, { }.</li>
</ol>
<p><strong>Object</strong><strong>&nbsp;</strong>is a basic unit of Object Oriented Programming and represents the real life entities. A typical Java program creates many objects, which as you know, interact by invoking methods. An object consists of:&nbsp;</p>
<ol>
<li><strong>State&nbsp;</strong>: It is represented by attributes of an object. It also reflects the properties of an object.</li>
<li><strong>Behavior&nbsp;</strong>: It is represented by methods of an object. It also reflects the response of an object with other objects.</li>
<li><strong>Identity&nbsp;</strong>: It gives a unique name to an object and enables one object to interact with other objects.</li>
<li><strong>Method</strong><strong>:</strong>&nbsp;A method is a collection of statements that perform some specific task and return result to the caller. A method can perform some specific task without returning anything. Methods allow us to&nbsp;<strong>reuse</strong>&nbsp;the code without retyping the code. In Java, every method must be part of some class which is different from languages like C, C++ and Python.&nbsp;<br />Methods are&nbsp;<strong>time savers&nbsp;</strong>and help us to&nbsp;<strong>reuse</strong>&nbsp;the code without retyping the code.</li>
</ol>
<p>Let us now discuss 4 pillars of OOPS:</p>
<p><strong>Pillar 1:&nbsp;</strong>Abstraction</p>
<p>Data Abstraction is the property by virtue of which only the essential details are displayed to the user.The trivial or the non-essentials units are not displayed to the user. Ex: A car is viewed as a car rather than its individual components.<br />Data Abstraction may also be defined as the process of identifying only the required characteristics of an object ignoring the irrelevant details. The properties and behaviours of an object differentiate it from other objects of similar type and also help in classifying/grouping the objects.<br />Consider a real-life example of a man driving a car. The man only knows that pressing the accelerators will increase the speed of car or applying brakes will stop the car but he does not know about how on pressing the accelerator the speed is actually increasing, he does not know about the inner mechanism of the car or the implementation of accelerator, brakes etc in the car. This is what abstraction is.&nbsp;<br />In java, abstraction is achieved by&nbsp;interfaces&nbsp;and&nbsp;abstract classes. We can achieve 100% abstraction using interfaces.</p>
<p><strong>Pillar 2:</strong>&nbsp;Encapsulation</p>
<p>It is defined as the wrapping up of data under a single unit. It is the mechanism that binds together code and the data it manipulates. Another way to think about encapsulation is, it is a protective shield that prevents the data from being accessed by the code outside this shield.&nbsp;</p>
<ul>
<li>Technically in encapsulation, the variables or data of a class is hidden from any other class and can be accessed only through any member function of own class in which they are declared.</li>
<li>As in encapsulation, the data in a class is hidden from other classes, so it is also known as&nbsp;<strong>data-hiding</strong>.</li>
<li>Encapsulation can be achieved by Declaring all the variables in the class as private and writing public methods in the class to set and get the values of variables.</li>
</ul>
<p><strong>Pillar 3:</strong>&nbsp;Inheritence&nbsp;</p>
<p>Inheritance is an important pillar of OOP(Object Oriented Programming). It is the mechanism in java by which one class is allow to inherit the features(fields and methods) of another class.&nbsp;</p>
<p>Let us discuss some of frequent used important terminologies:</p>
<ul>
<li><strong>Super Class:&nbsp;</strong>The class whose features are inherited is known as superclass(or a base class or a parent class).</li>
<li><strong>Sub Class:</strong>&nbsp;The class that inherits the other class is known as subclass(or a derived class, extended class, or child class). The subclass can add its own fields and methods in addition to the superclass fields and methods.</li>
<li><strong>Reusability:&nbsp;</strong>Inheritance supports the concept of &ldquo;reusability&rdquo;, i.e. when we want to create a new class and there is already a class that includes some of the code that we want, we can derive our new class from the existing class. By doing this, we are reusing the fields and methods of the existing class.</li>
</ul>
<p><strong>Pillar 4:</strong>&nbsp;<strong>Polymorphism</strong></p>
<p>It refers to the ability of OOPs programming languages to differentiate between entities with the same name efficiently. This is done by Java with the help of the signature and declaration of these entities.&nbsp;</p>
<blockquote>
<p><strong>Note:</strong>&nbsp;Polymorphism in Java are mainly of 2 types:&nbsp;</p>
<ol>
<li>Overloading</li>
<li>Overriding&nbsp;</li>
</ol>
</blockquote>
<p>&nbsp;</p>
<div class="code-output">&nbsp;</div>`,
        content1: `<h1>Object Oriented Programming (OOPs) Concept in Java</h1>
        <p>As the name suggests,&nbsp;Object-Oriented Programming&nbsp;or OOPs refers to languages that uses objects in programming. Object-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism etc in programming. The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function.&nbsp;</p>
        <p>Let us do discuss pre-requisites by polishing concepts of methods declaration and passing. Starting off with the method declaration, it consists of six components:&nbsp;</p>
        <ul>
        <li><strong>Access Modifier</strong>: Defines&nbsp;<strong>access type</strong>&nbsp;of the method i.e. from where it can be accessed in your application. In Java, there 4 type of the access specifiers.&nbsp;
        <ul>
        <li><strong>public:</strong>&nbsp;accessible in all class in your application.</li>
        <li><strong>protected:</strong>&nbsp;accessible within the package in which it is defined and in its&nbsp;<strong>subclass(es)(including subclasses declared outside the package)</strong></li>
        <li><strong>private:</strong>&nbsp;accessible only within the class in which it is defined.</li>
        <li><strong>default (declared/defined without using any modifier):</strong>&nbsp;accessible within same class and package within which its class is defined.</li>
        </ul>
        </li>
        <li><strong>The return type</strong>: The data type of the value returned by the method or void if does not return a value.</li>
        <li><strong>Method Name</strong>: the rules for field names apply to method names as well, but the convention is a little different.</li>
        <li><strong>Parameter list</strong>: Comma separated list of the input parameters are defined, preceded with their data type, within the enclosed parenthesis. If there are no parameters, you must use empty parentheses ().</li>
        <li><strong>Exception list</strong>: The exceptions you expect by the method can throw, you can specify these exception(s).</li>
        <li><strong>Method body</strong>: it is enclosed between braces. The code you need to be executed to perform your intended operations.</li>
        </ul>
        <p><strong>Message Passing</strong><strong>:</strong>&nbsp;Objects communicate with one another by sending and receiving information to each other. A message for an object is a request for execution of a procedure and therefore will invoke a function in the receiving object that generates the desired results. Message passing involves specifying the name of the object, the name of the function and the information to be sent.</p>
        <p>Now with basic prerequisite to step learning 4 pillar of OOPS is as follows. Let us start with learning about the different characteristics of an Object-Oriented Programming language</p>
        <p>OOPs Concepts are as follows:&nbsp;</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <ol>
        <li>Class</li>
        <li>Object&nbsp;</li>
        <li>Method and&nbsp;method passing</li>
        <li>Pillars of OOPS
        <ul>
        <li>Abstraction</li>
        <li>Encapsulation</li>
        <li>Inheritance</li>
        <li>Polymorphism<br />
        <ul>
        <li>Compile-time polymorphism</li>
        <li>Run-time polymorphism</li>
        </ul>
        </li>
        </ul>
        </li>
        </ol>
        <p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/20190717114649/Object-Oriented-Programming-Concepts.jpg" alt="" width="500" height="500" /></p>
        <p>A&nbsp;class&nbsp;is a user defined blueprint or prototype from which objects are created. It represents the set of properties or methods that are common to all objects of one type. In general, class declarations can include these components, in order:&nbsp;</p>
        <ol>
        <li><strong>Modifiers</strong>: A class can be public or has default access (Refer&nbsp;this&nbsp;for details).</li>
        <li><strong>Class name:</strong>&nbsp;The name should begin with a initial letter (capitalized by convention).</li>
        <li><strong>Superclass(if any):</strong>&nbsp;The name of the class&rsquo;s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.</li>
        <li><strong>Interfaces(if any):</strong>&nbsp;A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface.</li>
        <li><strong>Body:</strong>&nbsp;The class body surrounded by braces, { }.</li>
        </ol>
        <p><strong>Object</strong><strong>&nbsp;</strong>is a basic unit of Object Oriented Programming and represents the real life entities. A typical Java program creates many objects, which as you know, interact by invoking methods. An object consists of:&nbsp;</p>
        <ol>
        <li><strong>State&nbsp;</strong>: It is represented by attributes of an object. It also reflects the properties of an object.</li>
        <li><strong>Behavior&nbsp;</strong>: It is represented by methods of an object. It also reflects the response of an object with other objects.</li>
        <li><strong>Identity&nbsp;</strong>: It gives a unique name to an object and enables one object to interact with other objects.</li>
        <li><strong>Method</strong><strong>:</strong>&nbsp;A method is a collection of statements that perform some specific task and return result to the caller. A method can perform some specific task without returning anything. Methods allow us to&nbsp;<strong>reuse</strong>&nbsp;the code without retyping the code. In Java, every method must be part of some class which is different from languages like C, C++ and Python.&nbsp;<br />Methods are&nbsp;<strong>time savers&nbsp;</strong>and help us to&nbsp;<strong>reuse</strong>&nbsp;the code without retyping the code.</li>
        </ol>
        <p>Let us now discuss 4 pillars of OOPS:</p>
        <p><strong>Pillar 1:&nbsp;</strong>Abstraction</p>
        <p>Data Abstraction is the property by virtue of which only the essential details are displayed to the user.The trivial or the non-essentials units are not displayed to the user. Ex: A car is viewed as a car rather than its individual components.<br />Data Abstraction may also be defined as the process of identifying only the required characteristics of an object ignoring the irrelevant details. The properties and behaviours of an object differentiate it from other objects of similar type and also help in classifying/grouping the objects.<br />Consider a real-life example of a man driving a car. The man only knows that pressing the accelerators will increase the speed of car or applying brakes will stop the car but he does not know about how on pressing the accelerator the speed is actually increasing, he does not know about the inner mechanism of the car or the implementation of accelerator, brakes etc in the car. This is what abstraction is.&nbsp;<br />In java, abstraction is achieved by&nbsp;interfaces&nbsp;and&nbsp;abstract classes. We can achieve 100% abstraction using interfaces.</p>
        <p><strong>Pillar 2:</strong>&nbsp;Encapsulation</p>
        <p>It is defined as the wrapping up of data under a single unit. It is the mechanism that binds together code and the data it manipulates. Another way to think about encapsulation is, it is a protective shield that prevents the data from being accessed by the code outside this shield.&nbsp;</p>
        <ul>
        <li>Technically in encapsulation, the variables or data of a class is hidden from any other class and can be accessed only through any member function of own class in which they are declared.</li>
        <li>As in encapsulation, the data in a class is hidden from other classes, so it is also known as&nbsp;<strong>data-hiding</strong>.</li>
        <li>Encapsulation can be achieved by Declaring all the variables in the class as private and writing public methods in the class to set and get the values of variables.</li>
        </ul>
        <p><strong>Pillar 3:</strong>&nbsp;Inheritence&nbsp;</p>
        <p>Inheritance is an important pillar of OOP(Object Oriented Programming). It is the mechanism in java by which one class is allow to inherit the features(fields and methods) of another class.&nbsp;</p>
        <p>Let us discuss some of frequent used important terminologies:</p>
        <ul>
        <li><strong>Super Class:&nbsp;</strong>The class whose features are inherited is known as superclass(or a base class or a parent class).</li>
        <li><strong>Sub Class:</strong>&nbsp;The class that inherits the other class is known as subclass(or a derived class, extended class, or child class). The subclass can add its own fields and methods in addition to the superclass fields and methods.</li>
        <li><strong>Reusability:&nbsp;</strong>Inheritance supports the concept of &ldquo;reusability&rdquo;, i.e. when we want to create a new class and there is already a class that includes some of the code that we want, we can derive our new class from the existing class. By doing this, we are reusing the fields and methods of the existing class.</li>
        </ul>
        <p><strong>Pillar 4:</strong>&nbsp;<strong>Polymorphism</strong></p>
        <p>It refers to the ability of OOPs programming languages to differentiate between entities with the same name efficiently. This is done by Java with the help of the signature and declaration of these entities.&nbsp;</p>
        <blockquote>
        <p><strong>Note:</strong>&nbsp;Polymorphism in Java are mainly of 2 types:&nbsp;</p>
        <ol>
        <li>Overloading</li>
        <li>Overriding&nbsp;</li>
        </ol>
        </blockquote>
        <p><strong>Example</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_241806" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to Demonstrate Polymorphism</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="comments">// This class will contain</code></div>
        <div class="line number4 index3 alt1"><code class="comments">// 3 methods with same name,</code></div>
        <div class="line number5 index4 alt2"><code class="comments">// yet the program will</code></div>
        <div class="line number6 index5 alt1"><code class="comments">// compile &amp; run successfully</code></div>
        <div class="line number7 index6 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Sum {</code></div>
        <div class="line number8 index7 alt1">&nbsp;</div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Overloaded sum().</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This sum takes two int parameters</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">sum(</code><code class="keyword">int</code> <code class="plain">x, </code><code class="keyword">int</code> <code class="plain">y)</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(x + y);</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number15 index14 alt2">&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Overloaded sum().</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This sum takes three int parameters</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">sum(</code><code class="keyword">int</code> <code class="plain">x, </code><code class="keyword">int</code> <code class="plain">y, </code><code class="keyword">int</code> <code class="plain">z)</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(x + y + z);</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number22 index21 alt1">&nbsp;</div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Overloaded sum().</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This sum takes two double parameters</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">double</code> <code class="plain">sum(</code><code class="keyword">double</code> <code class="plain">x, </code><code class="keyword">double</code> <code class="plain">y)</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(x + y);</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number29 index28 alt2">&nbsp;</div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Sum s = </code><code class="keyword">new</code> <code class="plain">Sum();</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s.sum(</code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">));</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s.sum(</code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">30</code><code class="plain">));</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s.sum(</code><code class="value">10.5</code><code class="plain">, </code><code class="value">20.5</code><code class="plain">));</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number38 index37 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output:</strong>&nbsp;
        <pre>30
                        60
                        31.0<br /><br /></pre>
        <h1>Classes and Objects in Java</h1>
        <p>Classes and Objects are basic concepts of Object Oriented Programming which revolve around the real life entities.</p>
        <h3>Class</h3>
        <p>A class is a user defined blueprint or prototype from which objects are created. &nbsp;It represents the set of properties or methods that are common to all objects of one type. In general, class declarations can include these components, in order:&nbsp;</p>
        <ol>
        <li><strong>Modifiers</strong>: A class can be public or has default access.</li>
        <li><strong>class keyword:&nbsp;</strong>class keyword is used to create a class.</li>
        <li><strong>Class name:</strong>&nbsp;The name should begin with an initial letter (capitalized by convention).</li>
        <li><strong>Superclass(if any):</strong>&nbsp;The name of the class&rsquo;s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.</li>
        <li><strong>Interfaces(if any):</strong>&nbsp;A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface.</li>
        <li><strong>Body:</strong>&nbsp;The class body&nbsp;surrounded by braces, { }.</li>
        </ol>
        <p>Constructors are used for initializing new objects. Fields are variables that provides the state of the class and its objects, and methods are used to implement the behavior of the class and its objects.<br />There are various types of classes that are used in real time applications such as&nbsp;nested classes,&nbsp;anonymous classes,&nbsp;lambda expressions.&nbsp;</p>
        <h3>Object</h3>
        <p>It is a basic unit of Object-Oriented Programming&nbsp;and represents the real life entities. &nbsp;A typical Java program creates many objects, which as you know, interact by invoking methods. An object consists of :&nbsp;</p>
        <ol>
        <li><strong>State</strong>: It is represented by attributes of an object. It also reflects the properties of an object.</li>
        <li><strong>Behavior</strong>: It is represented by methods of an object. It also reflects the response of an object with other objects.</li>
        <li><strong>Identity</strong>: It gives a unique name to an object and enables one object to interact with other objects.</li>
        </ol>
        <p>Example of an object: dog</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/Blank-Diagram-Page-1-5.png" alt="Blank Diagram - Page 1 (5)" width="800" height="600" /></p>
        <p>Objects correspond to things found in the real world. For example, a graphics program may have objects such as &ldquo;circle&rdquo;, &ldquo;square&rdquo;, &ldquo;menu&rdquo;. An online shopping system might have objects such as &ldquo;shopping cart&rdquo;, &ldquo;customer&rdquo;, and &ldquo;product&rdquo;.&nbsp;<br />&nbsp;</p>
        <h3>Declaring Objects (Also called instantiating a class)</h3>
        <p>When an object of a class is created, the class is said to be&nbsp;<strong>instantiated</strong>. All the instances share the attributes and the behavior of the class. But the values of those attributes, i.e. the state are unique for each object. A single class may have any number of instances.</p>
        <p>Example:&nbsp;</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/Blank-Diagram-Page-1-3.png" alt="Blank Diagram - Page 1 (3)" width="800" height="400" /></p>
        <p>As we declare variables like (type name;). This notifies the compiler that we will use name to refer to data whose type is type. With a primitive variable, this declaration also reserves the proper amount of memory for the variable. So for reference variable,&nbsp;type must be strictly a concrete class name. In general, we&nbsp;<strong>can&rsquo;t</strong>&nbsp;create objects of an abstract class or an interface.&nbsp;&nbsp;</p>
        <pre>Dog tuffy;</pre>
        <p>If we declare reference variable(tuffy) like this, its value will be undetermined(null) until an object is actually created and assigned to it. Simply declaring a reference variable does not create an object.<br />&nbsp;</p>
        <h3>Initializing an object</h3>
        <p>The new operator instantiates a class by allocating memory for a new object and returning a reference to that memory. The new operator also invokes the class&nbsp;constructor.&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_787291" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Class Declaration</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Dog</code></div>
        <div class="line number4 index3 alt1"><code class="plain">{</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Instance Variables</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String name;</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String breed;</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">age;</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String color;</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Constructor Declaration of Class</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">Dog(String name, String breed,</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">age, String color)</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.name = name;</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.breed = breed;</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.age = age;</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.color = color;</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// method 1</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">String getName()</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">name;</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number26 index25 alt1">&nbsp;</div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// method 2</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">String getBreed()</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">breed;</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number32 index31 alt1">&nbsp;</div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// method 3</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">getAge()</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">age;</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number38 index37 alt1">&nbsp;</div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// method 4</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">String getColor()</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">color;</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number44 index43 alt1">&nbsp;</div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1">@Override</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">String toString()</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code><code class="plain">(</code><code class="string">"Hi my name is "</code><code class="plain">+ </code><code class="keyword">this</code><code class="plain">.getName()+</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">".\nMy breed,age and color are "</code> <code class="plain">+</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.getBreed()+</code><code class="string">","</code> <code class="plain">+ </code><code class="keyword">this</code><code class="plain">.getAge()+</code></div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">","</code><code class="plain">+ </code><code class="keyword">this</code><code class="plain">.getColor());</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number53 index52 alt2">&nbsp;</div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Dog tuffy = </code><code class="keyword">new</code> <code class="plain">Dog(</code><code class="string">"tuffy"</code><code class="plain">,</code><code class="string">"papillon"</code><code class="plain">, </code><code class="value">5</code><code class="plain">, </code><code class="string">"white"</code><code class="plain">);</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(tuffy.toString());</code></div>
        <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number59 index58 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:&nbsp;</strong></p>
        <pre>Hi my name is tuffy.
                        My breed,age and color are papillon,5,white</pre>
        <ul>
        <li>This class contains a single constructor. We can recognize a constructor because its declaration uses the same name as the class and it has no return type. The Java compiler differentiates the constructors based on the number and the type of the arguments. The constructor in the&nbsp;<em>Dog</em>&nbsp;class takes four arguments. The following statement provides &ldquo;tuffy&rdquo;,&rdquo;papillon&rdquo;,5,&rdquo;white&rdquo; as values for those arguments:</li>
        </ul>
        <pre>Dog tuffy = new Dog("tuffy","papillon",5, "white");</pre>
        <ul>
        <li>The result of executing this statement can be illustrated as :</li>
        </ul>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/Untitled5.png" alt="Untitled" /></p>
        <p><strong>Note :&nbsp;</strong>All classes have at least&nbsp;<strong>one</strong>&nbsp;constructor. If a class does not explicitly declare any, the Java compiler automatically provides a no-argument constructor, also called the default constructor. This default constructor calls the class parent&rsquo;s no-argument constructor (as it contain only one statement i.e super();), or the&nbsp;<em>Object&nbsp;</em>class constructor if the class has no other parent (as Object class is parent of all classes either directly or indirectly).&nbsp;</p>
        <div id="extraAd">&nbsp;</div>
        <h3>Ways to create object of a class</h3>
        <p>There are four ways to create objects in java.Strictly speaking there is only one way(by using&nbsp;<em>new</em>&nbsp;keyword),and the rest internally use&nbsp;<em>new</em>&nbsp;keyword.&nbsp;</p>
        <ul>
        <li><strong>Using new keyword:</strong>&nbsp;It is the most common and general way to create object in java.&nbsp;Example:</li>
        </ul>
        <pre>// creating object of class Test
                        Test t = new Test();</pre>
        <ul>
        <li><strong>Using Class.forName(String className) method:</strong>&nbsp;There is a pre-defined class in java.lang package with name Class. The forName(String className) method returns the Class object associated with the class with the given string name.We have to give the fully qualified name for a class. On calling new Instance() method on this Class object returns new instance of the class with the given string name.</li>
        </ul>
        <pre>// creating object of public class Test
                        // consider class Test present in <em>com.p1</em> package
                        Test obj = (Test)Class.forName("com.p1.Test").newInstance();</pre>
        <ul>
        <li><strong>Using clone() method:</strong>&nbsp;clone() method is present in Object class. It creates and returns a copy of the object.</li>
        </ul>
        <pre>        
                        // creating object of class Test
                        Test t1 = new Test();
                        
                        // creating clone of above object
                        Test t2 = (Test)t1.clone();</pre>
        <ul>
        <li><strong>Deserialization:</strong>&nbsp;De-serialization is technique of reading an object from the saved state in a file.</li>
        </ul>
        <pre>            
                        FileInputStream file = new FileInputStream(filename);
                        ObjectInputStream in = new ObjectInputStream(file);
                        Object obj = in.readObject();</pre>
        <h3>Creating multiple objects by one type only (A good practice)&nbsp;</h3>
        <ul>
        <li>In real-time, we need different objects of a class in different methods. Creating a number of references for storing them is not a good practice&nbsp;and therefore we declare a static reference variable and use it whenever required. In this case, wastage of memory is less. The objects that are not referenced anymore will be destroyed by&nbsp;Garbage collector&nbsp;of java.&nbsp;Example:</li>
        </ul>
        <pre>          
                        Test test = new Test();
                        test = new Test();</pre>
        <ul>
        <li>In inheritance system, we use parent class reference variable to store a sub-class object. In this case, we can switch into different subclass objects using same referenced variable. Example:</li>
        </ul>
        <pre>class Animal {}
                        
                        class Dog extends Animal {}
                        class Cat extends Animal {}
                        
                        public class Test
                        {
                            // using Dog object
                            Animal obj = new Dog();
                        
                            // using Cat object
                            obj = new Cat();
                        }       </pre>
        <h3>Anonymous objects</h3>
        <p>Anonymous objects are the objects that are instantiated but are not stored in a reference variable.&nbsp;&nbsp;</p>
        <ul>
        <li>They are used for immediate method calling.</li>
        <li>They will be destroyed after method calling.</li>
        <li>They are widely used in different libraries. For example,&nbsp;in AWT libraries, they are used to perform some action on capturing an event(eg a key press).</li>
        <li>In the example below, when a key is button(referred by the btn) is pressed, we are simply creating anonymous object of EventHandler class for just calling handle method.</li>
        </ul>
        <pre>btn.setOnAction(new EventHandler()
                        {
                            public void handle(ActionEvent event)
                            {
                                System.out.println("Hello World!");
                            }
                        });<br /><br /></pre>
        <h1>Methods in Java</h1>
        <p>A&nbsp;<strong>method in Java</strong>&nbsp;or Java Method is a collection of statements that perform some specific task and return the result to the caller. A Java method can perform some specific task without returning anything. Methods in Java allow us to&nbsp;<strong>reuse</strong>&nbsp;the code without retyping the code. In Java, every method must be part of some class that is different from languages like C, C++, and Python.&nbsp;</p>
        <blockquote>
        <p><strong>Note:</strong>&nbsp;Methods are time savers and help us to reuse the code without retyping the code.&nbsp;</p>
        </blockquote>
        <h3>Method Declaration</h3>
        <p>In general, method declarations has six components :&nbsp;&nbsp;</p>
        <p><strong>1. Modifier:</strong>&nbsp;It defines the&nbsp;<strong>access type</strong>&nbsp;of the method i.e. from where it can be accessed in your application. In Java, there 4 types of access specifiers.&nbsp;</p>
        <ul>
        <li><strong>public:</strong>&nbsp;It is<strong>&nbsp;</strong>accessible in all classes in your application.</li>
        <li><strong>protected:</strong>&nbsp;It is accessible within the class in which it is defined and in its subclass/es</li>
        <li><strong>private:</strong>&nbsp;It is<strong>&nbsp;</strong>accessible only within the class in which it is defined.</li>
        <li><strong>default:</strong>&nbsp;It is declared/defined without using any modifier. It is accessible within the same class and package within which its class is defined.</li>
        </ul>
        <p><strong>2. The return type:</strong>&nbsp;The data type of the value returned by the method or void if does not return a value.</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p><strong>3. Method Name:</strong>&nbsp;the rules for field names apply to method names as well, but the convention is a little different.</p>
        <p><strong>4. Parameter list:</strong>&nbsp;Comma-separated list of the input parameters is defined, preceded with their data type, within the enclosed parenthesis. If there are no parameters, you must use empty parentheses ().</p>
        <p><strong>5. Exception list:</strong>&nbsp;The exceptions you expect by the method can throw, you can specify these exception(s).</p>
        <p><strong>6. Method body:</strong>&nbsp;it is enclosed between braces. The code you need to be executed to perform your intended operations.</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/methods-in-java.png" alt="methods in java" /></p>
        <h3>Types of Methods in Java</h3>
        <p>There are two types of methods in Java:</p>
        <p><strong>1. Predefined Method:</strong>&nbsp;In Java, predefined methods are the method that is already defined in the Java class libraries is known as predefined methods. It is also known as the&nbsp;<strong>standard library method</strong>&nbsp;or&nbsp;<strong>built-in method</strong>. We can directly use these methods just by calling them in the program at any point.&nbsp;</p>
        <p><strong>2. User-defined Method:&nbsp;</strong>The method written by the user or programmer is known as&nbsp;<strong>a user-defined</strong>&nbsp;method. These methods are modified according to the requirement.</p>
        <h3>Method Signature</h3>
        <p>It consists of the method name and a parameter list (number of parameters, type of the parameters, and order of the parameters). The return type and exceptions are not considered as part of it.&nbsp;</p>
        <p>Method Signature of above function:&nbsp;&nbsp;</p>
        <pre> max(int x, int y) Number of parameters is 2, Type of parameter is int.</pre>
        <h3>How to Name a Method?</h3>
        <p>A method name is typically a single word that should be a&nbsp;<strong>verb</strong>&nbsp;in lowercase or multi-word, that begins with a&nbsp;<strong>verb</strong>&nbsp;in lowercase followed by an&nbsp;<strong>adjective, noun&hellip;..&nbsp;</strong>After the first word, the first letter of each word should be capitalized.&nbsp;</p>
        <p><strong>Rules to Name a Method</strong></p>
        <ul>
        <li>While defining a method, remember that the method name must be a&nbsp;<strong>verb</strong>&nbsp;and start with a&nbsp;<strong>lowercase</strong>&nbsp;letter.</li>
        <li>If the method name has more than two words, the first name must be a verb followed by an adjective or noun.</li>
        <li>In the multi-word method name, the first letter of each word must be in&nbsp;<strong>uppercase</strong>&nbsp;except the first word. For example, findSum, computeMax, setX and getX.</li>
        </ul>
        <p>Generally, a method has a unique name within the class in which it is defined but sometimes a method might have the same name as other method names within the same class as&nbsp;method overloading is allowed in Java.</p>
        <h3>Method Calling</h3>
        <p>The method needs to be called for using its functionality. There can be three situations when a method is called:&nbsp;<br />A method returns to the code that invoked it when:&nbsp;&nbsp;</p>
        <ul>
        <li>It completes all the statements in the method</li>
        <li>It reaches a return statement</li>
        <li>Throws an exception</li>
        </ul>
        <p><strong>Example:</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_740029" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate Methods</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="comments">// Importing required classes</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number5 index4 alt2">&nbsp;</div>
        <div class="line number6 index5 alt1"><code class="comments">// Class 1</code></div>
        <div class="line number7 index6 alt2"><code class="comments">// Helper class</code></div>
        <div class="line number8 index7 alt1"><code class="keyword">class</code> <code class="plain">Addition {</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initially taking sum as 0</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// as we have not started computation</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum = </code><code class="value">0</code><code class="plain">;</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// To add two numbers</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">addTwoInt(</code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b)</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Adding two integer value</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">sum = a + b;</code></div>
        <div class="line number21 index20 alt2">&nbsp;</div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returning summation of two values</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">sum;</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number25 index24 alt2"><code class="plain">}</code></div>
        <div class="line number26 index25 alt1">&nbsp;</div>
        <div class="line number27 index26 alt2"><code class="comments">// Class 2</code></div>
        <div class="line number28 index27 alt1"><code class="comments">// Helper class</code></div>
        <div class="line number29 index28 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number30 index29 alt1">&nbsp;</div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number34 index33 alt1">&nbsp;</div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating object of class 1 inside main() method</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Addition add = </code><code class="keyword">new</code> <code class="plain">Addition();</code></div>
        <div class="line number37 index36 alt2">&nbsp;</div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling method of above class</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// to add two integer</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// using instance created</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">s = add.addTwoInt(</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">);</code></div>
        <div class="line number42 index41 alt1">&nbsp;</div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing the sum of two numbers</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Sum of two integer values :"</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ s);</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number47 index46 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p>&nbsp;<br />&nbsp;</p>
        <div class="code-output"><strong>Output</strong>
        <pre>Sum of two integer values :3</pre>
        </div>
        <p>&nbsp;</p>
        <p><strong>Example 2:</strong></p>
        <p>&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_405721" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate Method Calling</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Via Different Ways of Calling a Method</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing required classes</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// Class 1</code></div>
        <div class="line number8 index7 alt1"><code class="comments">// Helper class</code></div>
        <div class="line number9 index8 alt2"><code class="keyword">class</code> <code class="plain">Test {</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">;</code></div>
        <div class="line number12 index11 alt1">&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Constructor of class</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Test()</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number16 index15 alt1">&nbsp;</div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Counts the number of the objects of the class</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 1</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// To access static members of the class and</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// and for getting total no of objects</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// of the same class created so far</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">get()</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number27 index26 alt2">&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// statements to be executed....</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i;</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number31 index30 alt2">&nbsp;</div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 2</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Instance method calling object directly</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// that is created inside another class 'GFG'.</code></div>
        <div class="line number35 index34 alt2">&nbsp;</div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Can also be called by object directly created in the</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// same class and from another method defined in the</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// same class and return integer value as return type is</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// int.</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">m1()</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number42 index41 alt1">&nbsp;</div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Display message only</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Inside the method m1 by object of GFG class"</code><code class="plain">);</code></div>
        <div class="line number46 index45 alt1">&nbsp;</div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling m2() method within the same class.</code></div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.m2();</code></div>
        <div class="line number49 index48 alt2">&nbsp;</div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Statements to be executed if any</code></div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="value">1</code><code class="plain">;</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number53 index52 alt2">&nbsp;</div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 3</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns nothing</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">m2()</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number58 index57 alt1">&nbsp;</div>
        <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement</code></div>
        <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"In method m2 came from method m1"</code><code class="plain">);</code></div>
        <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number63 index62 alt2"><code class="plain">}</code></div>
        <div class="line number64 index63 alt1">&nbsp;</div>
        <div class="line number65 index64 alt2"><code class="comments">// Class 2</code></div>
        <div class="line number66 index65 alt1"><code class="comments">// Main class</code></div>
        <div class="line number67 index66 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number68 index67 alt1">&nbsp;</div>
        <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number72 index71 alt1">&nbsp;</div>
        <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating object of above class inside the class</code></div>
        <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Test obj = </code><code class="keyword">new</code> <code class="plain">Test();</code></div>
        <div class="line number75 index74 alt2">&nbsp;</div>
        <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling method 2 inside main() method</code></div>
        <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">i = obj.m1();</code></div>
        <div class="line number78 index77 alt1">&nbsp;</div>
        <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Display message only</code></div>
        <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Control returned after method m1 :"</code> <code class="plain">+ i);</code></div>
        <div class="line number82 index81 alt1">&nbsp;</div>
        <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Call m2() method</code></div>
        <div class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// obj.m2();</code></div>
        <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">no_of_objects = Test.get();</code></div>
        <div class="line number86 index85 alt1">&nbsp;</div>
        <div class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement</code></div>
        <div class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code></div>
        <div class="line number89 index88 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"No of instances created till now : "</code><code class="plain">);</code></div>
        <div class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(no_of_objects);</code></div>
        <div class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number93 index92 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p>&nbsp;<br />&nbsp;</p>
        <div class="code-output"><strong>Output</strong>
        <pre>Inside the method m1 by object of GFG class
                        In method m2 came from method m1
                        Control returned after method m1 :1
                        No of instances created till now : 1</pre>
        </div>
        <p>&nbsp;</p>
        <p>The control flow of the above program is as follows:</p>
        <p>&nbsp;</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/methods-in-java2.png" alt="methods in java" /></p>
        <p>&nbsp;</p>
        <h4>Memory Allocation for Methods Calls</h4>
        <p>&nbsp;</p>
        <p>Methods calls are implemented through a stack. Whenever a method is called a stack frame is created within the stack area and after that, the arguments passed to and the local variables and value to be returned by this called method are stored in this stack frame and when execution of the called method is finished, the allocated stack frame would be deleted. There is a stack pointer register that tracks the top of the stack&nbsp;which is adjusted accordingly.</p>
        <h1>Access Modifiers in Java</h1>
        <p>As the name suggests access modifiers in Java helps to restrict the scope of a class, constructor, variable, method, or data member. There are four types of access modifiers available in java:&nbsp;</p>
        <ol>
        <li>Default &ndash; No keyword required</li>
        <li>Private</li>
        <li>Protected</li>
        <li>Public</li>
        </ol>
        <p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/Access-Modifiers-in-Java.png" alt="access-modifiers-in-java" /></p>
        <ul>
        <li><strong>Default</strong>: When no access modifier is specified for a class, method, or data member &ndash; It is said to be having the&nbsp;<strong>default</strong>&nbsp;access modifier by default.&nbsp;
        <ul>
        <li>The data members, class or methods which are not declared using any access modifiers i.e. having default access modifier are accessible&nbsp;<strong>only within the same package</strong>.</li>
        </ul>
        </li>
        </ul>
        <p>In this example, we will create two packages and the classes in the packages will be having the default access modifiers and we will try to access a class from one package from a class of the second package.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_537914" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate default modifier&nbsp;</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">package</code> <code class="plain">p1;&nbsp;</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Class Geeks is having Default access modifier&nbsp;</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">Geek&nbsp;</code></div>
        <div class="line number6 index5 alt1"><code class="plain">{&nbsp;</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">display()&nbsp;</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{&nbsp;</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Hello World!"</code><code class="plain">);&nbsp;</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp;</code></div>
        <div class="line number11 index10 alt2"><code class="plain">}&nbsp;</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_325733" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate error while&nbsp;</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// using class from different package with&nbsp;</code></div>
        <div class="line number3 index2 alt2"><code class="comments">// default modifier&nbsp;</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">package</code> <code class="plain">p2;&nbsp;</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">p1.*;&nbsp;</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// This class is having default access modifier&nbsp;</code></div>
        <div class="line number8 index7 alt1"><code class="keyword">class</code> <code class="plain">GeekNew&nbsp;</code></div>
        <div class="line number9 index8 alt2"><code class="plain">{&nbsp;</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])&nbsp;</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{&nbsp;</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Accessing class Geek from package p1&nbsp;</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Geeks obj = </code><code class="keyword">new</code> <code class="plain">Geek();&nbsp;</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.display();&nbsp;</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp;</code></div>
        <div class="line number17 index16 alt2"><code class="plain">}&nbsp;</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>Compile time error</pre>
        <ul>
        <li><strong>Private</strong>: The private access modifier is specified using the keyword&nbsp;<strong>private</strong>.&nbsp;
        <ul>
        <li>The methods or data members declared as private are accessible only&nbsp;<strong>within the class</strong>&nbsp;in which they are declared.</li>
        <li>Any other&nbsp;<strong>class of&nbsp;</strong>the&nbsp;<strong>same package will not be able to access</strong>&nbsp;these members.</li>
        <li>Top-level classes or interfaces can not be declared as private because
        <ol>
        <li>private means &ldquo;only visible within the enclosing class&rdquo;.</li>
        <li>protected means &ldquo;only visible within the enclosing class and any subclasses&rdquo;</li>
        </ol>
        </li>
        </ul>
        </li>
        </ul>
        <p>Hence these modifiers in terms of application to classes, apply only to nested classes and not on top-level classes</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p>In this example, we will create two classes A and B within the same package p1. We will declare a method in class A as private and try to access this method from class B and see the result.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist3-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist3-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_233506" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate error while&nbsp;</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// using class from different package with&nbsp;</code></div>
        <div class="line number3 index2 alt2"><code class="comments">// private modifier&nbsp;</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">package</code> <code class="plain">p1;&nbsp;</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">A&nbsp;</code></div>
        <div class="line number7 index6 alt2"><code class="plain">{&nbsp;</code></div>
        <div class="line number8 index7 alt1"><code class="keyword">private</code> <code class="keyword">void</code> <code class="plain">display()&nbsp;</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{&nbsp;</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"GeeksforGeeks"</code><code class="plain">);&nbsp;</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp;</code></div>
        <div class="line number12 index11 alt1"><code class="plain">}&nbsp;</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="keyword">class</code> <code class="plain">B&nbsp;</code></div>
        <div class="line number15 index14 alt2"><code class="plain">{&nbsp;</code></div>
        <div class="line number16 index15 alt1"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])&nbsp;</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{&nbsp;</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">A obj = </code><code class="keyword">new</code> <code class="plain">A();&nbsp;</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Trying to access private method</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// of another class&nbsp;</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.display();&nbsp;</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp;</code></div>
        <div class="line number23 index22 alt2"><code class="plain">}&nbsp;</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>error: display() has private access in A
                                obj.display();</pre>
        <ul>
        <li><strong>protected</strong>: The protected access modifier is specified using the keyword&nbsp;<strong>protected</strong>.
        <ul>
        <li>The methods or data members declared as protected are&nbsp;<strong>accessible within the same package or subclasses in different packages.</strong></li>
        </ul>
        </li>
        </ul>
        <p>In this example, we will create two packages p1 and p2. Class A in p1 is made public, to access it in p2. The method display in class A is protected and class B is inherited from class A and this protected method is then accessed by creating an object of class B.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist4-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist4-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_175281" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate&nbsp;</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// protected modifier&nbsp;</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">package</code> <code class="plain">p1;&nbsp;</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="comments">// Class A&nbsp;</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">A&nbsp;</code></div>
        <div class="line number7 index6 alt2"><code class="plain">{&nbsp;</code></div>
        <div class="line number8 index7 alt1"><code class="keyword">protected</code> <code class="keyword">void</code> <code class="plain">display()&nbsp;</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{&nbsp;</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"GeeksforGeeks"</code><code class="plain">);&nbsp;</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp;</code></div>
        <div class="line number12 index11 alt1"><code class="plain">}&nbsp;</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist5-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist5-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_567107" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate&nbsp;</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// protected modifier&nbsp;</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">package</code> <code class="plain">p2;&nbsp;</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">p1.*; </code><code class="comments">// importing all classes in package p1&nbsp;</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number6 index5 alt1"><code class="comments">// Class B is subclass of A&nbsp;</code></div>
        <div class="line number7 index6 alt2"><code class="keyword">class</code> <code class="plain">B </code><code class="keyword">extends</code> <code class="plain">A&nbsp;</code></div>
        <div class="line number8 index7 alt1"><code class="plain">{&nbsp;</code></div>
        <div class="line number9 index8 alt2"><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])&nbsp;</code></div>
        <div class="line number10 index9 alt1"><code class="plain">{&nbsp;</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">B obj = </code><code class="keyword">new</code> <code class="plain">B();&nbsp;</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.display();&nbsp;</code></div>
        <div class="line number13 index12 alt2"><code class="plain">}&nbsp;</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="plain">}&nbsp;</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>GeeksforGeeks</pre>
        <ul>
        <li><strong>public</strong>: The public access modifier is specified using the keyword&nbsp;<strong>public</strong>.&nbsp;
        <ul>
        <li>The public access modifier has the&nbsp;<strong>widest scope</strong>&nbsp;among all other access modifiers.</li>
        <li>Classes, methods, or data members that are declared as public are&nbsp;<strong>accessible from everywhere</strong>&nbsp;in the program. There is no restriction on the scope of public data members.</li>
        </ul>
        </li>
        </ul>
        <div class="noIdeBtnDiv">
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist6-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist6-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_509776" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate&nbsp;</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// public modifier&nbsp;</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">package</code> <code class="plain">p1;&nbsp;</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">A&nbsp;</code></div>
        <div class="line number5 index4 alt2"><code class="plain">{&nbsp;</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">display()&nbsp;</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{&nbsp;</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"GeeksforGeeks"</code><code class="plain">);&nbsp;</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp;</code></div>
        <div class="line number10 index9 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="noIdeBtnDiv">
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist7-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist7-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_645258" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">package</code> <code class="plain">p2;</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">p1.*;</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">B {</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">A obj = </code><code class="keyword">new</code> <code class="plain">A;</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.display();</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number9 index8 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>GeeksforGeeks<br /><br /></pre>
        <p><strong>Important Points:</strong></p>
        <ul>
        <li>If other programmers use your class, try to use the most restrictive access level that makes sense for a particular member. Use private unless you have a good reason not to.</li>
        <li>Avoid public fields except for constants.</li>
        </ul>
        <h1>Wrapper Classes in Java</h1>
        <p>A Wrapper class is a class whose object wraps or contains primitive data types. When we create an object to a wrapper class, it contains a field and in this field, we can store primitive data types. In other words, we can wrap a primitive value into a wrapper class object.</p>
        <p align="center"><strong>Need of Wrapper Classes</strong></p>
        <ol>
        <li>They convert primitive data types into objects. Objects are needed if we wish to modify the arguments passed into a method (because primitive types are passed by value).</li>
        <li>The classes in java.util package handles only objects and hence wrapper classes help in this case also.</li>
        <li>Data structures in the Collection framework, such as&nbsp;ArrayList&nbsp;and&nbsp;Vector, store only objects (reference types) and not primitive types.</li>
        <li>An object is needed to support synchronization in multithreading.</li>
        </ol>
        <p align="center"><strong>Primitive Data types and their Corresponding Wrapper class</strong></p>
        <p><img class="aligncenter size-full wp-image-465504" src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200806191733/Wrapper-Class-in-Java.png" sizes="(max-width: 1000px) 100vw, 1000px" srcset="https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200806191733/Wrapper-Class-in-Java.png 1000w, https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200806191733/Wrapper-Class-in-Java-300x153.png 300w, https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200806191733/Wrapper-Class-in-Java-768x392.png 768w, https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200806191733/Wrapper-Class-in-Java-660x337.png 660w" alt="Wrapper-Class-in-Java" /></p>
        <p align="center"><strong>Autoboxing and Unboxing</strong></p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p><strong>Autoboxing:</strong>&nbsp;Automatic conversion of primitive types to the object of their corresponding wrapper classes is known as autoboxing. For example &ndash; conversion of int to Integer, long to Long, double to Double etc.<br />Example:</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_610854" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate Autoboxing</code></div>
        <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.util.ArrayList;</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Autoboxing</code></div>
        <div class="line number5 index4 alt2"><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">char</code> <code class="plain">ch = </code><code class="string">'a'</code><code class="plain">;</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Autoboxing- primitive to Character object conversion</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Character a = ch;</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ArrayList&lt;Integer&gt; arrayList = </code><code class="keyword">new</code> <code class="plain">ArrayList&lt;Integer&gt;();</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Autoboxing because ArrayList stores only objects</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arrayList.add(</code><code class="value">25</code><code class="plain">);</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// printing the values from object</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(arrayList.get(</code><code class="value">0</code><code class="plain">));</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number21 index20 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output:</p>
        <pre>25</pre>
        <p><strong>Unboxing:</strong>&nbsp;It is just the reverse process of autoboxing. Automatically converting an object of a wrapper class to its corresponding primitive type is known as unboxing. For example &ndash; conversion of Integer to int, Long to long, Double to double, etc.</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_761841" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate Unboxing</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.ArrayList;</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Unboxing</code></div>
        <div class="line number5 index4 alt2"><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Character ch = </code><code class="string">'a'</code><code class="plain">;</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// unboxing - Character object to primitive conversion</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">char</code> <code class="plain">a = ch;</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ArrayList&lt;Integer&gt; arrayList = </code><code class="keyword">new</code> <code class="plain">ArrayList&lt;Integer&gt;();</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">arrayList.add(</code><code class="value">24</code><code class="plain">);</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// unboxing because get method returns an Integer object</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">num = arrayList.get(</code><code class="value">0</code><code class="plain">);</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// printing the values from primitive data types</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(num);</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number22 index21 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output:</p>
        <pre>24</pre>
        <p><strong>Implementation</strong></p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_339974" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate Wrapping and UnWrapping</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// in Java Classes</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">WrappingUnwrapping</code></div>
        <div class="line number4 index3 alt1"><code class="plain">{</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//&nbsp; byte data type</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">byte</code> <code class="plain">a = </code><code class="value">1</code><code class="plain">;</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// wrapping around Byte object</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Byte byteobj = </code><code class="keyword">new</code> <code class="plain">Byte(a);</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// int data type</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">b = </code><code class="value">10</code><code class="plain">;</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//wrapping around Integer object</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Integer intobj = </code><code class="keyword">new</code> <code class="plain">Integer(b);</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// float data type</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">float</code> <code class="plain">c = </code><code class="value">18</code><code class="plain">.6f;</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// wrapping around Float object</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Float floatobj = </code><code class="keyword">new</code> <code class="plain">Float(c);</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// double data type</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">d = </code><code class="value">250.5</code><code class="plain">;</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Wrapping around Double object</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Double doubleobj = </code><code class="keyword">new</code> <code class="plain">Double(d);</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// char data type</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">char</code> <code class="plain">e=</code><code class="string">'a'</code><code class="plain">;</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// wrapping around Character object</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Character charobj=e;</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//&nbsp; printing the values from objects</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Values of Wrapper objects (printing as objects)"</code><code class="plain">);</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Byte object byteobj:&nbsp; "</code> <code class="plain">+ byteobj);</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Integer object intobj:&nbsp; "</code> <code class="plain">+ intobj);</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Float object floatobj:&nbsp; "</code> <code class="plain">+ floatobj);</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Double object doubleobj:&nbsp; "</code> <code class="plain">+ doubleobj);</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Character object charobj:&nbsp; "</code> <code class="plain">+ charobj);</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// objects to data types (retrieving data types from objects)</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// unwrapping objects to primitive data types</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">byte</code> <code class="plain">bv = byteobj;</code></div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">iv = intobj;</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">float</code> <code class="plain">fv = floatobj;</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">dv = doubleobj;</code></div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">char</code> <code class="plain">cv = charobj;</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// printing the values from data types</code></div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Unwrapped values (printing as data types)"</code><code class="plain">);</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"byte value, bv: "</code> <code class="plain">+ bv);</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"int value, iv: "</code> <code class="plain">+ iv);</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"float value, fv: "</code> <code class="plain">+ fv);</code></div>
        <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"double value, dv: "</code> <code class="plain">+ dv);</code></div>
        <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"char value, cv: "</code> <code class="plain">+ cv);</code></div>
        <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number61 index60 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>Values of Wrapper objects (printing as objects)
                        Byte object byteobj:  1
                        Integer object intobj:  10
                        Float object floatobj:  18.6
                        Double object doubleobj:  250.5
                        Character object charobj: a
                        Unwrapped values (printing as data types)
                        byte value, bv: 1
                        int value, iv: 10
                        float value, fv: 18.6
                        double value, dv: 250.5
                        char value, cv: a<br /><br /></pre>
        <h1>Need of Wrapper Classes in Java</h1>
        <p>Firstly the question that hits the programmers is when we have primitive data types then why does there arise a need for the concept of wrapper classes in java. It is because of the additional features been there in the Wrapper class over the primitive data types when it comes to usage. These methods do include primarily methods like&nbsp;valueOf<em>()</em>,&nbsp;parseInt<em>()</em>,&nbsp;toString<em>()</em>, and many more.</p>
        <p>A wrapper class wraps (encloses) around a data type and gives it an object appearance. Wrapper classes are final and immutable. Two concepts are there in the wrapper classes namely autoboxing and unboxing.&nbsp;</p>
        <p>Autoboxing is a procedure of converting a primitive value into an object of the corresponding wrapper class&nbsp;is called autoboxing. For example, converting int to Integer class. The Java compiler applies autoboxing when a primitive value is:</p>
        <ul>
        <li>Passed as a parameter to a method that&nbsp;<strong>expects an object</strong>&nbsp;of the corresponding wrapper class.</li>
        <li>Assigned to a variable of the corresponding&nbsp;<strong>wrapper class</strong>.</li>
        </ul>
        <p>Unboxing<strong>&nbsp;</strong>is a procedure of converting an object of a wrapper type to its corresponding primitive value is called unboxing. For example conversion of Integer to int. The Java compiler applies to unbox when an object of a wrapper class is:</p>
        <ul>
        <li>Passed as a parameter to a method that&nbsp;<strong>expects a value</strong>&nbsp;of the corresponding primitive type.</li>
        <li>Assigned to a variable of the corresponding&nbsp;<strong>primitive type</strong>.</li>
        </ul>
        <blockquote>
        <p>Autoboxing and unboxing are pictorially depicted below:</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        </blockquote>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/Wrapper.png" alt="" /></p>
        <p>Now let us land on discussing the useful features of wrapper classes, they are listed as follows:&nbsp;</p>
        <ol>
        <li>They convert primitive data types into objects. Objects are needed if we wish to modify the arguments passed into a method (because primitive types are passed by value).</li>
        <li>The classes in java.util.package handles only objects and hence wrapper classes help in this case also.</li>
        <li>Data structures in the Collection framework, such as ArrayList and Vector, store only objects (reference types) and not primitive types.</li>
        <li>An object is needed to support synchronization in multithreading.</li>
        </ol>
        <p>One of the major important features provided by wrapper classes is a lot of utility methods. Say when we have a float value, and we want to find the integer value of that float, then we have a specific method for that which is depicted from the illustration given below.</p>
        <p><strong>Illustration:</strong></p>
        <p>If we want to create an integer value from a string or a boolean value from a string. We can do it with the help of wrapper classes.</p>
        <p><strong>Syntax:</strong>&nbsp;Creation from other data types</p>
        <pre>Integer hundred = Integer.valueOf("100");
                        Boolean value = Boolean.valueOf("True");</pre>
        <p><strong>Example:</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_445594" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Show Wrapper class concept</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="comments">// Importing input output classes</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number5 index4 alt2">&nbsp;</div>
        <div class="line number6 index5 alt1"><code class="comments">// Main Class</code></div>
        <div class="line number7 index6 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number8 index7 alt1">&nbsp;</div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number12 index11 alt1">&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// In java, in case of floating values</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// they are stored as x = (y)f</code></div>
        <div class="line number15 index14 alt2">&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Conversion of float value to int</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Float floatWrap = Float.valueOf(</code><code class="value">45</code><code class="plain">.158f);</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Invoking the intValue() method over the stored</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// float value to store</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">floatToInt = floatWrap.intValue();</code></div>
        <div class="line number22 index21 alt1">&nbsp;</div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the non-primitive(Integer) value</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(floatToInt);</code></div>
        <div class="line number25 index24 alt2">&nbsp;</div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Now for another number N</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Say N = 5</code></div>
        <div class="line number28 index27 alt1">&nbsp;</div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Convert the binary number to the integer value</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Integer five = Integer.valueOf(</code><code class="string">"101"</code><code class="plain">, </code><code class="value">2</code><code class="plain">);</code></div>
        <div class="line number31 index30 alt2">&nbsp;</div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print the number</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(five);</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number35 index34 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>        45
                        5</pre>
        </div>
        <p>&nbsp;</p>
        </div>`
    },
    {
        topic: "Constructors in Java",
        content: `<h1>Constructors in Java</h1>
        <p>Java constructors or constructors in Java is a terminology been used to construct something in our programs. A constructor in Java is a special method that is used to initialize objects. The constructor is called when an object of a class is created. It can be used to set initial values for object attributes.</p>
        <p>In Java, a constructor is a block of codes similar to the method. It is called when an instance of the class is created. At the time of calling the constructor, memory for the object is allocated in the memory. It is a special type of method which is used to initialize the object. Every time an object is created using the new() keyword, at least one constructor is called.</p>
        <p>Note: It is not necessary to write a constructor for a class. It is because java compiler creates a default constructor if your class doesn&rsquo;t have any.</p>
        <p>How Constructors are Different From Methods in Java? <br />Constructors must have the same name as the class within which it is defined while it is not necessary for the method in Java.<br />Constructors do not return any type while method(s) have the return type or void if does not return any value.<br />Constructors are called only once at the time of Object creation while method(s) can be called any number of times.<br />Now let us come up with the syntax for the constructor being invoked at the time of object or instance creation.</p>
        <p>class Geek<br />{ <br /> .......</p>
        <p>// A Constructor<br /> new Geek() {}</p>
        <p>.......<br />}</p>
        <p>// We can create an object of the above class<br />// using the below statement. This statement<br />// calls above constructor.<br />Geek obj = new Geek(); <br />Need of Constructor<br />Think of a Box. If we talk about a box class then it will have some class variables (say length, breadth, and height). But when it comes to creating its object(i.e Box will now exist in the computer&rsquo;s memory), then can a box be there with no value defined for its dimensions. The answer is no. <br />So constructors are used to assigning values to the class variables at the time of object creation, either explicitly done by the programmer or by Java itself (default constructor).</p>
        <p>When is a Constructor called?</p>
        <p>Each time an object is created using a new() keyword, at least one constructor (it could be the default constructor) is invoked to assign initial values to the data members of the same class.</p>
        <p>The rules for writing constructors are as follows:</p>
        <p>Constructor(s) of a class must have the same name as the class name in which it resides.<br />A constructor in Java can not be abstract, final, static, or Synchronized.<br />Access modifiers can be used in constructor declaration to control its access i.e which other class can call the constructor.<br />So by far, we have learned constructors are used to initializing the object&rsquo;s state. Like methods, a constructor also contains a collection of statements(i.e. instructions) that are executed at the time of Object creation.</p>
        <p>Types of Constructors in Java<br />Now is the correct time to discuss types of the constructor, so primarily there are two types of constructors in java:</p>
        <p>No-argument constructor<br />Parameterized Constructor<br />1. No-argument constructor</p>
        <p>A constructor that has no parameter is known as the default constructor. If we don&rsquo;t define a constructor in a class, then the compiler creates a default constructor(with no arguments) for the class. And if we write a constructor with arguments or no-arguments then the compiler does not create a default constructor.</p>
        <p>Note: Default constructor provides the default values to the object like 0, null, etc. depending on the type.</p>
        <p>Example:</p>
        <p><br />// Java Program to illustrate calling a<br />// no-argument constructor<br /> <br />import java.io.*;<br /> <br />class Geek {<br /> int num;<br /> String name;<br /> <br /> // this would be invoked while an object<br /> // of that class is created.<br /> Geek() { System.out.println("Constructor called"); }<br />}<br /> <br />class GFG {<br /> public static void main(String[] args)<br /> {<br /> // this would invoke default constructor.<br /> Geek geek1 = new Geek();<br /> <br /> // Default constructor provides the default<br /> // values to the object like 0, null<br /> System.out.println(geek1.name);<br /> System.out.println(geek1.num);<br /> }<br />}<br />Output<br />Constructor called<br />null<br />0<br />2. Parameterized Constructor</p>
        <p>A constructor that has parameters is known as parameterized constructor. If we want to initialize fields of the class with our own values, then use a parameterized constructor.</p>
        <p>Example:</p>
        <p><br />// Java Program to Illustrate Working of<br />// Parameterized Constructor<br /> <br />// Importing required inputoutput class<br />import java.io.*;<br /> <br />// Class 1<br />class Geek {<br /> // data members of the class.<br /> String name;<br /> int id;<br /> <br /> // Constructor would initialize data members<br /> // With the values of passed arguments while<br /> // Object of that class created<br /> Geek(String name, int id)<br /> {<br /> this.name = name;<br /> this.id = id;<br /> }<br />}<br /> <br />// Class 2<br />class GFG {<br /> // main driver method<br /> public static void main(String[] args)<br /> {<br /> // This would invoke the parameterized constructor.<br /> Geek geek1 = new Geek("adam", 1);<br /> System.out.println("GeekName :" + geek1.name<br /> + " and GeekId :" + geek1.id);<br /> }<br />}<br />Output<br />GeekName :adam and GeekId :1<br />Remember: Does constructor return any value?</p>
        <p>There are no &ldquo;return value&rdquo; statements in the constructor, but the constructor returns the current class instance. We can write &lsquo;return&rsquo; inside a constructor.</p>
        <p>Now the most important topic that comes into play is the strong incorporation of OOPS with constructors known as constructor overloading. JustLike methods, we can overload constructors for creating objects in different ways. Compiler differentiates constructors on the basis of numbers of parameters, types of the parameters, and order of the parameters.</p>
        <p>Example:</p>
        <p><br />// Java Program to illustrate constructor overloading<br />// using same task (addition operation ) for different<br />// types of arguments.<br /> <br />import java.io.*;<br /> <br />class Geek<br />{<br /> // constructor with one argument<br /> Geek(String name)<br /> {<br /> System.out.println("Constructor with one " +<br /> "argument - String : " + name);<br /> }<br /> <br /> // constructor with two arguments<br /> Geek(String name, int age)<br /> {<br /> <br /> System.out.println("Constructor with two arguments : " +<br /> " String and Integer : " + name + " "+ age);<br /> <br /> }<br /> <br /> // Constructor with one argument but with different<br /> // type than previous..<br /> Geek(long id)<br /> {<br /> System.out.println("Constructor with one argument : " +<br /> "Long : " + id);<br /> }<br />}<br /> <br />class GFG<br />{<br /> public static void main(String[] args)<br /> {<br /> // Creating the objects of the class named 'Geek'<br /> // by passing different arguments<br /> <br /> // Invoke the constructor with one argument of<br /> // type 'String'.<br /> Geek geek2 = new Geek("Shikhar");<br /> <br /> // Invoke the constructor with two arguments<br /> Geek geek3 = new Geek("Dharmesh", 26);<br /> <br /> // Invoke the constructor with one argument of<br /> // type 'Long'.<br /> Geek geek4 = new Geek(325614567);<br /> }<br />}<br />Output<br />Constructor with one argument - String : Shikhar<br />Constructor with two arguments : String and Integer : Dharmesh 26<br />Constructor with one argument : Long : 325614567<br />In order to know to deep down into constructors there are two concepts been widely used as listed below:</p>
        <p>Constructor Chaining<br />Copy constructor</p>
        <p>&nbsp;</p>
        <h1>Copy Constructor in Java</h1>
        <p>Like C++, Java also supports copy constructor. But, unlike C++, Java doesn&rsquo;t create a default copy constructor if you don&rsquo;t write your own.&nbsp;</p>
        <p>Following is an example Java program that shows a simple use of copy constructor.&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_40160" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// filename: Main.java</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">Complex {</code></div>
        <div class="line number4 index3 alt1">&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">private</code> <code class="keyword">double</code> <code class="plain">re, im;</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// A normal parameterized constructor</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">Complex(</code><code class="keyword">double</code> <code class="plain">re, </code><code class="keyword">double</code> <code class="plain">im) {</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.re = re;</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.im = im;</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// copy constructor</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Complex(Complex c) {</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Copy constructor called"</code><code class="plain">);</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">re = c.re;</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">im = c.im;</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Overriding the toString of Object class</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1">@Override</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">String toString() {</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="string">"("</code> <code class="plain">+ re + </code><code class="string">" + "</code> <code class="plain">+ im + </code><code class="string">"i)"</code><code class="plain">;</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number25 index24 alt2"><code class="plain">}</code></div>
        <div class="line number26 index25 alt1">&nbsp;</div>
        <div class="line number27 index26 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code></div>
        <div class="line number28 index27 alt1">&nbsp;</div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Complex c1 = </code><code class="keyword">new</code> <code class="plain">Complex(</code><code class="value">10</code><code class="plain">, </code><code class="value">15</code><code class="plain">);</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Following involves a copy constructor call</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Complex c2 = </code><code class="keyword">new</code> <code class="plain">Complex(c1);&nbsp;&nbsp;</code></div>
        <div class="line number34 index33 alt1">&nbsp;</div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Note that following doesn't involve a copy constructor call as</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// non-primitive variables are just references.</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Complex c3 = c2;&nbsp;&nbsp;</code></div>
        <div class="line number38 index37 alt1">&nbsp;</div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(c2); </code><code class="comments">// toString() of c2 is called here</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number41 index40 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p>Output:&nbsp;</p>
        <pre>Copy constructor called
        (10.0 + 15.0i)</pre>
        <p>Now try the following Java program:&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_420743" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// filename: Main.java</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">Complex {</code></div>
        <div class="line number4 index3 alt1">&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">private</code> <code class="keyword">double</code> <code class="plain">re, im;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">Complex(</code><code class="keyword">double</code> <code class="plain">re, </code><code class="keyword">double</code> <code class="plain">im) {</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.re = re;</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.im = im;</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number11 index10 alt2"><code class="plain">}</code></div>
        <div class="line number12 index11 alt1">&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Complex c1 = </code><code class="keyword">new</code> <code class="plain">Complex(</code><code class="value">10</code><code class="plain">, </code><code class="value">15</code><code class="plain">);&nbsp;</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Complex c2 = </code><code class="keyword">new</code> <code class="plain">Complex(c1);&nbsp; </code><code class="comments">// compiler error here</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number19 index18 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        <h1>Constructor Chaining In Java with Examples</h1>
        <p>Constructor chaining is the process of calling one constructor from another constructor with respect to current object.&nbsp;<br />Constructor chaining can be done in two ways:&nbsp;<br />&nbsp;</p>
        <ul>
        <li><strong>Within same class</strong>: It can be done using&nbsp;<strong>this()</strong>&nbsp;keyword for constructors in same class</li>
        <li><strong>From base class:&nbsp;</strong>by using&nbsp;<strong>super()</strong>&nbsp;keyword to call constructor from the base class.</li>
        </ul>
        <p>Constructor chaining occurs through&nbsp;<strong>inheritance</strong>. A sub class constructor&rsquo;s task is to call super class&rsquo;s constructor first. This ensures that creation of sub class&rsquo;s object starts with the initialization of the data members of the super class. There could be any numbers of classes in inheritance chain. Every constructor calls up the chain till class at the top is reached.<br /><strong>Why do we need constructor chaining ?</strong>&nbsp;<br />This process is used when we want to perform multiple tasks in a single constructor rather than creating a code for each task in a single constructor we create a separate constructor for each task and make their chain which makes the program more readable.&nbsp;<br />&nbsp;</p>
        <p><strong>Constructor Chaining within same class using this() keyword :</strong></p>
        <p>&nbsp;</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/Constructor-Chaining-In-Java1.png" alt="Constructor Chaining In Java" /></p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p>&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_938590" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate Constructor Chaining</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// within same class Using this() keyword</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">Temp</code></div>
        <div class="line number4 index3 alt1"><code class="plain">{</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// default constructor 1</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// default constructor will call another constructor</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// using this keyword from same class</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Temp()</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// calls constructor 2</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">(</code><code class="value">5</code><code class="plain">);</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"The Default constructor"</code><code class="plain">);</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number14 index13 alt1">&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// parameterized constructor 2</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Temp(</code><code class="keyword">int</code> <code class="plain">x)</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// calls constructor 3</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">(</code><code class="value">5</code><code class="plain">, </code><code class="value">15</code><code class="plain">);</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(x);</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number22 index21 alt1">&nbsp;</div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// parameterized constructor 3</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Temp(</code><code class="keyword">int</code> <code class="plain">x, </code><code class="keyword">int</code> <code class="plain">y)</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(x * y);</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number28 index27 alt1">&nbsp;</div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// invokes default constructor first</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">Temp();</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number34 index33 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:&nbsp;&nbsp;</strong></p>
        <pre>75
        5
        The Default constructor</pre>
        <p><strong>Rules of constructor chaining :</strong>&nbsp;</p>
        <ol>
        <li>The&nbsp;<strong>this()</strong>&nbsp;expression should always be the first line of the constructor.</li>
        <li>There should be at-least be one constructor without the this() keyword (constructor 3 in above example).</li>
        <li>Constructor chaining can be achieved in any order.<br />&nbsp;</li>
        </ol>
        <p><strong>What happens if we change the order of constructors?</strong><br />Nothing, Constructor chaining can be achieved in any order</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_483167" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate Constructor Chaining</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// within same class Using this() keyword</code></div>
        <div class="line number3 index2 alt2"><code class="comments">// and changing order of constructors</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Temp</code></div>
        <div class="line number5 index4 alt2"><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// default constructor 1</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Temp()</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"default"</code><code class="plain">);</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number11 index10 alt2">&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// parameterized constructor 2</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Temp(</code><code class="keyword">int</code> <code class="plain">x)</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// invokes default constructor</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">();</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(x);</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number19 index18 alt2">&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// parameterized constructor 3</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Temp(</code><code class="keyword">int</code> <code class="plain">x, </code><code class="keyword">int</code> <code class="plain">y)</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// invokes parameterized constructor 2</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">(</code><code class="value">5</code><code class="plain">);</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(x * y);</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number27 index26 alt2">&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// invokes parameterized constructor 3</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">Temp(</code><code class="value">8</code><code class="plain">, </code><code class="value">10</code><code class="plain">);</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number33 index32 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:&nbsp;</strong></p>
        <pre>default
        5
        80</pre>
        <p>NOTE: In example 1, default constructor is invoked at the end, but in example 2 default constructor is invoked at first. Hence, order in constructor chaining is not important.&nbsp;<br />&nbsp;</p>
        <p><strong>Constructor Chaining to other class using super() keyword :</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist3-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist3-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_971625" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate Constructor Chaining to</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// other class using super() keyword</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">Base</code></div>
        <div class="line number4 index3 alt1"><code class="plain">{</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String name;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// constructor 1</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Base()</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">(</code><code class="string">""</code><code class="plain">);</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"No-argument constructor of"</code> <code class="plain">+</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">" base class"</code><code class="plain">);</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number14 index13 alt1">&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// constructor 2</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Base(String name)</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.name = name;</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Calling parameterized constructor"</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">" of base"</code><code class="plain">);</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number22 index21 alt1"><code class="plain">}</code></div>
        <div class="line number23 index22 alt2">&nbsp;</div>
        <div class="line number24 index23 alt1"><code class="keyword">class</code> <code class="plain">Derived </code><code class="keyword">extends</code> <code class="plain">Base</code></div>
        <div class="line number25 index24 alt2"><code class="plain">{</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// constructor 3</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Derived()</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"No-argument constructor "</code> <code class="plain">+</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"of derived"</code><code class="plain">);</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number32 index31 alt1">&nbsp;</div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// parameterized constructor 4</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Derived(String name)</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// invokes base class constructor 2</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">super</code><code class="plain">(name);</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Calling parameterized "</code> <code class="plain">+</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"constructor of derived"</code><code class="plain">);</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number41 index40 alt2">&nbsp;</div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// calls parameterized constructor 4</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Derived obj = </code><code class="keyword">new</code> <code class="plain">Derived(</code><code class="string">"test"</code><code class="plain">);</code></div>
        <div class="line number46 index45 alt1">&nbsp;</div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calls No-argument constructor</code></div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Derived obj = new Derived();</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number50 index49 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:&nbsp;</strong></p>
        <pre>Calling parameterized constructor of base
        Calling parameterized constructor of derived</pre>
        <p>Note : Similar to constructor chaining in same class,&nbsp;<strong>super()</strong>&nbsp;should be the first line of the constructor as super class&rsquo;s constructor are invoked before the sub class&rsquo;s constructor.<br /><strong>Alternative method : using Init block&nbsp;</strong>:&nbsp;<br />When we want certain common resources to be executed with every constructor we can put the code in the&nbsp;<a href="https://www.geeksforgeeks.org/g-fact-26-the-initializer-block-in-java/"><strong>init block</strong></a>. Init block is always executed before any constructor, whenever a constructor is used for creating a new object.<br />Example 1:</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist4-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist4-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_631464" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">class</code> <code class="plain">Temp</code></div>
        <div class="line number2 index1 alt1"><code class="plain">{</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// block to be executed before any constructor.</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"init block"</code><code class="plain">);</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// no-arg constructor</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Temp()</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"default"</code><code class="plain">);</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// constructor with one argument.</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Temp(</code><code class="keyword">int</code> <code class="plain">x)</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(x);</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number19 index18 alt2">&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Object creation by calling no-argument</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// constructor.</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">Temp();</code></div>
        <div class="line number25 index24 alt2">&nbsp;</div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Object creation by calling parameterized</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// constructor with one parameter.</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">Temp(</code><code class="value">10</code><code class="plain">);</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number30 index29 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:&nbsp;</strong><br />&nbsp;</p>
        <pre>init block
        default
        init block
        10</pre>
        <p>NOTE: If there are more than one blocks, they are executed in the order in which they are defined within the same class. See the ex.&nbsp;<br />Example :<br />&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist5-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist5-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_950616" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">class</code> <code class="plain">Temp</code></div>
        <div class="line number2 index1 alt1"><code class="plain">{</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// block to be executed first</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"init"</code><code class="plain">);</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Temp()</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"default"</code><code class="plain">);</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Temp(</code><code class="keyword">int</code> <code class="plain">x)</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(x);</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number15 index14 alt2">&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// block to be executed after the first block</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// which has been defined above.</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"second"</code><code class="plain">);</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">Temp();</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">Temp(</code><code class="value">10</code><code class="plain">);</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number26 index25 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output :&nbsp;&nbsp;</strong></p>
        <pre>init
        second
        default
        init
        second
        10<br /><br /></pre>
        <h1>Private Constructors and Singleton Classes in Java</h1>
        <p><strong><em>Can we have private constructors ?</em></strong></p>
        <p>As you can easily guess, like any method we can provide access specifier to the constructor. If it&rsquo;s made private, then it can only be accessed inside the class.</p>
        <p><strong><em>Do we need such &lsquo;private constructors &lsquo; ?</em></strong></p>
        <p>There are various scenarios where we can use private constructors. The major ones are</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <ol>
        <li>Internal Constructor chaining</li>
        <li>Singleton class design pattern</li>
        </ol>
        <p><strong><em>What is a Singleton class?</em></strong></p>
        <p>As the name implies, a class is said to be singleton if it limits the number of objects of that class to one.</p>
        <p>We can&rsquo;t have more than a single object for such classes.</p>
        <p>Singleton classes are employed extensively in concepts like Networking and Database Connectivity.</p>
        <p><strong>Design Pattern of Singleton classes:</strong></p>
        <p>The constructor of singleton class would be private so there must be another way to get the instance of that class. This problem is resolved using a class member instance and a factory method to return the class member.</p>
        <p>Below is an example in java illustrating the same:</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_279181" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate implementation of Singleton&nbsp;</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// pattern using private constructors.</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">MySingleton</code></div>
        <div class="line number6 index5 alt1"><code class="plain">{</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="plain">MySingleton instance = </code><code class="keyword">null</code><code class="plain">;</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">x = </code><code class="value">10</code><code class="plain">;</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// private constructor can't be accessed outside the class</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">private</code> <code class="plain">MySingleton() {&nbsp; }</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Factory method to provide the users with instances</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">public</code> <code class="plain">MySingleton getInstance()</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">if</code> <code class="plain">(instance == </code><code class="keyword">null</code><code class="plain">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">instance = </code><code class="keyword">new</code> <code class="plain">MySingleton();</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">instance;</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp;</code></div>
        <div class="line number21 index20 alt2"><code class="plain">}</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number23 index22 alt2"><code class="comments">// Driver Class</code></div>
        <div class="line number24 index23 alt1"><code class="keyword">class</code> <code class="plain">Main</code></div>
        <div class="line number25 index24 alt2"><code class="plain">{</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])&nbsp;&nbsp;&nbsp;&nbsp;</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">MySingleton a = MySingleton.getInstance();</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">MySingleton b = MySingleton.getInstance();</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">a.x = a.x + </code><code class="value">10</code><code class="plain">;</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Value of a.x = "</code> <code class="plain">+ a.x);</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Value of b.x = "</code> <code class="plain">+ b.x);</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain">}&nbsp;&nbsp;&nbsp;&nbsp;</code></div>
        <div class="line number34 index33 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output:</p>
        <pre>Value of a.x = 20
        Value of b.x = 20</pre>
        <p>We changed value of a.x, value of b.x also got updated because both &lsquo;a&rsquo; and &lsquo;b&rsquo; refer to same object, i.e., they are objects of a singleton class.</p>
        <p>&nbsp;</p>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>`,
    },
    {
        topic: "Inheritance & Polymorphism in Java",
        content: `<h1>Inheritance &amp; Polymorphism in Java</h1>
        <p>Inheritance is an important pillar of OOP(Object-Oriented Programming). It is the mechanism in java by which one class is allowed to inherit the features(fields and methods) of another class.&nbsp;</p>
        <p><strong>Important terminology:&nbsp;</strong></p>
        <ul>
        <li><strong>Super Class:&nbsp;</strong>The class whose features are inherited is known as superclass(or a base class or a parent class).</li>
        <li><strong>Sub Class:</strong>&nbsp;The class that inherits the other class is known as a subclass(or a derived class, extended class, or child class). The subclass can add its own fields and methods in addition to the superclass fields and methods.</li>
        <li><strong>Reusability:&nbsp;</strong>Inheritance supports the concept of &ldquo;reusability&rdquo;, i.e. when we want to create a new class and there is already a class that includes some of the code that we want, we can derive our new class from the existing class. By doing this, we are reusing the fields and methods of the existing class.</li>
        </ul>
        <p><strong>How to use inheritance in Java</strong></p>
        <p>The keyword used for inheritance is&nbsp;<strong>extends</strong>.&nbsp;</p>
        <p><strong>Syntax :&nbsp;</strong></p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <pre>class derived-class extends base-class  
                {  
                   //methods and fields  
                }  </pre>
        <p><strong>Example:&nbsp;</strong>In the below example of inheritance, class Bicycle is a base class, class MountainBike is a derived class that extends Bicycle class and class Test is a driver class to run program.&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate the</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// concept of inheritance</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// base class</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">Bicycle {</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the Bicycle class has two fields</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">gear;</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">speed;</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the Bicycle class has one constructor</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">Bicycle(</code><code class="keyword">int</code> <code class="plain">gear, </code><code class="keyword">int</code> <code class="plain">speed)</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.gear = gear;</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.speed = speed;</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1">&nbsp;</div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the Bicycle class has three methods</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">applyBrake(</code><code class="keyword">int</code> <code class="plain">decrement)</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">speed -= decrement;</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number22 index21 alt1">&nbsp;</div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">speedUp(</code><code class="keyword">int</code> <code class="plain">increment)</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">speed += increment;</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number27 index26 alt2">&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// toString() method to print info of Bicycle</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">String toString()</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(</code><code class="string">"No of gears are "</code> <code class="plain">+ gear + </code><code class="string">"\n"</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">"speed of bicycle is "</code> <code class="plain">+ speed);</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number34 index33 alt1"><code class="plain">}</code></div>
        <div class="line number35 index34 alt2">&nbsp;</div>
        <div class="line number36 index35 alt1"><code class="comments">// derived class</code></div>
        <div class="line number37 index36 alt2"><code class="keyword">class</code> <code class="plain">MountainBike </code><code class="keyword">extends</code> <code class="plain">Bicycle {</code></div>
        <div class="line number38 index37 alt1">&nbsp;</div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the MountainBike subclass adds one more field</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">seatHeight;</code></div>
        <div class="line number41 index40 alt2">&nbsp;</div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the MountainBike subclass has one constructor</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">MountainBike(</code><code class="keyword">int</code> <code class="plain">gear, </code><code class="keyword">int</code> <code class="plain">speed,</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">startHeight)</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// invoking base-class(Bicycle) constructor</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">super</code><code class="plain">(gear, speed);</code></div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">seatHeight = startHeight;</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number50 index49 alt1">&nbsp;</div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// the MountainBike subclass adds one more method</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">setHeight(</code><code class="keyword">int</code> <code class="plain">newValue)</code></div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">seatHeight = newValue;</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number56 index55 alt1">&nbsp;</div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// overriding toString() method</code></div>
        <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// of Bicycle to print more info</code></div>
        <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1">@Override</code> <code class="keyword">public</code> <code class="plain">String toString()</code></div>
        <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(</code><code class="keyword">super</code><code class="plain">.toString() + </code><code class="string">"\nseat height is "</code></div>
        <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ seatHeight);</code></div>
        <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number64 index63 alt1"><code class="plain">}</code></div>
        <div class="line number65 index64 alt2">&nbsp;</div>
        <div class="line number66 index65 alt1"><code class="comments">// driver class</code></div>
        <div class="line number67 index66 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Test {</code></div>
        <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number70 index69 alt1">&nbsp;</div>
        <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">MountainBike mb = </code><code class="keyword">new</code> <code class="plain">MountainBike(</code><code class="value">3</code><code class="plain">, </code><code class="value">100</code><code class="plain">, </code><code class="value">25</code><code class="plain">);</code></div>
        <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(mb.toString());</code></div>
        <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number74 index73 alt1"><code class="plain">}</code></div>
        <div class="line number74 index73 alt1">&nbsp;</div>
        &nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>No of gears are 3
                speed of bicycle is 100
                seat height is 25
                </pre>
        </div>
        <p>In the above program, when an object of MountainBike class is created, a copy of all methods and fields of the superclass acquire memory in this object. That is why by using the object of the subclass we can also access the members of a superclass.&nbsp;</p>
        <p>Please note that during inheritance only the object of the subclass is created, not the superclass. For more, refer&nbsp;<a href="https://www.geeksforgeeks.org/gfact-52-java-object-creation-of-inherited-classes/">Java Object Creation of Inherited Class</a>.&nbsp;</p>
        <p><strong>Illustrative image of the program:&nbsp;</strong><br />&nbsp;</p>
        <p><a href="https://media.geeksforgeeks.org/wp-content/uploads/inheritence1.png"><img src="https://media.geeksforgeeks.org/wp-content/uploads/inheritence1.png" alt="f" /></a></p>
        <p>In practice, inheritance and&nbsp;<a href="https://www.geeksforgeeks.org/overriding-in-java/">polymorphism</a>&nbsp;are used together in java to achieve fast performance and readability of code.</p>
        <p><strong>Types of Inheritance in Java</strong></p>
        <p>Below are the different types of inheritance which are supported by Java.&nbsp;</p>
        <p><strong>1. Single Inheritance:&nbsp;</strong>In single inheritance, subclasses inherit the features of one superclass. In the image below, class A serves as a base class for the derived class B.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate the</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// concept of single inheritance</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.lang.*;</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="keyword">class</code> <code class="plain">one {</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_geek()</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Geeks"</code><code class="plain">);</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="plain">}</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="keyword">class</code> <code class="plain">two </code><code class="keyword">extends</code> <code class="plain">one {</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_for() { System.out.println(</code><code class="string">"for"</code><code class="plain">); }</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="comments">// Driver class</code></div>
        <div class="line number18 index17 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">two g = </code><code class="keyword">new</code> <code class="plain">two();</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">g.print_geek();</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">g.print_for();</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">g.print_geek();</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number26 index25 alt1"><code class="plain">}</code></div>
        <div class="line number26 index25 alt1">&nbsp;</div>
        &nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Geeks
                for
                Geeks
                </pre>
        </div>
        <p><a href="https://media.geeksforgeeks.org/wp-content/uploads/inheritance1.png"><img src="https://media.geeksforgeeks.org/wp-content/uploads/inheritance1.png" alt="Single_Inheritance" /></a></p>
        <p><strong>2. Multilevel Inheritance:&nbsp;</strong>In Multilevel Inheritance, a derived class will be inheriting a base class and as well as the derived class also act as the base class to other class. In the below image, class A serves as a base class for the derived class B, which in turn serves as a base class for the derived class C. In Java, a class cannot directly access the<a href="https://www.geeksforgeeks.org/g-fact-91/">&nbsp;grandparent&rsquo;s members</a>.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist3-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist3-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate the</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// concept of Multilevel inheritance</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.lang.*;</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="keyword">class</code> <code class="plain">one {</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_geek()</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Geeks"</code><code class="plain">);</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="plain">}</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="keyword">class</code> <code class="plain">two </code><code class="keyword">extends</code> <code class="plain">one {</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_for() { System.out.println(</code><code class="string">"for"</code><code class="plain">); }</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        <div class="line number17 index16 alt2">&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="keyword">class</code> <code class="plain">three </code><code class="keyword">extends</code> <code class="plain">two {</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_geek()</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Geeks"</code><code class="plain">);</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2"><code class="plain">}</code></div>
        <div class="line number24 index23 alt1">&nbsp;</div>
        <div class="line number25 index24 alt2"><code class="comments">// Drived class</code></div>
        <div class="line number26 index25 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">three g = </code><code class="keyword">new</code> <code class="plain">three();</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">g.print_geek();</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">g.print_for();</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">g.print_geek();</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number34 index33 alt1"><code class="plain">}</code></div>
        <div class="line number34 index33 alt1">&nbsp;</div>
        &nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Geeks
                for
                Geeks
                </pre>
        </div>
        <p><a href="https://media.geeksforgeeks.org/wp-content/uploads/inheritance3.png"><img src="https://media.geeksforgeeks.org/wp-content/uploads/inheritance3.png" alt="Multilevel_Inheritance" /></a></p>
        <p><strong>3. Hierarchical Inheritance:&nbsp;</strong>In Hierarchical Inheritance, one class serves as a superclass (base class) for more than one subclass. In the below image, class A serves as a base class for the derived class B, C and D.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist4-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist4-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate the</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// concept of Hierarchical&nbsp; inheritance</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">A {</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_A() { System.out.println(</code><code class="string">"Class A"</code><code class="plain">); }</code></div>
        <div class="line number6 index5 alt1"><code class="plain">}</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="keyword">class</code> <code class="plain">B </code><code class="keyword">extends</code> <code class="plain">A {</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_B() { System.out.println(</code><code class="string">"Class B"</code><code class="plain">); }</code></div>
        <div class="line number10 index9 alt1"><code class="plain">}</code></div>
        <div class="line number11 index10 alt2">&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="keyword">class</code> <code class="plain">C </code><code class="keyword">extends</code> <code class="plain">A {</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_C() { System.out.println(</code><code class="string">"Class C"</code><code class="plain">); }</code></div>
        <div class="line number14 index13 alt1"><code class="plain">}</code></div>
        <div class="line number15 index14 alt2">&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="keyword">class</code> <code class="plain">D </code><code class="keyword">extends</code> <code class="plain">A {</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_D() { System.out.println(</code><code class="string">"Class D"</code><code class="plain">); }</code></div>
        <div class="line number18 index17 alt1"><code class="plain">}</code></div>
        <div class="line number19 index18 alt2">&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="comments">// Driver Class</code></div>
        <div class="line number21 index20 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Test {</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">B obj_B = </code><code class="keyword">new</code> <code class="plain">B();</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj_B.print_A();</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj_B.print_B();</code></div>
        <div class="line number27 index26 alt2">&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">C obj_C = </code><code class="keyword">new</code> <code class="plain">C();</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj_C.print_A();</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj_C.print_C();</code></div>
        <div class="line number31 index30 alt2">&nbsp;</div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">D obj_D = </code><code class="keyword">new</code> <code class="plain">D();</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj_D.print_A();</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj_D.print_D();</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number36 index35 alt1"><code class="plain">}</code></div>
        </div>
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Class A
                Class B
                Class A
                Class C
                Class A
                Class D
                </pre>
        </div>
        <div class="wp-caption alignnone"><img src="https://media.geeksforgeeks.org/wp-content/uploads/20210311224500/Untitled-300x269.png" alt="" width="300" />
        <p class="wp-caption-text">Hierarchical Inheritance</p>
        </div>
        <p>&nbsp;</p>
        <p><strong>4.&nbsp;</strong><a href="https://www.geeksforgeeks.org/java-and-multiple-inheritance/"><strong>Multiple Inheritance</strong></a><strong>&nbsp;(Through Interfaces):&nbsp;</strong>In Multiple inheritances, one class can have more than one superclass and inherit features from all parent classes. Please note that Java does&nbsp;<strong>not</strong>&nbsp;support&nbsp;<a href="https://www.geeksforgeeks.org/java-and-multiple-inheritance/">multiple inheritances</a>&nbsp;with classes. In java, we can achieve multiple inheritances only through&nbsp;<a href="https://www.geeksforgeeks.org/interfaces-in-java/">Interfaces</a>. In the image below, Class C is derived from interface A and B.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist5-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist5-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate the</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// concept of Multiple inheritance</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.lang.*;</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="keyword">interface</code> <code class="plain">one {</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_geek();</code></div>
        <div class="line number9 index8 alt2"><code class="plain">}</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="keyword">interface</code> <code class="plain">two {</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_for();</code></div>
        <div class="line number13 index12 alt2"><code class="plain">}</code></div>
        <div class="line number14 index13 alt1">&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="keyword">interface</code> <code class="plain">three </code><code class="keyword">extends</code> <code class="plain">one, two {</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_geek();</code></div>
        <div class="line number17 index16 alt2"><code class="plain">}</code></div>
        <div class="line number18 index17 alt1"><code class="keyword">class</code> <code class="plain">child </code><code class="keyword">implements</code> <code class="plain">three {</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1">@Override</code> <code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_geek()</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Geeks"</code><code class="plain">);</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2">&nbsp;</div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">print_for() { System.out.println(</code><code class="string">"for"</code><code class="plain">); }</code></div>
        <div class="line number25 index24 alt2"><code class="plain">}</code></div>
        <div class="line number26 index25 alt1">&nbsp;</div>
        <div class="line number27 index26 alt2"><code class="comments">// Drived class</code></div>
        <div class="line number28 index27 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">child c = </code><code class="keyword">new</code> <code class="plain">child();</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">c.print_geek();</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">c.print_for();</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">c.print_geek();</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number36 index35 alt1"><code class="plain">}</code></div>
        <div class="line number36 index35 alt1">&nbsp;</div>
        &nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Geeks
                for
                Geeks
                </pre>
        </div>
        <p><a href="https://media.geeksforgeeks.org/wp-content/uploads/inheritance2-1.png"><img src="https://media.geeksforgeeks.org/wp-content/uploads/inheritance2-1.png" alt="Multiple_Inheritance" /></a></p>
        <p><strong>5. Hybrid Inheritance(Through Interfaces):&nbsp;</strong>It is a mix of two or more of the above types of inheritance. Since java doesn&rsquo;t support multiple inheritances with classes, hybrid inheritance is also not possible with classes. In java, we can achieve hybrid inheritance only through&nbsp;<a href="https://www.geeksforgeeks.org/interfaces-in-java/">Interfaces</a>.<br />&nbsp;</p>
        <p><a href="https://media.geeksforgeeks.org/wp-content/uploads/inheritance-1.png"><img src="https://media.geeksforgeeks.org/wp-content/uploads/inheritance-1.png" alt="hybrid" /></a></p>
        <p><strong>Important facts about inheritance in Java</strong>&nbsp;</p>
        <ul>
        <li><strong>Default superclass</strong>: Except&nbsp;<a href="https://www.geeksforgeeks.org/object-class-in-java/">Object</a>&nbsp;class, which has no superclass, every class has one and only one direct superclass (single inheritance). In the absence of any other explicit superclass, every class is implicitly a subclass of the&nbsp;<a href="https://www.geeksforgeeks.org/object-class-in-java/">Object</a>&nbsp;class.</li>
        <li><strong>Superclass can only be one:</strong>&nbsp;A superclass can have any number of subclasses. But a subclass can have only&nbsp;<strong>one</strong>&nbsp;superclass. This is because Java does not support&nbsp;<a href="https://www.geeksforgeeks.org/java-and-multiple-inheritance/">multiple inheritances</a>&nbsp;with classes. Although with interfaces, multiple inheritances are supported by java.</li>
        <li><strong>Inheriting Constructors:&nbsp;</strong>A subclass inherits all the members (fields, methods, and nested classes) from its superclass. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass.</li>
        <li><strong>Private member inheritance:</strong>&nbsp;A subclass does not inherit the private members of its parent class. However, if the superclass has public or protected methods(like getters and setters) for accessing its private fields, these can also be used by the subclass.</li>
        </ul>
        <p><strong>Java IS-A type of Relationship.</strong></p>
        <p>IS-A is a way of saying: This object is a type of that object. Let us see how the extends keyword is used to achieve inheritance.</p>
        <div class="noIdeBtnDiv">
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist6-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist6-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">SolarSystem {</code></div>
        <div class="line number2 index1 alt1"><code class="plain">}</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Earth </code><code class="keyword">extends</code> <code class="plain">SolarSystem {</code></div>
        <div class="line number4 index3 alt1"><code class="plain">}</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Mars </code><code class="keyword">extends</code> <code class="plain">SolarSystem {</code></div>
        <div class="line number6 index5 alt1"><code class="plain">}</code></div>
        <div class="line number7 index6 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Moon </code><code class="keyword">extends</code> <code class="plain">Earth {</code></div>
        <div class="line number8 index7 alt1"><code class="plain">}</code></div>
        &nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p>Now, based on the above example, in Object-Oriented terms, the following are true:-</p>
        <ol>
        <li>SolarSystem the superclass of Earth class.</li>
        <li>SolarSystem the superclass of Mars class.</li>
        <li>Earth and Mars are subclasses of SolarSystem class.</li>
        <li>Moon is the subclass of both Earth and SolarSystem classes.</li>
        </ol>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist7-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist7-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="keyword">class</code> <code class="plain">SolarSystem {</code></div>
        <div class="line number2 index1 alt1"><code class="plain">}</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">Earth </code><code class="keyword">extends</code> <code class="plain">SolarSystem {</code></div>
        <div class="line number4 index3 alt1"><code class="plain">}</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">Mars </code><code class="keyword">extends</code> <code class="plain">SolarSystem {</code></div>
        <div class="line number6 index5 alt1"><code class="plain">}</code></div>
        <div class="line number7 index6 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Moon </code><code class="keyword">extends</code> <code class="plain">Earth {</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">SolarSystem s = </code><code class="keyword">new</code> <code class="plain">SolarSystem();</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Earth e = </code><code class="keyword">new</code> <code class="plain">Earth();</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Mars m = </code><code class="keyword">new</code> <code class="plain">Mars();</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s </code><code class="keyword">instanceof</code> <code class="plain">SolarSystem);</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(e </code><code class="keyword">instanceof</code> <code class="plain">Earth);</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(m </code><code class="keyword">instanceof</code> <code class="plain">SolarSystem);</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number18 index17 alt1"><code class="plain">}</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        &nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>true
                true
                true
                </pre>
        </div>
        <p><strong>What all can be done in a Subclass?</strong></p>
        <p>In sub-classes we can inherit members as is, replace them, hide them, or supplement them with new members:&nbsp;</p>
        <ul>
        <li>The inherited fields can be used directly, just like any other fields.</li>
        <li>We can declare new fields in the subclass that are not in the superclass.</li>
        <li>The inherited methods can be used directly as they are.</li>
        <li>We can write a new&nbsp;<em>instance</em>&nbsp;method in the subclass that has the same signature as the one in the superclass, thus&nbsp;<a href="https://www.geeksforgeeks.org/overriding-in-java/">overriding</a>&nbsp;it (as in the example above,&nbsp;<em>toString()</em>&nbsp;method is overridden).</li>
        <li>We can write a new&nbsp;<em>static</em>&nbsp;method in the subclass that has the same signature as the one in the superclass, thus&nbsp;<a href="https://www.geeksforgeeks.org/g-fact-63/">hiding</a>&nbsp;it.</li>
        <li>We can declare new methods in the subclass that are not in the superclass.</li>
        <li>We can write a subclass constructor that invokes the constructor of the superclass, either implicitly or by using the keyword&nbsp;<a href="https://www.geeksforgeeks.org/super-keyword/">super</a>.</li>
        </ul>
        <h1>Java and Multiple Inheritance</h1>
        <p>Multiple Inheritance is a feature of an object-oriented concept, where a class can inherit properties of more than one parent class. The problem occurs when there exist methods with the same signature in both the superclasses and subclass. On calling the method, the compiler cannot determine which class method to be called and even on calling which class method gets the priority.&nbsp;</p>
        <blockquote>
        <p><strong>Note:&nbsp;</strong>Java doesn&rsquo;t support Multiple Inheritance</p>
        </blockquote>
        <p><strong>Example 1:</strong></p>
        <div class="noIdeBtnDiv">
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate Unsupportance of</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Multiple Inheritance</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing input output classes</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">//&nbsp; Class 1</code></div>
        <div class="line number8 index7 alt1"><code class="comments">// First Parent class</code></div>
        <div class="line number9 index8 alt2"><code class="keyword">class</code> <code class="plain">Parent1 {</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Method inside first parent class</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">fun() {</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement if this method is called</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Parent1"</code><code class="plain">);</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="plain">}</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="comments">// Class 2</code></div>
        <div class="line number20 index19 alt1"><code class="comments">// Second Parent Class</code></div>
        <div class="line number21 index20 alt2"><code class="keyword">class</code> <code class="plain">Parent2 {</code></div>
        <div class="line number22 index21 alt1">&nbsp;</div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Method inside first parent class</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">fun() {</code></div>
        <div class="line number25 index24 alt2">&nbsp;</div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement if this method is called</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Parent2"</code><code class="plain">);</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number29 index28 alt2"><code class="plain">}</code></div>
        <div class="line number30 index29 alt1">&nbsp;</div>
        <div class="line number31 index30 alt2"><code class="comments">// Class 3</code></div>
        <div class="line number32 index31 alt1"><code class="comments">// Trying to be child of both the classes</code></div>
        <div class="line number33 index32 alt2"><code class="keyword">class</code> <code class="plain">Test </code><code class="keyword">extends</code> <code class="plain">Parent1, Parent2 {</code></div>
        <div class="line number34 index33 alt1">&nbsp;</div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[]) {</code></div>
        <div class="line number37 index36 alt2">&nbsp;</div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating object of class in main() method</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Test t = </code><code class="keyword">new</code> <code class="plain">Test();</code></div>
        <div class="line number40 index39 alt1">&nbsp;</div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Trying to call above functions of class where</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Error is thrown as this class is inheriting</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// multiple classes</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t.fun();</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number46 index45 alt1"><code class="plain">}</code></div>
        &nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:&nbsp;</strong>Compilation error is thrown</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20210713013620/Screenshot20210713at13552AM.png" alt="" /></p>
        <blockquote>
        <p><strong>Conclusion:</strong>&nbsp;As depicted from code above, on calling the method fun() using Test object will cause complications such as whether to call Parent1&rsquo;s fun() or Parent2&rsquo;s fun() method.&nbsp;</p>
        </blockquote>
        <p><strong>Example 2:</strong></p>
        <pre>          GrandParent
                           /     \
                          /       \
                      Parent1      Parent2
                          \       /
                           \     /
                             Test</pre>
        <p>The code is as follows</p>
        <div class="noIdeBtnDiv">
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate Unsupportance of</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Multiple Inheritance</code></div>
        <div class="line number3 index2 alt2"><code class="comments">// Diamond Problem Similar Scenario</code></div>
        <div class="line number4 index3 alt1">&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="comments">// Importing input output classes</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="comments">//&nbsp; Class 1</code></div>
        <div class="line number9 index8 alt2"><code class="comments">// A Grand parent class in diamond</code></div>
        <div class="line number10 index9 alt1"><code class="keyword">class</code> <code class="plain">GrandParent {</code></div>
        <div class="line number11 index10 alt2">&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">fun() {</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement to be executed when this method is called</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Grandparent"</code><code class="plain">);</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="plain">}</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="comments">// Class 2</code></div>
        <div class="line number20 index19 alt1"><code class="comments">// First Parent class</code></div>
        <div class="line number21 index20 alt2"><code class="keyword">class</code> <code class="plain">Parent1 </code><code class="keyword">extends</code> <code class="plain">GrandParent {</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">fun() {</code></div>
        <div class="line number23 index22 alt2">&nbsp;</div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement to be executed when this method is called</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Parent1"</code><code class="plain">);</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number27 index26 alt2"><code class="plain">}</code></div>
        <div class="line number28 index27 alt1">&nbsp;</div>
        <div class="line number29 index28 alt2"><code class="comments">// Class 3</code></div>
        <div class="line number30 index29 alt1"><code class="comments">// Second Parent Class</code></div>
        <div class="line number31 index30 alt2"><code class="keyword">class</code> <code class="plain">Parent2 </code><code class="keyword">extends</code> <code class="plain">GrandParent {</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">fun() {</code></div>
        <div class="line number33 index32 alt2">&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement to be executed when this method is called</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Parent2"</code><code class="plain">);</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number37 index36 alt2"><code class="plain">}</code></div>
        <div class="line number38 index37 alt1">&nbsp;</div>
        <div class="line number39 index38 alt2"><code class="comments">// Class 4</code></div>
        <div class="line number40 index39 alt1"><code class="comments">// Inheriting from multiple classes</code></div>
        <div class="line number41 index40 alt2"><code class="keyword">class</code> <code class="plain">Test </code><code class="keyword">extends</code> <code class="plain">Parent1, Parent2 {</code></div>
        <div class="line number42 index41 alt1">&nbsp;</div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[]) {</code></div>
        <div class="line number45 index44 alt2">&nbsp;</div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating object of this class i main() method</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Test t = </code><code class="keyword">new</code> <code class="plain">Test();</code></div>
        <div class="line number48 index47 alt1">&nbsp;</div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Now calling fun() method from its parent classes</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// which will throw compilation error</code></div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t.fun();</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number53 index52 alt2"><code class="plain">}</code></div>
        &nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong>&nbsp;</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20210713060539/Screenshot20210713at60518AM.png" alt="" /></p>
        <p>Again it throws compiler error when run() method as multiple inheritances cause a diamond problem when allowed in other languages like C++. From the code, we see that: On calling the method fun() using Test object will cause complications such as whether to call Parent1&rsquo;s fun() or Child&rsquo;s fun() method. Therefore, in order to avoid such complications, Java does not support multiple inheritances of classes.</p>
        <p>Multiple inheritance is not supported by Java using classes, handling the complexity that causes due to multiple inheritances is very complex. It creates problems during various operations like casting, constructor chaining, etc, and the above all reason is that there are very few scenarios on which we actually need multiple inheritances, so better to omit it for keeping things simple and straightforward.<br />&nbsp;&nbsp;<br /><strong>How are the above problems handled for&nbsp;</strong><a href="https://www.geeksforgeeks.org/default-methods-java/"><strong>Default Methods and Interfaces</strong></a><strong>?&nbsp;</strong><br />Java 8 supports default methods where interfaces can provide a default implementation of methods. And a class can implement two or more interfaces. In case both the implemented interfaces contain default methods with the same method signature, the implementing class should explicitly specify which default method is to be used, or it should override the default method.&nbsp;</p>
        <p><strong>Example 3:</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist3-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist3-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate Multiple Inheritance</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// through default methods</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Interface 1</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">interface</code> <code class="plain">PI1 {</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Default method</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">default</code> <code class="keyword">void</code> <code class="plain">show()</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement if method is called</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// from interface 1</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Default PI1"</code><code class="plain">);</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number15 index14 alt2"><code class="plain">}</code></div>
        <div class="line number16 index15 alt1">&nbsp;</div>
        <div class="line number17 index16 alt2"><code class="comments">// Interface 2</code></div>
        <div class="line number18 index17 alt1"><code class="keyword">interface</code> <code class="plain">PI2 {</code></div>
        <div class="line number19 index18 alt2">&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Default method</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">default</code> <code class="keyword">void</code> <code class="plain">show()</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number23 index22 alt2">&nbsp;</div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement if method is called</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// from interface 2</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Default PI2"</code><code class="plain">);</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number28 index27 alt1"><code class="plain">}</code></div>
        <div class="line number29 index28 alt2">&nbsp;</div>
        <div class="line number30 index29 alt1"><code class="comments">// Main class</code></div>
        <div class="line number31 index30 alt2"><code class="comments">// Implementation class code</code></div>
        <div class="line number32 index31 alt1"><code class="keyword">class</code> <code class="plain">TestClass </code><code class="keyword">implements</code> <code class="plain">PI1, PI2 {</code></div>
        <div class="line number33 index32 alt2">&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Overriding default show method</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">show()</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number37 index36 alt2">&nbsp;</div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Using super keyword to call the show</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// method of PI1 interface</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PI1.</code><code class="keyword">super</code><code class="plain">.show();</code></div>
        <div class="line number41 index40 alt2">&nbsp;</div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Using super keyword to call the show</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// method of PI2 interface</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PI2.</code><code class="keyword">super</code><code class="plain">.show();</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number46 index45 alt1">&nbsp;</div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Mai driver method</code></div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number50 index49 alt1">&nbsp;</div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating object of this class in main() method</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">TestClass d = </code><code class="keyword">new</code> <code class="plain">TestClass();</code></div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">d.show();</code></div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number55 index54 alt2"><code class="plain">}</code></div>
        <div class="line number55 index54 alt2">&nbsp;</div>
        &nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Default PI1
                Default PI2</pre>
        </div>
        <blockquote>
        <p><strong>Note:</strong>&nbsp;If we remove the<strong>&nbsp;</strong>implementation of default method from &ldquo;TestClass&rdquo;, we get a compiler error. If there is a diamond through interfaces, then there is no issue if none of the middle interfaces provide implementation of root interface. If they provide implementation, then implementation can be accessed as above using super keyword.</p>
        </blockquote>
        <p><strong>Example 4:</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist4-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist4-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate How Diamond Problem</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Is Handled in case of Default Methods</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Interface 1</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">interface</code> <code class="plain">GPI {</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Default method</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">default</code> <code class="keyword">void</code> <code class="plain">show()</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Default GPI"</code><code class="plain">);</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number14 index13 alt1"><code class="plain">}</code></div>
        <div class="line number15 index14 alt2">&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="comments">// Interface 2</code></div>
        <div class="line number17 index16 alt2"><code class="comments">// Extending the above interface</code></div>
        <div class="line number18 index17 alt1"><code class="keyword">interface</code> <code class="plain">PI1 </code><code class="keyword">extends</code> <code class="plain">GPI {</code></div>
        <div class="line number19 index18 alt2"><code class="plain">}</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="comments">// Interface 3</code></div>
        <div class="line number22 index21 alt1"><code class="comments">// Extending the above interface</code></div>
        <div class="line number23 index22 alt2"><code class="keyword">interface</code> <code class="plain">PI2 </code><code class="keyword">extends</code> <code class="plain">GPI {</code></div>
        <div class="line number24 index23 alt1"><code class="plain">}</code></div>
        <div class="line number25 index24 alt2">&nbsp;</div>
        <div class="line number26 index25 alt1"><code class="comments">// Main class</code></div>
        <div class="line number27 index26 alt2"><code class="comments">// Implementation class code</code></div>
        <div class="line number28 index27 alt1"><code class="keyword">class</code> <code class="plain">TestClass </code><code class="keyword">implements</code> <code class="plain">PI1, PI2 {</code></div>
        <div class="line number29 index28 alt2">&nbsp;</div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number33 index32 alt2">&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating object of this class</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// in main() method</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">TestClass d = </code><code class="keyword">new</code> <code class="plain">TestClass();</code></div>
        <div class="line number37 index36 alt2">&nbsp;</div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Now calling the function defined in interface 1</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// from whom Interface 2and 3 are deriving</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">d.show();</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number42 index41 alt1"><code class="plain">}</code></div>
        <div class="line number42 index41 alt1">&nbsp;</div>
        &nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Default GPI<br /><br /></pre>
        <h1>Polymorphism in Java</h1>
        <p>The word polymorphism means having many forms. In simple words, we can define polymorphism as the ability of a message to be displayed in more than one form.&nbsp;</p>
        <p><strong>Real-life Illustration:&nbsp;</strong>Polymorphism</p>
        <p>A person at the same time can have different characteristics. Like a man at the same time is a father, a husband, an employee. So the same person possesses different behavior in different situations. This is called polymorphism.&nbsp;<br />Polymorphism is considered one of the important features of Object-Oriented Programming. Polymorphism allows us to perform a single action in different ways. In other words, polymorphism allows you to define one interface and have multiple implementations. The word &ldquo;poly&rdquo; means many and &ldquo;morphs&rdquo; means forms, So it means many forms.</p>
        <p><strong>Types of polymorphism</strong></p>
        <p>In Java polymorphism is mainly divided into two types:&nbsp;</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <ul>
        <li>Compile-time Polymorphism</li>
        <li>Runtime Polymorphism</li>
        </ul>
        <p><strong>Type 1:&nbsp;</strong>Compile-time polymorphism</p>
        <p>It is also known as static polymorphism. This type of polymorphism is achieved by function overloading or operator overloading.&nbsp;</p>
        <blockquote>
        <p><strong>Note:</strong>&nbsp;But Java doesn&rsquo;t support the Operator Overloading.</p>
        </blockquote>
        <p><img src="http://media.geeksforgeeks.org/wp-content/uploads/OverridingVsOverloading.png" alt="" /></p>
        <p><strong>Method Overloading</strong>: When there are multiple functions with the same name but different parameters then these functions are said to be&nbsp;<strong>overloaded</strong>. Functions can be overloaded by change in the number of arguments or/and a change in the type of arguments.</p>
        <p><strong>Example 1</strong>&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program for Method overloading</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// By using Different Types of Arguments&nbsp;</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Class 1</code></div>
        <div class="line number5 index4 alt2"><code class="comments">// Helper class</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">Helper {</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method with 2 integer parameters</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">Multiply(</code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b)</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number11 index10 alt2">&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns product of integer numbers</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">a * b;</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number15 index14 alt2">&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 2</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// With same name but with 2 double parameters</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">double</code> <code class="plain">Multiply(</code><code class="keyword">double</code> <code class="plain">a, </code><code class="keyword">double</code> <code class="plain">b)</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returns product of double numbers</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">a * b;</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number24 index23 alt1"><code class="plain">}</code></div>
        <div class="line number25 index24 alt2">&nbsp;</div>
        <div class="line number26 index25 alt1"><code class="comments">// Class 2</code></div>
        <div class="line number27 index26 alt2"><code class="comments">// Main class</code></div>
        <div class="line number28 index27 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number29 index28 alt2">&nbsp;</div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number33 index32 alt2">&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling method by passing</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// input as in arguments</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(Helper.Multiply(</code><code class="value">2</code><code class="plain">, </code><code class="value">4</code><code class="plain">));</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(Helper.Multiply(</code><code class="value">5.5</code><code class="plain">, </code><code class="value">6.3</code><code class="plain">));</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number39 index38 alt2"><code class="plain">}</code></div>
        </div>
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output:</strong>&nbsp;
        <pre>8
                34.65</pre>
        <p>&nbsp;</p>
        </div>
        <p><strong>Example 2</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="comments">// Java program for Method Overloading</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// by Using Different Numbers of Arguments</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Class 1</code></div>
        <div class="line number5 index4 alt2"><code class="comments">// Helper class</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">Helper {</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 1</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Multiplication of 2 numbers</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">Multiply(</code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b)</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number12 index11 alt1">&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Return product</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">a * b;</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1">&nbsp;</div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 2</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// // Multiplication of 3 numbers</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">Multiply(</code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b, </code><code class="keyword">int</code> <code class="plain">c)</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number21 index20 alt2">&nbsp;</div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Return product</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">a * b * c;</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number25 index24 alt2"><code class="plain">}</code></div>
        <div class="line number26 index25 alt1">&nbsp;</div>
        <div class="line number27 index26 alt2"><code class="comments">// Class 2</code></div>
        <div class="line number28 index27 alt1"><code class="comments">// Main class</code></div>
        <div class="line number29 index28 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number30 index29 alt1">&nbsp;</div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number34 index33 alt1">&nbsp;</div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling method by passing</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// input as in arguments</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(Helper.Multiply(</code><code class="value">2</code><code class="plain">, </code><code class="value">4</code><code class="plain">));</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(Helper.Multiply(</code><code class="value">2</code><code class="plain">, </code><code class="value">7</code><code class="plain">, </code><code class="value">3</code><code class="plain">));</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number40 index39 alt1"><code class="plain">}</code></div>
        &nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output:</strong>&nbsp;
        <pre>8
                42</pre>
        <p>&nbsp;</p>
        </div>
        <p><strong>Type 2:&nbsp;</strong><a href="https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/">Runtime polymorphism</a></p>
        <p>It is also known as Dynamic Method Dispatch. It is a process in which a function call to the overridden method is resolved at Runtime. This type of polymorphism is achieved by Method Overriding.&nbsp;<a href="https://www.geeksforgeeks.org/overriding-in-java/"><strong>Method overriding</strong></a>, on the other hand, occurs when a derived class has a definition for one of the member functions of the base class. That base function is said to be&nbsp;<strong>overridden</strong>.</p>
        <p><strong>Example</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist3-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist3-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;
        <div class="line number1 index0 alt2"><code class="comments">// Java Program for Method Overriding</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="comments">// Class 1</code></div>
        <div class="line number4 index3 alt1"><code class="comments">// Helper class</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">Parent {</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method of parent class</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">Print()</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"parent class"</code><code class="plain">);</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number14 index13 alt1"><code class="plain">}</code></div>
        <div class="line number15 index14 alt2">&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="comments">// Class 2</code></div>
        <div class="line number17 index16 alt2"><code class="comments">// Helper class</code></div>
        <div class="line number18 index17 alt1"><code class="keyword">class</code> <code class="plain">subclass1 </code><code class="keyword">extends</code> <code class="plain">Parent {</code></div>
        <div class="line number19 index18 alt2">&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">Print() { System.out.println(</code><code class="string">"subclass1"</code><code class="plain">); }</code></div>
        <div class="line number22 index21 alt1"><code class="plain">}</code></div>
        <div class="line number23 index22 alt2">&nbsp;</div>
        <div class="line number24 index23 alt1"><code class="comments">// Class 3</code></div>
        <div class="line number25 index24 alt2"><code class="comments">// Helper class</code></div>
        <div class="line number26 index25 alt1"><code class="keyword">class</code> <code class="plain">subclass2 </code><code class="keyword">extends</code> <code class="plain">Parent {</code></div>
        <div class="line number27 index26 alt2">&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">Print()</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number31 index30 alt2">&nbsp;</div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"subclass2"</code><code class="plain">);</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number35 index34 alt2"><code class="plain">}</code></div>
        <div class="line number36 index35 alt1">&nbsp;</div>
        <div class="line number37 index36 alt2"><code class="comments">// Class 4</code></div>
        <div class="line number38 index37 alt1"><code class="comments">// Main class</code></div>
        <div class="line number39 index38 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number40 index39 alt1">&nbsp;</div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number44 index43 alt1">&nbsp;</div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating object of class 1</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Parent a;</code></div>
        <div class="line number47 index46 alt2">&nbsp;</div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Now we will be calling print methods</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// inside main() method</code></div>
        <div class="line number50 index49 alt1">&nbsp;</div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">a = </code><code class="keyword">new</code> <code class="plain">subclass1();</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">a.Print();</code></div>
        <div class="line number53 index52 alt2">&nbsp;</div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">a = </code><code class="keyword">new</code> <code class="plain">subclass2();</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">a.Print();</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number57 index56 alt2"><code class="plain">}</code></div>
        <div class="line number57 index56 alt2">&nbsp;</div>
        </div>
        <div class="code-container">&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output:</strong>&nbsp;
        <pre>subclass1
                subclass2</pre>
        <p>&nbsp;</p>
        </div>
        <p>Output explanation:&nbsp;</p>
        <p>Here in this program, When an object of child class is created, then the method inside the child class is called. This is because The method in the parent class is overridden by the child class. Since The method is overridden, This method has more priority than the parent method inside the child class. So, the body inside the child class is executed.</p>
        <h1>Dynamic Method Dispatch or Runtime Polymorphism in Java</h1>
        <p>Method overriding is one of the ways in which Java supports Runtime Polymorphism. Dynamic method dispatch is the mechanism by which a call to an overridden method is resolved at run time, rather than compile time.</p>
        <ul>
        <li>When an overridden method is called through a superclass reference, Java determines which version(superclass/subclasses) of that method is to be executed based upon the type of the object being referred to at the time the call occurs. Thus, this determination is made at run time.</li>
        <li>At run-time, it depends on the type of the object being referred to (not the type of the reference variable) that determines which version of an overridden method will be executed</li>
        <li>A superclass reference variable can refer to a subclass object. This is also known as upcasting. Java uses this fact to resolve calls to overridden methods at run time.</li>
        </ul>
        <p>&nbsp;</p>
        <p>Therefore, if a superclass contains a method that is overridden by a subclass, then when different types of objects are referred to through a superclass reference variable, different versions of the method are executed. Here is an example that illustrates dynamic method dispatch:</p>
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="comments">// A Java program to illustrate Dynamic Method</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Dispatch using hierarchical inheritance</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">A</code></div>
        <div class="line number4 index3 alt1"><code class="plain">{</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">m1()</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Inside A's m1 method"</code><code class="plain">);</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number9 index8 alt2"><code class="plain">}</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="keyword">class</code> <code class="plain">B </code><code class="keyword">extends</code> <code class="plain">A</code></div>
        <div class="line number12 index11 alt1"><code class="plain">{</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// overriding m1()</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">m1()</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Inside B's m1 method"</code><code class="plain">);</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number18 index17 alt1"><code class="plain">}</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="keyword">class</code> <code class="plain">C </code><code class="keyword">extends</code> <code class="plain">A</code></div>
        <div class="line number21 index20 alt2"><code class="plain">{</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// overriding m1()</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">m1()</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Inside C's m1 method"</code><code class="plain">);</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number27 index26 alt2"><code class="plain">}</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number29 index28 alt2"><code class="comments">// Driver class</code></div>
        <div class="line number30 index29 alt1"><code class="keyword">class</code> <code class="plain">Dispatch</code></div>
        <div class="line number31 index30 alt2"><code class="plain">{</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// object of type A</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">A a = </code><code class="keyword">new</code> <code class="plain">A();</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// object of type B</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">B b = </code><code class="keyword">new</code> <code class="plain">B();</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// object of type C</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">C c = </code><code class="keyword">new</code> <code class="plain">C();</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number43 index42 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// obtain a reference of type A</code></div>
        <div class="line number44 index43 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">A ref;</code></div>
        <div class="line number45 index44 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number46 index45 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// ref refers to an A object</code></div>
        <div class="line number47 index46 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ref = a;</code></div>
        <div class="line number48 index47 alt1 highlighted"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number49 index48 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// calling A's version of m1()</code></div>
        <div class="line number50 index49 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ref.m1();</code></div>
        <div class="line number51 index50 alt2 highlighted"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number52 index51 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// now ref refers to a B object</code></div>
        <div class="line number53 index52 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ref = b;</code></div>
        <div class="line number54 index53 alt1 highlighted"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number55 index54 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// calling B's version of m1()</code></div>
        <div class="line number56 index55 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ref.m1();</code></div>
        <div class="line number57 index56 alt2 highlighted"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number58 index57 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// now ref refers to a C object</code></div>
        <div class="line number59 index58 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ref = c;</code></div>
        <div class="line number60 index59 alt1 highlighted"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number61 index60 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// calling C's version of m1()</code></div>
        <div class="line number62 index61 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ref.m1();</code></div>
        <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number64 index63 alt1"><code class="plain">}</code></div>
        &nbsp;</div>
        <div class="code-container">&nbsp;</div>
        </div>
        <p>Output:</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <pre>Inside A's m1 method
                Inside B's m1 method
                Inside C's m1 method
                </pre>
        <p><strong>Explanation :</strong></p>
        <p>The above program creates one superclass called A and it&rsquo;s two subclasses B and C. These subclasses overrides m1( ) method.</p>
        <ul>
        <ol>
        <li>Inside the main() method in Dispatch class, initially objects of type A, B, and C are declared.
        <pre>A a = new A(); // object of type A
                B b = new B(); // object of type B
                C c = new C(); // object of type C
                </pre>
        <p>&nbsp;</p>
        </li>
        <li>Now a reference of type A, called ref, is also declared, initially it will point to null.
        <pre>A ref; // obtain a reference of type A
                </pre>
        <p><a href="https://media.geeksforgeeks.org/wp-content/uploads/w.jpeg"><img class="alignnone size-full wp-image-167425" src="https://media.geeksforgeeks.org/wp-content/uploads/w.jpeg" alt="w" width="222" height="130" /></a></p>
        </li>
        <li>Now we are assigning a reference to each&nbsp;<strong>type of object</strong>&nbsp;(either A&rsquo;s or B&rsquo;s or C&rsquo;s) to&nbsp;<em>ref</em>, one-by-one, and uses that reference to invoke m1( ). As the output shows, the version of m1( ) executed is determined&nbsp;<strong>by the type of object being referred to at the time of the call.</strong>
        <pre>ref = a; // r refers to an A object
                ref.m1(); // calling A's version of m1()
                </pre>
        <p><a href="https://media.geeksforgeeks.org/wp-content/uploads/q1.jpeg"><img class="alignnone size-full wp-image-167426" src="https://media.geeksforgeeks.org/wp-content/uploads/q1.jpeg" alt="q" width="565" height="424" /></a></p>
        <pre>ref = b; // now r refers to a B object
                ref.m1(); // calling B's version of m1()
                </pre>
        <p><a href="https://media.geeksforgeeks.org/wp-content/uploads/q2.jpeg"><img class="alignnone size-full wp-image-167427" src="https://media.geeksforgeeks.org/wp-content/uploads/q2.jpeg" alt="q" width="758" height="486" /></a></p>
        <pre>ref = c; // now r refers to a C object
                ref.m1(); // calling C's version of m1()
                </pre>
        <p>&nbsp;</p>
        </li>
        </ol>
        </ul>
        <p align="center"><strong>Runtime Polymorphism with Data Members</strong></p>
        <p>In Java, we can override methods only, not the variables(data members), so&nbsp;<strong>runtime polymorphism cannot be achieved by data members.</strong>&nbsp;For example :</p>
        <div class="code-block">
        <div class="code-gutter">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate the fact that</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// runtime polymorphism cannot be achieved</code></div>
        <div class="line number3 index2 alt2"><code class="comments">// by data members</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="comments">// class A</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">A</code></div>
        <div class="line number7 index6 alt2"><code class="plain">{</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">10</code><code class="plain">;</code></div>
        <div class="line number9 index8 alt2"><code class="plain">}</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="comments">// class B</code></div>
        <div class="line number12 index11 alt1"><code class="keyword">class</code> <code class="plain">B </code><code class="keyword">extends</code> <code class="plain">A</code></div>
        <div class="line number13 index12 alt2"><code class="plain">{</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">x = </code><code class="value">20</code><code class="plain">;</code></div>
        <div class="line number15 index14 alt2"><code class="plain">}</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number17 index16 alt2"><code class="comments">// Driver class</code></div>
        <div class="line number18 index17 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Test</code></div>
        <div class="line number19 index18 alt2"><code class="plain">{</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number22 index21 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">A a = </code><code class="keyword">new</code> <code class="plain">B(); </code><code class="comments">// object of type B</code></div>
        <div class="line number23 index22 alt2 highlighted"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number24 index23 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Data member of class A will be accessed</code></div>
        <div class="line number25 index24 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(a.x);</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number27 index26 alt2"><code class="plain">}</code></div>
        </div>
        <div class="code-container">
        <div class="syntaxhighlighter nogutter">Output:</div>
        </div>
        </div>
        <pre>10
                </pre>
        <p><strong>Explanation :</strong>&nbsp;In above program, both the class A(super class) and B(sub class) have a common variable &lsquo;x&rsquo;. Now we make object of class B, referred by &lsquo;a&rsquo; which is of type of class A. Since variables are not overridden, so the statement &ldquo;a.x&rdquo; will&nbsp;<strong>always</strong>&nbsp;refer to data member of super class.</p>
        <p align="center"><strong>Advantages of Dynamic Method Dispatch</strong></p>
        <ol>
        <li>Dynamic method dispatch allow Java to support&nbsp;<a href="https://www.geeksforgeeks.org/overriding-in-java/">overriding of methods</a>&nbsp;which is central for run-time polymorphism.</li>
        <li>It allows a class to specify methods that will be common to all of its derivatives, while allowing subclasses to define the specific implementation of some or all of those methods.</li>
        <li>It also allow subclasses to add its specific methods subclasses to define the specific implementation of some.</li>
        </ol>
        <p align="center"><strong><a href="https://www.geeksforgeeks.org/static-vs-dynamic-binding-in-java/">Static vs Dynamic binding</a></strong></p>
        <ul>
        <li>Static binding is done during compile-time while dynamic binding is done during run-time.</li>
        <li>private, final and static methods and variables uses static binding and bonded by compiler while overridden methods are bonded during runtime based upon type of runtime object</li>
        </ul>
        <p>&nbsp;</p>
        </div>`,
    },
    {
        topic: "Method overloading & Overiding",
        content: `<h1>Overloading in Java</h1>
        <p>Overloading allows different methods to have the same name, but different signatures where the signature can differ by the number of input parameters or type of input parameters or both. Overloading is related to compile-time (or static) polymorphism.</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_656955" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate working of method</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// overloading in Java.</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Sum {</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Overloaded sum(). This sum takes two int parameters</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">sum(</code><code class="keyword">int</code> <code class="plain">x, </code><code class="keyword">int</code> <code class="plain">y)</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(x + y);</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Overloaded sum(). This sum takes three int parameters</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">sum(</code><code class="keyword">int</code> <code class="plain">x, </code><code class="keyword">int</code> <code class="plain">y, </code><code class="keyword">int</code> <code class="plain">z)</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(x + y + z);</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Overloaded sum(). This sum takes two double parameters</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">double</code> <code class="plain">sum(</code><code class="keyword">double</code> <code class="plain">x, </code><code class="keyword">double</code> <code class="plain">y)</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">(x + y);</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Driver code</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Sum s = </code><code class="keyword">new</code> <code class="plain">Sum();</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s.sum(</code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">));</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s.sum(</code><code class="value">10</code><code class="plain">, </code><code class="value">20</code><code class="plain">, </code><code class="value">30</code><code class="plain">));</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s.sum(</code><code class="value">10.5</code><code class="plain">, </code><code class="value">20.5</code><code class="plain">));</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number32 index31 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output :</p>
        <pre>30
        60
        31.0
        </pre>
        <p><strong>Question Arises:<br />Q. What if the exact prototype does not match with arguments.</strong><br />Ans.<br />Priority wise, compiler take these steps:</p>
        <ol>
        <li>Type Conversion but to higher type(in terms of range) in same family.</li>
        <li>Type conversion to next higher family(suppose if there is no long data type available for an int data type, then it will search for the float data type).</li>
        </ol>
        <p>Let&rsquo;s take an example to clear the concept:-</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_632651" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">class</code> <code class="plain">Demo {</code></div>
        <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">show(</code><code class="keyword">int</code> <code class="plain">x)</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"In int"</code> <code class="plain">+ x);</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">show(String s)</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"In String"</code> <code class="plain">+ s);</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">show(</code><code class="keyword">byte</code> <code class="plain">b)</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"In byte"</code> <code class="plain">+ b);</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number14 index13 alt1"><code class="plain">}</code></div>
        <div class="line number15 index14 alt2"><code class="keyword">class</code> <code class="plain">UseDemo {</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">byte</code> <code class="plain">a = </code><code class="value">25</code><code class="plain">;</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Demo obj = </code><code class="keyword">new</code> <code class="plain">Demo();</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.show(a); </code><code class="comments">// it will go to</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// byte argument</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.show(</code><code class="string">"hello"</code><code class="plain">); </code><code class="comments">// String</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.show(</code><code class="value">250</code><code class="plain">); </code><code class="comments">// Int</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.show(</code><code class="string">'A'</code><code class="plain">); </code><code class="comments">// Since char is</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// not available, so the datatype</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// higher than char in terms of</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// range is int.</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.show(</code><code class="string">"A"</code><code class="plain">); </code><code class="comments">// String</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.show(</code><code class="value">7.5</code><code class="plain">); </code><code class="comments">// since float datatype</code></div>
        <div class="line number30 index29 alt1"><code class="comments">// is not available and so it's higher</code></div>
        <div class="line number31 index30 alt2"><code class="comments">// datatype, so at this step their</code></div>
        <div class="line number32 index31 alt1"><code class="comments">// will be an error.</code></div>
        <div class="line number33 index32 alt2"><code class="plain">}</code></div>
        <div class="line number34 index33 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p><strong>What is the advantage?</strong><br />We don&rsquo;t have to create and remember different names for functions doing the same thing. For example, in our code, if overloading was not supported by Java, we would have to create method names like sum1, sum2, &hellip; or sum2Int, sum3Int, &hellip; etc.</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p><strong>Can we overload methods on return type?</strong><br />We&nbsp;<strong>cannot</strong>&nbsp;overload by return type. This behavior is same in C++. Refer this for details</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_130169" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code></div>
        <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">foo() { </code><code class="keyword">return</code> <code class="value">10</code><code class="plain">; }</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// compiler error: foo() is already defined</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">char</code> <code class="plain">foo() { </code><code class="keyword">return</code> <code class="string">'a'</code><code class="plain">; }</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number10 index9 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>However, Overloading methods on return type are possible in cases where the data type of the function being called is explicitly specified. Look at the examples below :</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_377261" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate the working of method</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// overloading in static methods</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">foo(</code><code class="keyword">int</code> <code class="plain">a) { </code><code class="keyword">return</code> <code class="value">10</code><code class="plain">; }</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">char</code> <code class="plain">foo(</code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b) { </code><code class="keyword">return</code> <code class="string">'a'</code><code class="plain">; }</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(foo(</code><code class="value">1</code><code class="plain">));</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(foo(</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">));</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number13 index12 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output:</p>
        <pre>10
        a
        </pre>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_521006" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate working of method</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// overloading in&nbsp; methods</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">A {</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">foo(</code><code class="keyword">int</code> <code class="plain">a) { </code><code class="keyword">return</code> <code class="value">10</code><code class="plain">; }</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">char</code> <code class="plain">foo(</code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b) { </code><code class="keyword">return</code> <code class="string">'a'</code><code class="plain">; }</code></div>
        <div class="line number7 index6 alt2"><code class="plain">}</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number9 index8 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">A a = </code><code class="keyword">new</code> <code class="plain">A();</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(a.foo(</code><code class="value">1</code><code class="plain">));</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(a.foo(</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">));</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output:</p>
        <pre>10
        a
        </pre>
        <p><strong>Can we overload static methods?</strong><br />The answer is &lsquo;<strong>Yes</strong>&rsquo;. We can have two ore more static methods with same name, but differences in input parameters. For example, consider the following Java program. Refer&nbsp;<a href="https://www.geeksforgeeks.org/can-we-overload-or-override-static-methods-in-java/">this</a>&nbsp;for details.</p>
        <p><strong>Can we overload methods that differ only by static keyword?</strong><br />We&nbsp;<strong>cannot</strong>&nbsp;overload two methods in Java if they differ only by static keyword (number of parameters and types of parameters is same). See following Java program for example. Refer&nbsp;<a href="https://www.geeksforgeeks.org/can-we-overload-or-override-static-methods-in-java/">this</a>&nbsp;for details.</p>
        <p><strong>Can we overload main() in Java?</strong><br />Like other static methods, we&nbsp;<strong>can</strong>&nbsp;<a href="https://www.geeksforgeeks.org/gfact-48-overloading-main-in-java/">overload main() in Java</a>. Refer overloading main() in Java for more details.</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_539382" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// A Java program with overloaded main()</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Test {</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Normal main()</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Hi Geek (from main)"</code><code class="plain">);</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Test.main(</code><code class="string">"Geek"</code><code class="plain">);</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Overloaded main methods</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String arg1)</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Hi, "</code> <code class="plain">+ arg1);</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Test.main(</code><code class="string">"Dear Geek"</code><code class="plain">, </code><code class="string">"My Geek"</code><code class="plain">);</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String arg1, String arg2)</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Hi, "</code> <code class="plain">+ arg1 + </code><code class="string">", "</code> <code class="plain">+ arg2);</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output :</p>
        <pre>Hi Geek (from main)
        Hi, Geek
        Hi, Dear Geek, My Geek
        </pre>
        <p><strong>Does Java support Operator Overloading?</strong><br />Unlike C++, Java doesn&rsquo;t allow user-defined overloaded operators. Internally Java overloads operators, for example, + is overloaded for concatenation.</p>
        <p><strong>What is the difference between Overloading and&nbsp;<a href="https://www.geeksforgeeks.org/overriding-in-java/">Overriding</a>?</strong></p>
        <ul>
        <li>Overloading is about same function have different signatures. Overriding is about same function, same signature but different classes connected through inheritance.<br /><a href="http://media.geeksforgeeks.org/wp-content/uploads/OverridingVsOverloading.png"><img class="alignnone size-full wp-image-146254" src="http://media.geeksforgeeks.org/wp-content/uploads/OverridingVsOverloading.png" alt="OverridingVsOverloading" width="488" height="369" /></a></li>
        <li>Overloading is an example of compiler time polymorphism and overriding is an example of run time polymorphism.</li>
        </ul>
        <h1>Different ways of Method Overloading in Java</h1>
        <p><a href="https://www.geeksforgeeks.org/overloading-in-java/">Method overloading</a>&nbsp;in java is based on the number and type of the parameters passed as an argument to the methods. We can not define more than one method with the same name, Order, and type of the arguments. It would be a compiler error. The compiler does not consider the return type while differentiating the overloaded method. But you cannot declare two methods with the same signature and different return types. It will throw a compile-time error.&nbsp;If both methods have the same parameter types, but different return types, then it is not possible.</p>
        <p>Java can distinguish the methods with&nbsp;<strong>different method signatures</strong>. i.e. the methods can have the same name but with different parameters list (i.e. the number of the parameters, the order of the parameters, and data types of the parameters) within the same class.&nbsp;</p>
        <p>Geeks, now you would be up to why do we need method overloading?</p>
        <p>If we need to do some kind of operation in different ways i.e. for different inputs. In the example described below, we are doing the addition operation for different inputs. It is hard to find many meaningful names for a single action.&nbsp;</p>
        <h3><strong>Ways of Overloading Methods</strong></h3>
        <p>Method overloading can be done by changing:&nbsp;</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <ol>
        <li>The number of parameters in two methods.</li>
        <li>The data types of the parameters of methods.</li>
        <li>The Order of the parameters of methods.</li>
        </ol>
        <p>Let us propose examples in order to illustrate each way while overloading methods. They are as follows: &nbsp;&nbsp;</p>
        <p><strong>Method 1:&nbsp;</strong>By changing the number of parameters<strong>.</strong>&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_664166" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate Method Overloading</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// By Changing the Number of Parameters</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing required classes</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// Class 1</code></div>
        <div class="line number8 index7 alt1"><code class="comments">// Helper class</code></div>
        <div class="line number9 index8 alt2"><code class="keyword">class</code> <code class="plain">Addition {</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 1</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Adding two integer values</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">add(</code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b)</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number15 index14 alt2">&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum = a + b;</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">sum;</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number19 index18 alt2">&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 2</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Adding three integer values</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">add(</code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b, </code><code class="keyword">int</code> <code class="plain">c)</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number24 index23 alt1">&nbsp;</div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum = a + b + c;</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">sum;</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number28 index27 alt1"><code class="plain">}</code></div>
        <div class="line number29 index28 alt2">&nbsp;</div>
        <div class="line number30 index29 alt1"><code class="comments">// Class 2</code></div>
        <div class="line number31 index30 alt2"><code class="comments">// Main class</code></div>
        <div class="line number32 index31 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number33 index32 alt2">&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number37 index36 alt2">&nbsp;</div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating object of above class inside main()</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// method</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Addition ob = </code><code class="keyword">new</code> <code class="plain">Addition();</code></div>
        <div class="line number41 index40 alt2">&nbsp;</div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling method to add 3 numbers</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum1 = ob.add(</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">);</code></div>
        <div class="line number44 index43 alt1">&nbsp;</div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing sum of 2 numbers</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"sum of the two integer value :"</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ sum1);</code></div>
        <div class="line number48 index47 alt1">&nbsp;</div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling method to add 3 numbers</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum2 = ob.add(</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">);</code></div>
        <div class="line number51 index50 alt2">&nbsp;</div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing sum of 3 numbers</code></div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"sum of the three integer value :"</code> <code class="plain">+ sum2);</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number56 index55 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>sum of the two integer value :3
        sum of the three integer value :6</pre>
        </div>
        <p><strong>Method 2:&nbsp;</strong>By changing the Data types of the parameters&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_717939" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate Method Overloading</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// By Changing Data Types of the Parameters</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing required classes</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// Class 1</code></div>
        <div class="line number8 index7 alt1"><code class="comments">// Helper class</code></div>
        <div class="line number9 index8 alt2"><code class="keyword">class</code> <code class="plain">Addition {</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Adding three integer values</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">add(</code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b, </code><code class="keyword">int</code> <code class="plain">c)</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum = a + b + c;</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">sum;</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// adding three double values.</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">double</code> <code class="plain">add(</code><code class="keyword">double</code> <code class="plain">a, </code><code class="keyword">double</code> <code class="plain">b, </code><code class="keyword">double</code> <code class="plain">c)</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number22 index21 alt1">&nbsp;</div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">sum = a + b + c;</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">sum;</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number26 index25 alt1"><code class="plain">}</code></div>
        <div class="line number27 index26 alt2">&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number31 index30 alt2">&nbsp;</div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Addition ob = </code><code class="keyword">new</code> <code class="plain">Addition();</code></div>
        <div class="line number33 index32 alt2">&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum2 = ob.add(</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">3</code><code class="plain">);</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"sum of the three integer value :"</code> <code class="plain">+ sum2);</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">sum3 = ob.add(</code><code class="value">1.0</code><code class="plain">, </code><code class="value">2.0</code><code class="plain">, </code><code class="value">3.0</code><code class="plain">);</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"sum of the three double value :"</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ sum3);</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number41 index40 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>sum of the three integer value :6
        sum of the three double value :6.0</pre>
        </div>
        <p><strong>Method 3:&nbsp;</strong>By changing the Order of the parameters&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist3-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist3-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_376631" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate Method Overloading</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// By changing the Order of the Parameters</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing required classes</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// Class 1</code></div>
        <div class="line number8 index7 alt1"><code class="comments">// Helper class</code></div>
        <div class="line number9 index8 alt2"><code class="keyword">class</code> <code class="plain">Geek {</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 1</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">geekIdentity(String name, </code><code class="keyword">int</code> <code class="plain">id)</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number14 index13 alt1">&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing name and id of person</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"geekName :"</code> <code class="plain">+ name + </code><code class="string">" "</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">"Id :"</code> <code class="plain">+ id);</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number19 index18 alt2">&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 2</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">geekIdentity(</code><code class="keyword">int</code> <code class="plain">id, String name)</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number23 index22 alt2">&nbsp;</div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Again printing name and id of person</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Id :"</code> <code class="plain">+ id + </code><code class="string">" "</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">"geekName :"</code> <code class="plain">+ name);</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number28 index27 alt1"><code class="plain">}</code></div>
        <div class="line number29 index28 alt2">&nbsp;</div>
        <div class="line number30 index29 alt1"><code class="comments">// Class 2</code></div>
        <div class="line number31 index30 alt2"><code class="comments">// Main class</code></div>
        <div class="line number32 index31 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number33 index32 alt2">&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number37 index36 alt2">&nbsp;</div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating object of above class</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Geek geek = </code><code class="keyword">new</code> <code class="plain">Geek();</code></div>
        <div class="line number40 index39 alt1">&nbsp;</div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Passing name and id</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Note: Reversing order</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">geek.geekIdentity(</code><code class="string">"Mohit"</code><code class="plain">, </code><code class="value">1</code><code class="plain">);</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">geek.geekIdentity(</code><code class="value">2</code><code class="plain">, </code><code class="string">"shubham"</code><code class="plain">);</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number46 index45 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>geekName :Mohit Id :1
        geekName :shubham Id :2</pre>
        </div>
        <blockquote>
        <p><strong>Note:</strong>&nbsp;Now geeks you must be wondering what will happen when the method signature is the same and the return type is different?</p>
        <p>Here the compiler will give an error as the return value alone is not sufficient for the compiler to figure out which function it has to call. Only if both methods have different parameter types (so, they have a different signature), then Method overloading is possible. &nbsp;</p>
        </blockquote>
        <p><strong>Example 4&nbsp;</strong></p>
        <div class="noIdeBtnDiv">
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist4-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist4-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_431519" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate Error Thrown in</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Method Overloading When Method Signature is Same and</code></div>
        <div class="line number3 index2 alt2"><code class="comments">// ReturnType is Different</code></div>
        <div class="line number4 index3 alt1">&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="comments">// Importing required classes</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="comments">// Class 1</code></div>
        <div class="line number9 index8 alt2"><code class="comments">// Helper class</code></div>
        <div class="line number10 index9 alt1"><code class="keyword">class</code> <code class="plain">Addition {</code></div>
        <div class="line number11 index10 alt2">&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 1</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Adding two integer value</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">add(</code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b)</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Summing up</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum = a + b;</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Returning the sum</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">sum;</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number22 index21 alt1">&nbsp;</div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 2</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Adding three integer value</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">double</code> <code class="plain">add(</code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b)</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">sum = a + b + </code><code class="value">0.0</code><code class="plain">;</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">sum;</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number30 index29 alt1"><code class="plain">}</code></div>
        <div class="line number31 index30 alt2">&nbsp;</div>
        <div class="line number32 index31 alt1"><code class="comments">// Class 2</code></div>
        <div class="line number33 index32 alt2"><code class="comments">// Main class</code></div>
        <div class="line number34 index33 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number35 index34 alt2">&nbsp;</div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Try block to check for exceptions</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number41 index40 alt2">&nbsp;</div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating an object of above class</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Addition ob = </code><code class="keyword">new</code> <code class="plain">Addition();</code></div>
        <div class="line number44 index43 alt1">&nbsp;</div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling method 1 to sum 2 numbers</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum1 = ob.add(</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">);</code></div>
        <div class="line number47 index46 alt2">&nbsp;</div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing sum of two numbers</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"sum of the two integer value :"</code> <code class="plain">+ sum1);</code></div>
        <div class="line number51 index50 alt2">&nbsp;</div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling method 2 to sum 3 numbers</code></div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">sum2 = ob.add(</code><code class="value">1</code><code class="plain">, </code><code class="value">2</code><code class="plain">);</code></div>
        <div class="line number54 index53 alt1">&nbsp;</div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing sum of three numbers</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"sum of the three integer value :"</code> <code class="plain">+ sum2);</code></div>
        <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number59 index58 alt2">&nbsp;</div>
        <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Catch block to handle exceptions</code></div>
        <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception e) {</code></div>
        <div class="line number62 index61 alt1">&nbsp;</div>
        <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Display the exceptions on console</code></div>
        <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(e);</code></div>
        <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number67 index66 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20211216154617/Screenshot20211216at34558PM.png" alt="" /></p>
        <h1>Overriding in Java</h1>
        <p>In any object-oriented programming language, Overriding is a feature that allows a subclass or child class to provide a specific implementation of a method that is already provided by one of its super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature, and same return type(or sub-type) as a method in its super-class, then the method in the subclass is said to override the method in the super-class.</p>
        <p>overriding in java</p>
        <p>Method overriding is one of the way by which java achieve Run Time Polymorphism.The version of a method that is executed will be determined by the object that is used to invoke it. If an object of a parent class is used to invoke the method, then the version in the parent class will be executed, but if an object of the subclass is used to invoke the method, then the version in the child class will be executed. In other words, it is the type of the object being referred to (not the type of the reference variable) that determines which version of an overridden method will be executed.</p>
        <p><br />// A Simple Java program to demonstrate<br />// method overriding in java<br /> <br />// Base Class<br />class Parent {<br /> void show()<br /> {<br /> System.out.println("Parent's show()");<br /> }<br />}<br /> <br />// Inherited class<br />class Child extends Parent {<br /> // This method overrides show() of Parent<br /> @Override<br /> void show()<br /> {<br /> System.out.println("Child's show()");<br /> }<br />}<br /> <br />// Driver class<br />class Main {<br /> public static void main(String[] args)<br /> {<br /> // If a Parent type reference refers<br /> // to a Parent object, then Parent's<br /> // show is called<br /> Parent obj1 = new Parent();<br /> obj1.show();<br /> <br /> // If a Parent type reference refers<br /> // to a Child object Child's show()<br /> // is called. This is called RUN TIME<br /> // POLYMORPHISM.<br /> Parent obj2 = new Child();<br /> obj2.show();<br /> }<br />}<br />Output:<br />Parent's show()<br />Child's show()</p>
        <p>Rules for method overriding:</p>
        <p>Overriding and Access-Modifiers : The access modifier for an overriding method can allow more, but not less, access than the overridden method. For example, a protected instance method in the super-class can be made public, but not private, in the subclass. Doing so, will generate compile-time error.</p>
        <p>// A Simple Java program to demonstrate<br />// Overriding and Access-Modifiers<br /> <br />class Parent {<br /> // private methods are not overridden<br /> private void m1()<br /> {<br /> System.out.println("From parent m1()");<br /> }<br /> <br /> protected void m2()<br /> {<br /> System.out.println("From parent m2()");<br /> }<br />}<br /> <br />class Child extends Parent {<br /> // new m1() method<br /> // unique to Child class<br /> private void m1()<br /> {<br /> System.out.println("From child m1()");<br /> }<br /> <br /> // overriding method<br /> // with more accessibility<br /> @Override<br /> public void m2()<br /> {<br /> System.out.println("From child m2()");<br /> }<br />}<br /> <br />// Driver class<br />class Main {<br /> public static void main(String[] args)<br /> {<br /> Parent obj1 = new Parent();<br /> obj1.m2();<br /> Parent obj2 = new Child();<br /> obj2.m2();<br /> }<br />}<br />Output:<br />From parent m2()<br />From child m2()</p>
        <p>Final methods can not be overridden : If we don&rsquo;t want a method to be overridden, we declare it as final. Please see Using final with Inheritance .<br />// A Java program to demonstrate that<br />// final methods cannot be overridden<br /> <br />class Parent {<br /> // Can't be overridden<br /> final void show() {}<br />}<br /> <br />class Child extends Parent {<br /> // This would produce error<br /> void show() {}<br />}<br />Output:</p>
        <p>13: error: show() in Child cannot override show() in Parent<br /> void show() { }<br /> ^<br /> overridden method is final<br />Static methods can not be overridden(Method Overriding vs Method Hiding) : When you define a static method with same signature as a static method in base class, it is known as method hiding.<br />The following table summarizes what happens when you define a method with the same signature as a method in a super-class.</p>
        <p>Superclass Instance Method Superclass Static Method<br />Subclass Instance Method Overrides Generates a compile-time error<br />Subclass Static Method Generates a compile-time error Hides</p>
        <p>// Java program to show that<br />// if the static method is redefined by<br />// a derived class, then it is not<br />// overriding, it is hiding<br /> <br />class Parent {<br /> // Static method in base class<br /> // which will be hidden in subclass<br /> static void m1()<br /> {<br /> System.out.println("From parent "<br /> + "static m1()");<br /> }<br /> <br /> // Non-static method which will<br /> // be overridden in derived class<br /> void m2()<br /> {<br /> System.out.println("From parent "<br /> + "non-static(instance) m2()");<br /> }<br />}<br /> <br />class Child extends Parent {<br /> // This method hides m1() in Parent<br /> static void m1()<br /> {<br /> System.out.println("From child static m1()");<br /> }<br /> <br /> // This method overrides m2() in Parent<br /> @Override<br /> public void m2()<br /> {<br /> System.out.println("From child "<br /> + "non-static(instance) m2()");<br /> }<br />}<br /> <br />// Driver class<br />class Main {<br /> public static void main(String[] args)<br /> {<br /> Parent obj1 = new Child();<br /> <br /> // As per overriding rules this<br /> // should call to class Child static<br /> // overridden method. Since static<br /> // method can not be overridden, it<br /> // calls Parent's m1()<br /> obj1.m1();<br /> <br /> // Here overriding works<br /> // and Child's m2() is called<br /> obj1.m2();<br /> }<br />}<br />Output:<br />From parent static m1()<br />From child non-static(instance) m2()</p>
        <p>Private methods can not be overridden : Private methods cannot be overridden as they are bonded during compile time. Therefore we can&rsquo;t even override private methods in a subclass.(See this for details).</p>
        <p>The overriding method must have same return type (or subtype) : From Java 5.0 onwards it is possible to have different return type for a overriding method in child class, but child&rsquo;s return type should be sub-type of parent&rsquo;s return type. This phenomena is known as covariant return type.</p>
        <p>Invoking overridden method from sub-class : We can call parent class method in overriding method using super keyword.</p>
        <p>// A Java program to demonstrate that overridden<br />// method can be called from sub-class<br /> <br />// Base Class<br />class Parent {<br /> void show()<br /> {<br /> System.out.println("Parent's show()");<br /> }<br />}<br /> <br />// Inherited class<br />class Child extends Parent {<br /> // This method overrides show() of Parent<br /> @Override<br /> void show()<br /> {<br /> super.show();<br /> System.out.println("Child's show()");<br /> }<br />}<br /> <br />// Driver class<br />class Main {<br /> public static void main(String[] args)<br /> {<br /> Parent obj = new Child();<br /> obj.show();<br /> }<br />}<br />Output:<br />Parent's show()<br />Child's show()<br />Overriding and constructor : We can not override constructor as parent and child class can never have constructor with same name(Constructor name must always be same as Class name).<br />Overriding and Exception-Handling : Below are two rules to note when overriding methods related to exception-handling.<br />Rule#1 : If the super-class overridden method does not throw an exception, subclass overriding method can only throws the unchecked exception, throwing checked exception will lead to compile-time error.<br />/* Java program to demonstrate overriding when <br /> superclass method does not declare an exception<br />*/<br /> <br />class Parent {<br /> void m1()<br /> {<br /> System.out.println("From parent m1()");<br /> }<br /> <br /> void m2()<br /> {<br /> System.out.println("From parent m2()");<br /> }<br />}<br /> <br />class Child extends Parent {<br /> @Override<br /> // no issue while throwing unchecked exception<br /> void m1() throws ArithmeticException<br /> {<br /> System.out.println("From child m1()");<br /> }<br /> <br /> @Override<br /> // compile-time error<br /> // issue while throwing checked exception<br /> void m2() throws Exception<br /> {<br /> System.out.println("From child m2");<br /> }<br />}<br />Output:</p>
        <p>error: m2() in Child cannot override m2() in Parent<br /> void m2() throws Exception{ System.out.println("From child m2");}<br /> ^<br /> overridden method does not throw Exception<br />Rule#2 : If the super-class overridden method does throws an exception, subclass overriding method can only throw same, subclass exception. Throwing parent exception in Exception hierarchy will lead to compile time error.Also there is no issue if subclass overridden method is not throwing any exception.<br />// Java program to demonstrate overriding when<br />// superclass method does declare an exception<br /> <br />class Parent {<br /> void m1() throws RuntimeException<br /> {<br /> System.out.println("From parent m1()");<br /> }<br />}<br /> <br />class Child1 extends Parent {<br /> @Override<br /> // no issue while throwing same exception<br /> void m1() throws RuntimeException<br /> {<br /> System.out.println("From child1 m1()");<br /> }<br />}<br />class Child2 extends Parent {<br /> @Override<br /> // no issue while throwing subclass exception<br /> void m1() throws ArithmeticException<br /> {<br /> System.out.println("From child2 m1()");<br /> }<br />}<br />class Child3 extends Parent {<br /> @Override<br /> // no issue while not throwing any exception<br /> void m1()<br /> {<br /> System.out.println("From child3 m1()");<br /> }<br />}<br />class Child4 extends Parent {<br /> @Override<br /> // compile-time error<br /> // issue while throwing parent exception<br /> void m1() throws Exception<br /> {<br /> System.out.println("From child4 m1()");<br /> }<br />}<br />Output:</p>
        <p>error: m1() in Child4 cannot override m1() in Parent<br /> void m1() throws Exception<br /> ^<br /> overridden method does not throw Exception</p>
        <p>Overriding and abstract method: Abstract methods in an interface or abstract class are meant to be overridden in derived concrete classes otherwise a compile-time error will be thrown.</p>
        <p>Overriding and synchronized/strictfp method : The presence of synchronized/strictfp modifier with method have no effect on the rules of overriding, i.e. it&rsquo;s possible that a synchronized/strictfp method can override a non synchronized/strictfp one and vice-versa.</p>
        <p><strong>Note :</strong></p>
        <ul>
        <ol>
        <li>In C++, we need<a href="https://www.geeksforgeeks.org/virtual-functions-and-runtime-polymorphism-in-c-set-1-introduction/">&nbsp;virtual keyword</a>&nbsp;to achieve overriding or&nbsp;<a href="https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/">Run Time Polymorphism</a>. In Java, methods are virtual by default.</li>
        <li>We can have multilevel method-overriding.
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_472700" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// A Java program to demonstrate</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// multi-level overriding</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Base Class</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">Parent {</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">show()</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Parent's show()"</code><code class="plain">);</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number10 index9 alt1"><code class="plain">}</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="comments">// Inherited class</code></div>
        <div class="line number13 index12 alt2"><code class="keyword">class</code> <code class="plain">Child </code><code class="keyword">extends</code> <code class="plain">Parent {</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This method overrides show() of Parent</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">show() { System.out.println(</code><code class="string">"Child's show()"</code><code class="plain">); }</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="comments">// Inherited class</code></div>
        <div class="line number19 index18 alt2"><code class="keyword">class</code> <code class="plain">GrandChild </code><code class="keyword">extends</code> <code class="plain">Child {</code></div>
        <div class="line number20 index19 alt1 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This method overrides show() of Parent</code></div>
        <div class="line number21 index20 alt2 highlighted"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">show()</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"GrandChild's show()"</code><code class="plain">);</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number25 index24 alt2"><code class="plain">}</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number27 index26 alt2"><code class="comments">// Driver class</code></div>
        <div class="line number28 index27 alt1"><code class="keyword">class</code> <code class="plain">Main {</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Parent obj1 = </code><code class="keyword">new</code> <code class="plain">GrandChild();</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj1.show();</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number34 index33 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <div class="outputDiv"><strong>Output:</strong>
        <pre>GrandChild's show()
        </pre>
        </div>
        </li>
        <li><strong>Overriding vs&nbsp;<a href="https://www.geeksforgeeks.org/overloading-in-java/">Overloading</a>&nbsp;:<br /></strong>
        <ul>
        <ol>
        <li>Overloading is about same method have different signatures. Overriding is about same method, same signature but different classes connected through inheritance.
        <p><a href="https://media.geeksforgeeks.org/wp-content/uploads/OverridingVsOverloading.png"><img class="alignnone size-full wp-image-146254" src="https://media.geeksforgeeks.org/wp-content/uploads/OverridingVsOverloading.png" alt="OverridingVsOverloading" width="488" height="369" /></a></p>
        </li>
        <li>Overloading is an example of compiler-time polymorphism and overriding is an example of&nbsp;<a href="https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/">run time polymorphism</a>.</li>
        </ol>
        </ul>
        </li>
        </ol>
        </ul>
        <p align="center"><strong>Why Method Overriding ?</strong></p>
        <p>As stated earlier, overridden methods allow Java to support&nbsp;<a href="https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/">run-time polymorphism</a>. Polymorphism is essential to object-oriented programming for one reason: it allows a general class to specify methods that will be common to all of its derivatives while allowing subclasses to define the specific implementation of some or all of those methods. Overridden methods are another way that Java implements the &ldquo;one interface, multiple methods&rdquo; aspect of polymorphism.</p>
        <p><a href="https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/">Dynamic Method Dispatch</a>&nbsp;is one of the most powerful mechanisms that object-oriented design brings to bear on code reuse and robustness. The ability to exist code libraries to call methods on instances of new classes without recompiling while maintaining a clean abstract interface is a profoundly powerful tool.</p>
        <p>Overridden methods allow us to call methods of any of the derived classes without even knowing the type of derived class object.</p>
        <p>&nbsp;</p>
        <p align="center"><strong>When to apply Method Overriding ?(with example)</strong></p>
        <p><strong>Overriding and&nbsp;<a href="https://www.geeksforgeeks.org/inheritance-in-java/">Inheritance</a></strong>&nbsp;: Part of the key to successfully applying polymorphism is understanding that the superclasses and subclasses form a hierarchy which moves from lesser to greater specialization. Used correctly, the superclass provides all elements that a subclass can use directly. It also defines those methods that the derived class must implement on its own. This allows the subclass the flexibility to define its methods, yet still enforces a consistent interface.&nbsp;<strong>Thus, by combining inheritance with overridden methods, a superclass can define the general form of the methods that will be used by all of its subclasses.</strong></p>
        <p>Let&rsquo;s look at a more practical example that uses method overriding. Consider an employee management software for an organization, let the code has a simple base class Employee, the class has methods like raiseSalary(), transfer(), promote(), .. etc. Different types of employees like Manager, Engineer, ..etc may have their implementations of the methods present in base class Employee. In our complete software, we just need to pass a list of employees everywhere and call appropriate methods without even knowing the type of employee. For example, we can easily raise the salary of all employees by iterating through the list of employees. Every type of employee may have its logic in its class, we don&rsquo;t need to worry because if raiseSalary() is present for a specific employee type, only that method would be called.</p>
        <p><a href="https://media.geeksforgeeks.org/wp-content/cdn-uploads/JavaOVerriding.jpg"><img class="aligncenter size-full wp-image-139483" src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/JavaOVerriding.jpg" sizes="(max-width: 375px) 100vw, 375px" srcset="https://www.geeksforgeeks.org/wp-content/uploads/JavaOVerriding.jpg 375w, https://www.geeksforgeeks.org/wp-content/uploads/JavaOVerriding-300x284.jpg 300w" alt="javaoverriding" width="375" height="355" /></a></p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_60727" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// A Simple Java program to demonstrate application</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// of overriding in Java</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Base Class</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">Employee {</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">base = </code><code class="value">10000</code><code class="plain">;</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">salary()</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">base;</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number11 index10 alt2"><code class="plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="comments">// Inherited class</code></div>
        <div class="line number14 index13 alt1"><code class="keyword">class</code> <code class="plain">Manager </code><code class="keyword">extends</code> <code class="plain">Employee {</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This method overrides salary() of Parent</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">salary()</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">base + </code><code class="value">20000</code><code class="plain">;</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number20 index19 alt1"><code class="plain">}</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number22 index21 alt1"><code class="comments">// Inherited class</code></div>
        <div class="line number23 index22 alt2"><code class="keyword">class</code> <code class="plain">Clerk </code><code class="keyword">extends</code> <code class="plain">Employee {</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This method overrides salary() of Parent</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">salary()</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">base + </code><code class="value">10000</code><code class="plain">;</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number29 index28 alt2"><code class="plain">}</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number31 index30 alt2"><code class="comments">// Driver class</code></div>
        <div class="line number32 index31 alt1"><code class="keyword">class</code> <code class="plain">Main {</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This method can be used to print the salary of</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// any type of employee using base class reference</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">printSalary(Employee e)</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(e.salary());</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Employee obj1 = </code><code class="keyword">new</code> <code class="plain">Manager();</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// We could also get type of employee using</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// one more overridden method.loke getType()</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Manager's salary : "</code><code class="plain">);</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">printSalary(obj1);</code></div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Employee obj2 = </code><code class="keyword">new</code> <code class="plain">Clerk();</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Clerk's salary : "</code><code class="plain">);</code></div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">printSalary(obj2);</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number53 index52 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <div class="outputDiv"><strong>Output:</strong>
        <pre>Manager's salary : 30000
        Clerk's salary : 20000</pre>
        <h1>Difference Between Method Overloading and Method Overriding in Java</h1>
        <p>The differences between Method Overloading and Method Overriding in Java are:</p>
        <figure class="table">
        <table>
        <thead>
        <tr>
        <th>S.NO</th>
        <th>
        <p>Method Overloading</p>
        </th>
        <th>
        <p>Method Overriding</p>
        </th>
        </tr>
        </thead>
        <tbody>
        <tr>
        <td>1.</td>
        <td>Method overloading is a compile-time polymorphism.</td>
        <td>Method overriding is a run-time polymorphism.</td>
        </tr>
        <tr>
        <td>2.</td>
        <td>It helps to increase the readability of the program.</td>
        <td>It is used to grant the specific implementation of the method which is already provided by its parent class or superclass.</td>
        </tr>
        <tr>
        <td>3.</td>
        <td>It occurs within the class.</td>
        <td>It is performed in two classes with inheritance relationships.</td>
        </tr>
        <tr>
        <td>4.</td>
        <td>Method overloading may or may not require inheritance.</td>
        <td>Method overriding always needs inheritance.</td>
        </tr>
        <tr>
        <td>5.</td>
        <td>In method overloading, methods must have the same name and different signatures.</td>
        <td>In method overriding, methods must have the same name and same signature.</td>
        </tr>
        <tr>
        <td>6.</td>
        <td>In method overloading, the return type can or can not be the same, but we just have to change the parameter.</td>
        <td>In method overriding, the return type must be the same or co-variant.</td>
        </tr>
        </tbody>
        </table>
        </figure>
        <h3><a href="https://www.geeksforgeeks.org/different-ways-method-overloading-java/">Method Overloading</a>:</h3>
        <p>Method Overloading is a&nbsp;<strong>Compile time polymorphism</strong>. In method overloading, more than one method shares the same method name with a different signature in the class. In method overloading, the return type can or can not be the same, but we have to change the parameter because, in java, we can not achieve the method overloading by changing only the return type of the method.&nbsp;</p>
        <p><strong>Example of Method Overloading:</strong>&nbsp;</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_144360" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">MethodOverloadingEx {</code></div>
        <div class="line number4 index3 alt1">&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">add(</code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b)</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">a + b;</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">int</code> <code class="plain">add(</code><code class="keyword">int</code> <code class="plain">a, </code><code class="keyword">int</code> <code class="plain">b, </code><code class="keyword">int</code> <code class="plain">c)</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">a + b + c;</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number14 index13 alt1">&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"add() with 2 parameters"</code><code class="plain">);</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(add(</code><code class="value">4</code><code class="plain">, </code><code class="value">6</code><code class="plain">));</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"add() with 3 parameters"</code><code class="plain">);</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(add(</code><code class="value">4</code><code class="plain">, </code><code class="value">6</code><code class="plain">, </code><code class="value">7</code><code class="plain">));</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>add() with 2 parameters
        10
        add() with 3 parameters
        17</pre>
        </div>
        <h3><a href="https://www.geeksforgeeks.org/overriding-in-java/">Method Overriding</a>:&nbsp;</h3>
        <p>Method Overriding is a&nbsp;<strong>Run time polymorphism</strong>. In method overriding, the derived class provides the specific implementation of the method that is already provided by the base class or parent class. In method overriding, the return type must be the same or co-variant (return type may vary in the same direction as the derived class).&nbsp;</p>
        <p><strong>Example of Method Overriding:</strong>&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_674502" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">Animal {</code></div>
        <div class="line number4 index3 alt1">&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">eat()</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"eat() method of base class"</code><code class="plain">);</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"eating."</code><code class="plain">);</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number10 index9 alt1"><code class="plain">}</code></div>
        <div class="line number11 index10 alt2">&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="keyword">class</code> <code class="plain">Dog </code><code class="keyword">extends</code> <code class="plain">Animal {</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">eat()</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"eat() method of derived class"</code><code class="plain">);</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Dog is eating."</code><code class="plain">);</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number19 index18 alt2"><code class="plain">}</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="keyword">class</code> <code class="plain">MethodOverridingEx {</code></div>
        <div class="line number22 index21 alt1">&nbsp;</div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Dog d1 = </code><code class="keyword">new</code> <code class="plain">Dog();</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Animal a1 = </code><code class="keyword">new</code> <code class="plain">Animal();</code></div>
        <div class="line number27 index26 alt2">&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">d1.eat();</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">a1.eat();</code></div>
        <div class="line number30 index29 alt1">&nbsp;</div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Animal animal = </code><code class="keyword">new</code> <code class="plain">Dog();</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// eat() method of animal class is overridden by</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// base class eat()</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">animal.eat();</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number36 index35 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>eat() method of derived class
        Dog is eating.
        eat() method of base class
        eating.
        eat() method of derived class
        Dog is eating.</pre>
        </div>
        <p><strong>Explanation:</strong></p>
        <p>Here, we can see that a method eat() has overridden in the derived class name&nbsp;<strong>Dog</strong>&nbsp;that is already provided by the base class name&nbsp;<strong>Animal</strong>.&nbsp;<br />When we create the instance of class Dog and call the eat() method, we see that only derived class eat() method run instead of base class method eat(), and When we create the instance of class Animal and call the eat() method, we see that only base class eat() method run instead of derived class method eat().&nbsp;</p>
        <p>So, it&rsquo;s clear that in method overriding, the method is bound to the instances on the run time, which is decided by the&nbsp;<strong>JVM</strong>. That&rsquo;s why it is called&nbsp;<strong>Run time polymorphism.</strong></p>
        </div>`,
    },
    {
        topic: "Abstraction & Encapsulation",
        content: `<h1>Abstraction in Java</h1>
        <p>Data Abstraction is the property by virtue of which only the essential details are displayed to the user. The trivial or the non-essentials units are not displayed to the user. Ex: A car is viewed as a car rather than its individual components.</p>
        <p>Data Abstraction may also be defined as the process of identifying only the required characteristics of an object ignoring the irrelevant details. The properties and behaviours of an object differentiate it from other objects of similar type and also help in classifying/grouping the objects.</p>
        <p>Consider a real-life example of a man driving a car. The man only knows that pressing the accelerators will increase the speed of a car or applying brakes will stop the car, but he does not know about how on pressing the accelerator the speed is actually increasing, he does not know about the inner mechanism of the car or the implementation of the accelerator, brakes, etc in the car. This is what abstraction is.&nbsp;</p>
        <p>In java, abstraction is achieved by&nbsp;<a href="https://www.geeksforgeeks.org/interfaces-in-java/">interfaces</a>&nbsp;and&nbsp;<a href="https://www.geeksforgeeks.org/abstract-classes-in-java/">abstract classes</a>. We can achieve 100% abstraction using interfaces.</p>
        <p><strong>Abstract classes and Abstract methods :&nbsp;</strong>&nbsp;</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <ol>
        <li>An abstract class is a class that is declared with an&nbsp;<a href="https://www.geeksforgeeks.org/abstract-keyword-in-java/">abstract keyword.</a></li>
        <li>An abstract method is a method that is declared without implementation.</li>
        <li>An abstract class may or may not have all abstract methods. Some of them can be concrete methods</li>
        <li>A method defined abstract must always be redefined in the subclass, thus making&nbsp;<a href="https://www.geeksforgeeks.org/overriding-in-java/">overriding</a>&nbsp;compulsory OR either make the subclass itself abstract.</li>
        <li>Any class that contains one or more abstract methods must also be declared with an abstract keyword.</li>
        <li>There can be no object of an abstract class. That is, an abstract class can not be directly instantiated with the&nbsp;<a href="https://www.geeksforgeeks.org/new-operator-java/"><em>new operator</em></a>.</li>
        <li>An abstract class can have parameterized constructors and the default constructor is always present in an abstract class.</li>
        </ol>
        <p><strong>When to use abstract classes and abstract methods with an example</strong></p>
        <p>There are situations in which we will want to define a superclass that declares the structure of a given abstraction without providing a complete implementation of every method. That is, sometimes we will want to create a superclass that only defines a generalization form that will be shared by all of its subclasses, leaving it to each subclass to fill in the details.</p>
        <p>Consider a classic &ldquo;shape&rdquo; example, perhaps used in a computer-aided design system or game simulation. The base type is &ldquo;shape&rdquo; and each shape has a color, size, and so on. From this, specific types of shapes are derived(inherited)-circle, square, triangle, and so on &mdash; each of which may have additional characteristics and behaviors. For example, certain shapes can be flipped. Some behaviors may be different, such as when you want to calculate the area of a shape. The type hierarchy embodies both the similarities and differences between the shapes.<br />&nbsp;</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/Abstract-classes-and-methods-Page-1.png" alt="" /></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_202398" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate the</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// concept of Abstraction</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Shape {</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String color;</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// these are abstract methods</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">abstract</code> <code class="keyword">double</code> <code class="plain">area();</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">abstract</code> <code class="plain">String toString();</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// abstract class can have the constructor</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">Shape(String color)</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Shape constructor called"</code><code class="plain">);</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.color = color;</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// this is a concrete method</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">String getColor() { </code><code class="keyword">return</code> <code class="plain">color; }</code></div>
        <div class="line number19 index18 alt2"><code class="plain">}</code></div>
        <div class="line number20 index19 alt1"><code class="keyword">class</code> <code class="plain">Circle </code><code class="keyword">extends</code> <code class="plain">Shape {</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">radius;</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">Circle(String color, </code><code class="keyword">double</code> <code class="plain">radius)</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// calling Shape constructor</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">super</code><code class="plain">(color);</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Circle constructor called"</code><code class="plain">);</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.radius = radius;</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1">@Override</code> <code class="keyword">double</code> <code class="plain">area()</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">Math.PI * Math.pow(radius, </code><code class="value">2</code><code class="plain">);</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1">@Override</code> <code class="keyword">public</code> <code class="plain">String toString()</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="string">"Circle color is "</code> <code class="plain">+ </code><code class="keyword">super</code><code class="plain">.getColor()</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">"and area is : "</code> <code class="plain">+ area();</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number42 index41 alt1"><code class="plain">}</code></div>
        <div class="line number43 index42 alt2"><code class="keyword">class</code> <code class="plain">Rectangle </code><code class="keyword">extends</code> <code class="plain">Shape {</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">length;</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">width;</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">Rectangle(String color, </code><code class="keyword">double</code> <code class="plain">length,</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">double</code> <code class="plain">width)</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// calling Shape constructor</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">super</code><code class="plain">(color);</code></div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Rectangle constructor called"</code><code class="plain">);</code></div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.length = length;</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.width = width;</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1">@Override</code> <code class="keyword">double</code> <code class="plain">area() { </code><code class="keyword">return</code> <code class="plain">length * width; }</code></div>
        <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1">@Override</code> <code class="keyword">public</code> <code class="plain">String toString()</code></div>
        <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="string">"Rectangle color is "</code> <code class="plain">+ </code><code class="keyword">super</code><code class="plain">.getColor()</code></div>
        <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">"and area is : "</code> <code class="plain">+ area();</code></div>
        <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number65 index64 alt2"><code class="plain">}</code></div>
        <div class="line number66 index65 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Test {</code></div>
        <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Shape s1 = </code><code class="keyword">new</code> <code class="plain">Circle(</code><code class="string">"Red"</code><code class="plain">, </code><code class="value">2.2</code><code class="plain">);</code></div>
        <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Shape s2 = </code><code class="keyword">new</code> <code class="plain">Rectangle(</code><code class="string">"Yellow"</code><code class="plain">, </code><code class="value">2</code><code class="plain">, </code><code class="value">4</code><code class="plain">);</code></div>
        <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s1.toString());</code></div>
        <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(s2.toString());</code></div>
        <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number75 index74 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Shape constructor called
        Circle constructor called
        Shape constructor called
        Rectangle constructor called
        Circle color is Redand area is : 15.205308443374602
        Rectangle color is Yellowand area is : 8.0</pre>
        </div>
        <p><strong>Encapsulation vs Data Abstraction</strong></p>
        <ol>
        <li><a href="https://www.geeksforgeeks.org/encapsulation-in-java/">Encapsulation</a>&nbsp;is data hiding(information hiding) while Abstraction is detailed hiding(implementation hiding).</li>
        <li>While encapsulation groups together data and methods that act upon the data, data abstraction deal with exposing the interface to the user and hiding the details of implementation.</li>
        </ol>
        <p><strong>Advantages of Abstraction</strong></p>
        <ol>
        <li>It reduces the complexity of viewing the things.</li>
        <li>Avoids code duplication and increases reusability.</li>
        <li>Helps to increase the security of an application or program as only important details are provided to the user.</li>
        </ol>
        <h1>Abstract Classes in Java</h1>
        <p>In C++, if a class has at least one&nbsp;<a href="https://www.geeksforgeeks.org/pure-virtual-functions-and-abstract-classes/">pure virtual function</a>, then the class becomes abstract. Unlike C++, in Java, a separate&nbsp;<a href="https://www.geeksforgeeks.org/abstract-keyword-in-java/">keyword&nbsp;<em>abstract</em></a>&nbsp;is used to make a class abstract.&nbsp;</p>
        <p>Abstract is a java modifier applicable for classes and methods in java but not for Variables.&nbsp;</p>
        <p><strong>Illustration:</strong>&nbsp;Abstract class</p>
        <pre>abstract class Shape 
        {
            int color;
        
            // An abstract function
            abstract void draw();
        }</pre>
        <p>Following are some important observations about abstract classes in Java.</p>
        <ol>
        <li>An instance of an abstract class can not be created.</li>
        <li>Constructors are allowed.</li>
        <li>We can have an abstract class without any abstract method.</li>
        <li>There can be final method in abstract class but any abstract method in class(abstract class) can not be declared as final &nbsp;or in simper terms final method can not be abstract itself as it will yield error: &ldquo;Illegal combination of modifiers: abstract and final&rdquo;</li>
        <li>We are not allowed to create object for any abstract class.</li>
        <li>We can define static methods in an abstract class</li>
        <li>We can use abstract keyword for declaring top level classes (Outer class) as well as inner classes as abstract</li>
        <li>If a class contain at least one abstract method then compulsory we should declare class as abstract&nbsp;</li>
        <li>If Child class is unable to provide implementation to all abstract methods of Parent class then we should declare that Child class as abstract so that the next level Child class should provide implementation to remaining abstract method</li>
        </ol>
        <p>Let us elaborate on these observations and do justify them with help of clean java programs as follows.</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p><strong>Observation 1:</strong>&nbsp;In Java, just likely in C++ an instance of an abstract class cannot be created, we can have references to abstract class type though. It is as shown below via clean java program.</p>
        <p><strong>Example</strong>&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_314393" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate That an instance of Abstract</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Class Can not be created</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Class 1</code></div>
        <div class="line number5 index4 alt2"><code class="comments">// Abstract class</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Base {</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">fun();</code></div>
        <div class="line number8 index7 alt1"><code class="plain">}</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="comments">// Class 2</code></div>
        <div class="line number11 index10 alt2"><code class="keyword">class</code> <code class="plain">Derived </code><code class="keyword">extends</code> <code class="plain">Base {</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">fun()</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Derived fun() called"</code><code class="plain">);</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        <div class="line number17 index16 alt2">&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="comments">// Class 3</code></div>
        <div class="line number19 index18 alt2"><code class="comments">// Main class</code></div>
        <div class="line number20 index19 alt1"><code class="keyword">class</code> <code class="plain">Main {</code></div>
        <div class="line number21 index20 alt2">&nbsp;</div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number25 index24 alt2">&nbsp;</div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Uncommenting the following line will cause</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// compiler error as the line tries to create an</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// instance of abstract class. Base b = new Base();</code></div>
        <div class="line number29 index28 alt2">&nbsp;</div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// We can have references of Base type.</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Base b = </code><code class="keyword">new</code> <code class="plain">Derived();</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">b.fun();</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number34 index33 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Derived fun() called</pre>
        </div>
        <p><strong>Observation 2:</strong>&nbsp;Like C++, an abstract class can contain constructors in Java. And a constructor of abstract class is called when an instance of an inherited class is created. It is as shown in the program below as follows:&nbsp;</p>
        <p><strong>Example&nbsp;</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_613307" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate Abstract Class</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Can contain Constructors</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Class 1</code></div>
        <div class="line number5 index4 alt2"><code class="comments">// Abstract class</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Base {</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Constructor of class 1</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Base()</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Base Constructor Called"</code><code class="plain">);</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number14 index13 alt1">&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Abstract method inside class1</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">fun();</code></div>
        <div class="line number17 index16 alt2"><code class="plain">}</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="comments">// Class 2</code></div>
        <div class="line number20 index19 alt1"><code class="keyword">class</code> <code class="plain">Derived </code><code class="keyword">extends</code> <code class="plain">Base {</code></div>
        <div class="line number21 index20 alt2">&nbsp;</div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Constructor of class2</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Derived()</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Derived Constructor Called"</code><code class="plain">);</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number27 index26 alt2">&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method of class2</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">fun()</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Derived fun() called"</code><code class="plain">);</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number33 index32 alt2"><code class="plain">}</code></div>
        <div class="line number34 index33 alt1">&nbsp;</div>
        <div class="line number35 index34 alt2"><code class="comments">// Class 3</code></div>
        <div class="line number36 index35 alt1"><code class="comments">// Main class</code></div>
        <div class="line number37 index36 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number38 index37 alt1">&nbsp;</div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating object of class 2</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// inside main() method</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Derived d = </code><code class="keyword">new</code> <code class="plain">Derived();</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number46 index45 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Base Constructor Called
        Derived Constructor Called</pre>
        </div>
        <p><strong>Observation 3:&nbsp;</strong>In Java, we can have an abstract class without any abstract method. This allows us to create classes that cannot be instantiated but can only be inherited. It is as shown below as follows with help of clean java program.</p>
        <p><strong>Example&nbsp;</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist3-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist3-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_942362" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to illustrate Abstract class</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Without any abstract method</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Class 1</code></div>
        <div class="line number5 index4 alt2"><code class="comments">// An abstract class without any abstract method</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Base {</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Demo method</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">fun()</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print message if class 1 function is called</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Function of Base class is called"</code><code class="plain">);</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number15 index14 alt2"><code class="plain">}</code></div>
        <div class="line number16 index15 alt1">&nbsp;</div>
        <div class="line number17 index16 alt2"><code class="comments">// Class 2</code></div>
        <div class="line number18 index17 alt1"><code class="keyword">class</code> <code class="plain">Derived </code><code class="keyword">extends</code> <code class="plain">Base {</code></div>
        <div class="line number19 index18 alt2"><code class="plain">}</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="comments">// Class 3</code></div>
        <div class="line number22 index21 alt1"><code class="keyword">class</code> <code class="plain">Main {</code></div>
        <div class="line number23 index22 alt2">&nbsp;</div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating object of class 2</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Derived d = </code><code class="keyword">new</code> <code class="plain">Derived();</code></div>
        <div class="line number29 index28 alt2">&nbsp;</div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling function defined in class 1 inside main()</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// with object of class 2 inside main() method</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">d.fun();</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number34 index33 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Function of Base class is called</pre>
        </div>
        <p><strong>Observation 4:&nbsp;</strong>Abstract classes can also have final methods (methods that cannot be overridden)</p>
        <p><strong>Example&nbsp;</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist4-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist4-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_16734" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate Abstract classes</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Can also have Final Methods</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Class 1</code></div>
        <div class="line number5 index4 alt2"><code class="comments">// Abstract class</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Base {</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">final</code> <code class="keyword">void</code> <code class="plain">fun()</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Base fun() called"</code><code class="plain">);</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="plain">}</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="comments">// Class 2</code></div>
        <div class="line number15 index14 alt2"><code class="keyword">class</code> <code class="plain">Derived </code><code class="keyword">extends</code> <code class="plain">Base {</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        <div class="line number17 index16 alt2">&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="comments">// Class 3</code></div>
        <div class="line number19 index18 alt2"><code class="comments">// Main class</code></div>
        <div class="line number20 index19 alt1"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number21 index20 alt2">&nbsp;</div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number25 index24 alt2">&nbsp;</div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating object of abstract class</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Base b = </code><code class="keyword">new</code> <code class="plain">Derived();</code></div>
        <div class="line number28 index27 alt1">&nbsp;</div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling method on object created above</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// inside main()</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">b.fun();</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number33 index32 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Base fun() called</pre>
        </div>
        <p><strong>Observation 5:&nbsp;</strong>For any abstract java class we are not allowed to create an object i.e., for abstract class instantiation is not possible.&nbsp;</p>
        <p><strong>Example</strong>&nbsp;</p>
        <div class="noIdeBtnDiv">
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist5-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist5-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_554334" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate Abstract Class</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="comments">// Main class</code></div>
        <div class="line number4 index3 alt1"><code class="comments">// An abstract class</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Trying to create an object</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">GFG gfg = </code><code class="keyword">new</code> <code class="plain">GFG();</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number14 index13 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20211006150858/Screenshot20211006at30820PM.png" alt="" /></p>
        <p><strong>Observation 6:&nbsp;</strong>Similar to the interface we can define static methods in an abstract class that can be called independently without an object.&nbsp;</p>
        <p><strong>Example&nbsp;</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist6-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist6-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_866109" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate Static Methods in Abstract</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Class Can be called Independently</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Class 1</code></div>
        <div class="line number5 index4 alt2"><code class="comments">// Abstract class</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Helper {</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Abstract method</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">demofun()</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number11 index10 alt2">&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Geeks for Geeks"</code><code class="plain">);</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number15 index14 alt2"><code class="plain">}</code></div>
        <div class="line number16 index15 alt1">&nbsp;</div>
        <div class="line number17 index16 alt2"><code class="comments">// Class 2</code></div>
        <div class="line number18 index17 alt1"><code class="comments">// Main class extending Helper class</code></div>
        <div class="line number19 index18 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG </code><code class="keyword">extends</code> <code class="plain">Helper {</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number24 index23 alt1">&nbsp;</div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling method inside main()</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// as defined in above class</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Helper.demofun();</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number29 index28 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Geeks for Geeks</pre>
        </div>
        <p><strong>Observation 7:</strong>&nbsp;We can use abstract keyword for declaring top level classes (Outer class) as well as inner classes as abstract</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist7-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist7-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_85503" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">/*package whatever //do not write package name here */</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number4 index3 alt1">&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">B {</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">//declaring inner class as abstract with abstract method</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">C {</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">myAbstractMethod();</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number10 index9 alt1"><code class="plain">}</code></div>
        <div class="line number11 index10 alt2"><code class="keyword">class</code> <code class="plain">D </code><code class="keyword">extends</code> <code class="plain">B {</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">class</code> <code class="plain">E </code><code class="keyword">extends</code> <code class="plain">C {</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// implementing the abstract method</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">myAbstractMethod() { System.out.println(</code><code class="string">"Inside abstract method implementation"</code><code class="plain">); }</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        <div class="line number17 index16 alt2">&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Main {</code></div>
        <div class="line number19 index18 alt2">&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Instantiating the outer class</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">D outer = </code><code class="keyword">new</code> <code class="plain">D();</code></div>
        <div class="line number24 index23 alt1">&nbsp;</div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Instantiating the inner class</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">D.E inner = outer.</code><code class="keyword">new</code> <code class="plain">E();</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">inner.myAbstractMethod();</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number29 index28 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>Inside abstract method implementation</pre>
        <p><strong>Observation 8:</strong>&nbsp;If a class contain at least one abstract method then compulsory we should declare class as abstract otherwise we will get compile time error because If a class contains at least one abstract method then implementation is not complete for that class and hence it is not recommended to create a object so in order to restrict object creation for such partial classes we use abstract keyword</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist8-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist8-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_47446" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">/*package whatever //do not write package name here */</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number4 index3 alt1">&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="comments">// here if we remove the abstract keyword then we will get</code></div>
        <div class="line number6 index5 alt1"><code class="comments">// compile time error due to abstract method</code></div>
        <div class="line number7 index6 alt2"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Demo {</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">m1();</code></div>
        <div class="line number9 index8 alt2"><code class="plain">}</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="keyword">class</code> <code class="plain">Child </code><code class="keyword">extends</code> <code class="plain">Demo {</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">m1()</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.print(</code><code class="string">"Hello"</code><code class="plain">);</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Child c = </code><code class="keyword">new</code> <code class="plain">Child();</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">c.m1();</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>Hello</pre>
        <p><strong>Observation 9:</strong>&nbsp;If Child class is unable to provide implementation to all abstract methods of Parent class then we should declare that Child class as abstract so that the next level Child class should provide implementation to remaining abstract method</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist9-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist9-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_479611" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">/*package whatever //do not write package name here */</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Demo {</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">m1();</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">m2();</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">m3();</code></div>
        <div class="line number8 index7 alt1"><code class="plain">}</code></div>
        <div class="line number9 index8 alt2"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">FirstChild </code><code class="keyword">extends</code> <code class="plain">Demo {</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">m1() { System.out.println(</code><code class="string">"Inside m1"</code><code class="plain">); }</code></div>
        <div class="line number11 index10 alt2"><code class="plain">}</code></div>
        <div class="line number12 index11 alt1">&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="keyword">class</code> <code class="plain">SecondChild </code><code class="keyword">extends</code> <code class="plain">FirstChild {</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">m2() { System.out.println(</code><code class="string">"Inside m2"</code><code class="plain">); }</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">m3() { System.out.println(</code><code class="string">"Inside m3"</code><code class="plain">); }</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if we remove the abstract keyword from FirstChild</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Class and uncommented below obj creation for</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// FirstChild then it will throw</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// compile time error as did't override all the</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// abstract methods</code></div>
        <div class="line number25 index24 alt2">&nbsp;</div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// FirstChild f=new FirstChild();</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// f.m1();</code></div>
        <div class="line number28 index27 alt1">&nbsp;</div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">SecondChild s = </code><code class="keyword">new</code> <code class="plain">SecondChild();</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.m1();</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.m2();</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">s.m3();</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number34 index33 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>Inside m1
        Inside m2
        Inside m3<br /><br /></pre>
        <h1>Difference between Abstract Class and Interface in Java</h1>
        <p>As we know that abstraction refers to hiding the internal implementation of the feature and only showing the functionality to the users. i.e. what it works (showing), how it works (hiding). Both abstract class and interface are used for abstraction, henceforth Interface and Abstract Class are required prerequisites</p>
        <p>Abstract Class vs Interface</p>
        <p>Abstract class vs Interface <br />Type of methods: Interface can have only abstract methods. An abstract class can have abstract and non-abstract methods. From Java 8, it can have default and static methods also.<br />Final Variables: Variables declared in a Java interface are by default final. An abstract class may contain non-final variables.<br />Type of variables: Abstract class can have final, non-final, static and non-static variables. The interface has only static and final variables.<br />Implementation: Abstract class can provide the implementation of the interface. Interface can&rsquo;t provide the implementation of an abstract class.<br />Inheritance vs Abstraction: A Java interface can be implemented using the keyword &ldquo;implements&rdquo; and an abstract class can be extended using the keyword &ldquo;extends&rdquo;.<br />Multiple implementations: An interface can extend another Java interface only, an abstract class can extend another Java class and implement multiple Java interfaces.<br />Accessibility of Data Members: Members of a Java interface are public by default. A Java abstract class can have class members like private, protected, etc.<br />Example 1-A:</p>
        <p>&nbsp;</p>
        <p>// Java Program to Illustrate Concept of<br />// Abstract Class<br /> <br />// Importing required classes<br />import java.io.*;<br /> <br />// Class 1<br />// Helper abstract class<br />abstract class Shape {<br /> <br /> // Declare fields<br /> String objectName = " ";<br /> <br /> // Constructor of this class<br /> Shape(String name) { this.objectName = name; }<br /> <br /> // Method<br /> // Non-abstract methods<br /> // Having as default implementation<br /> public void moveTo(int x, int y)<br /> {<br /> System.out.println(this.objectName + " "<br /> + "has been moved to"<br /> + " x = " + x + " and y = " + y);<br /> }<br /> <br /> // Method 2<br /> // Abstract methods which will be<br /> // implemented by its subclass(es)<br /> abstract public double area();<br /> abstract public void draw();<br />}<br /> <br />// Class 2<br />// Helper class extending Class 1<br />class Rectangle extends Shape {<br /> <br /> // Attributes of rectangle<br /> int length, width;<br /> <br /> // Constructor<br /> Rectangle(int length, int width, String name)<br /> {<br /> <br /> // Super keyword refers to current instance itself<br /> super(name);<br /> <br /> // this keyword refers to current instance itself<br /> this.length = length;<br /> this.width = width;<br /> }<br /> <br /> // Method 1<br /> // To draw rectangle<br /> @Override public void draw()<br /> {<br /> System.out.println("Rectangle has been drawn ");<br /> }<br /> <br /> // Method 2<br /> // To compute rectangle area<br /> @Override public double area()<br /> {<br /> // Length * Breadth<br /> return (double)(length * width);<br /> }<br />}<br /> <br />// Class 3<br />// Helper class extending Class 1<br />class Circle extends Shape {<br /> <br /> // Attributes of a Circle<br /> double pi = 3.14;<br /> int radius;<br /> <br /> // Constructor<br /> Circle(int radius, String name)<br /> {<br /> // Super keyword refers to parent class<br /> super(name);<br /> // This keyword refers to current instance itself<br /> this.radius = radius;<br /> }<br /> <br /> // Method 1<br /> // To draw circle<br /> @Override public void draw()<br /> {<br /> // Print statement<br /> System.out.println("Circle has been drawn ");<br /> }<br /> <br /> // Method 2<br /> // To compute circle area<br /> @Override public double area()<br /> {<br /> return (double)((pi * radius * radius));<br /> }<br />}<br /> <br />// Class 4<br />// Main class<br />class GFG {<br /> <br /> // Main driver method<br /> public static void main(String[] args)<br /> {<br /> // Creating the Object of Rectangle class<br /> // and using shape class reference.<br /> Shape rect = new Rectangle(2, 3, "Rectangle");<br /> <br /> System.out.println("Area of rectangle: "<br /> + rect.area());<br /> <br /> rect.moveTo(1, 2);<br /> <br /> System.out.println(" ");<br /> <br /> // Creating the Objects of circle class<br /> Shape circle = new Circle(2, "Circle");<br /> <br /> System.out.println("Area of circle: "<br /> + circle.area());<br /> <br /> circle.moveTo(2, 4);<br /> }<br />}<br />Output<br />Area of rectangle: 6.0<br />Rectangle has been moved to x = 1 and y = 2<br /> <br />Area of circle: 12.56<br />Circle has been moved to x = 2 and y = 4<br />What if we don&rsquo;t have any common code between rectangle and circle then go with the interface.</p>
        <p>Example 1-B:</p>
        <p><br />// Java Program to Illustrate Concept of Interface<br /> <br />// Importing I/O classes<br />import java.io.*;<br /> <br />// Interface<br />interface Shape {<br /> <br /> // Abstract method<br /> void draw();<br /> double area();<br />}<br /> <br />// Class 1<br />// Helper class<br />class Rectangle implements Shape {<br /> <br /> int length, width;<br /> <br /> // constructor<br /> Rectangle(int length, int width)<br /> {<br /> this.length = length;<br /> this.width = width;<br /> }<br /> <br /> @Override public void draw()<br /> {<br /> System.out.println("Rectangle has been drawn ");<br /> }<br /> <br /> @Override public double area()<br /> {<br /> return (double)(length * width);<br /> }<br />}<br /> <br />// Class 2<br />// Helper class<br />class Circle implements Shape {<br /> <br /> double pi = 3.14;<br /> int radius;<br /> <br /> // constructor<br /> Circle(int radius) { this.radius = radius; }<br /> <br /> @Override public void draw()<br /> {<br /> System.out.println("Circle has been drawn ");<br /> }<br /> <br /> @Override public double area()<br /> {<br /> <br /> return (double)((pi * radius * radius));<br /> }<br />}<br /> <br />// Class 3<br />// Main class<br />class GFG {<br /> <br /> // Main driver method<br /> public static void main(String[] args)<br /> {<br /> // Creating the Object of Rectangle class<br /> // and using shape interface reference.<br /> Shape rect = new Rectangle(2, 3);<br /> <br /> System.out.println("Area of rectangle: "<br /> + rect.area());<br /> <br /> // Creating the Objects of circle class<br /> Shape circle = new Circle(2);<br /> <br /> System.out.println("Area of circle: "<br /> + circle.area());<br /> }<br />}<br />Output<br />Area of rectangle: 6.0<br />Area of circle: 12.56<br />When to use what?</p>
        <p>Consider using abstract classes if any of these statements apply to your situation:</p>
        <p>In the java application, there are some related classes that need to share some lines of code then you can put these lines of code within the abstract class and this abstract class should be extended by all these related classes.<br />You can define the non-static or non-final field(s) in the abstract class so that via a method you can access and modify the state of the object to which they belong.<br />You can expect that the classes that extend an abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private).<br />Consider using interfaces if any of these statements apply to your situation:</p>
        <p>It is total abstraction, All methods declared within an interface must be implemented by the class(es) that implements this interface.<br />A class can implement more than one interface. It is called multiple inheritances.<br />You want to specify the behavior of a particular data type but are not concerned about who implements its behavior.</p>
        <h1>Encapsulation in Java</h1>
        <p>Encapsulation is defined as the wrapping up of data under a single unit. It is the mechanism that binds together code and the data it manipulates. Another way to think about encapsulation is, it is a protective shield that prevents the data from being accessed by the code outside this shield.&nbsp;<br />&nbsp;</p>
        <ul>
        <li>Technically in encapsulation, the variables or data of a class is hidden from any other class and can be accessed only through any member function of its own class in which it is declared.</li>
        <li>As in encapsulation, the data in a class is hidden from other classes using the data hiding concept which is achieved by making the members or methods of a class private, and the class is exposed to the end-user or the world without providing any details behind implementation using the abstraction concept, so it is also known as a&nbsp;<strong>combination of data-hiding and abstraction</strong>.</li>
        <li>Encapsulation can be achieved by Declaring all the variables in the class as private and writing public methods in the class to set and get the values of variables</li>
        <li>It is more defined with setter and getter method.</li>
        </ul>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/Encapsulation.jpg" alt="Encapsulation" /></p>
        <p>The program to access variables of the class EncapsulateDemo is shown below:&nbsp;&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_181848" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate encapsulation</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">Encapsulate {</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// private variables declared</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// these can only be accessed by</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// public methods of class</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">private</code> <code class="plain">String geekName;</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">private</code> <code class="keyword">int</code> <code class="plain">geekRoll;</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">private</code> <code class="keyword">int</code> <code class="plain">geekAge;</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// get method for age to access</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// private variable geekAge</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">getAge() { </code><code class="keyword">return</code> <code class="plain">geekAge; }</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// get method for name to access</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// private variable geekName</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="plain">String getName() { </code><code class="keyword">return</code> <code class="plain">geekName; }</code></div>
        <div class="line number17 index16 alt2">&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// get method for roll to access</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// private variable geekRoll</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">getRoll() { </code><code class="keyword">return</code> <code class="plain">geekRoll; }</code></div>
        <div class="line number21 index20 alt2">&nbsp;</div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// set method for age to access</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// private variable geekage</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">setAge(</code><code class="keyword">int</code> <code class="plain">newAge) { geekAge = newAge; }</code></div>
        <div class="line number25 index24 alt2">&nbsp;</div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// set method for name to access</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// private variable geekName</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">setName(String newName)</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">geekName = newName;</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number32 index31 alt1">&nbsp;</div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// set method for roll to access</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// private variable geekRoll</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">setRoll(</code><code class="keyword">int</code> <code class="plain">newRoll) { geekRoll = newRoll; }</code></div>
        <div class="line number36 index35 alt1"><code class="plain">}</code></div>
        <div class="line number37 index36 alt2">&nbsp;</div>
        <div class="line number38 index37 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">TestEncapsulation {</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Encapsulate obj = </code><code class="keyword">new</code> <code class="plain">Encapsulate();</code></div>
        <div class="line number42 index41 alt1">&nbsp;</div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// setting values of the variables</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.setName(</code><code class="string">"Harsh"</code><code class="plain">);</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.setAge(</code><code class="value">19</code><code class="plain">);</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj.setRoll(</code><code class="value">51</code><code class="plain">);</code></div>
        <div class="line number47 index46 alt2">&nbsp;</div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Displaying values of the variables</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Geek's name: "</code> <code class="plain">+ obj.getName());</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Geek's age: "</code> <code class="plain">+ obj.getAge());</code></div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Geek's roll: "</code> <code class="plain">+ obj.getRoll());</code></div>
        <div class="line number52 index51 alt1">&nbsp;</div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Direct access of geekRoll is not possible</code></div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// due to encapsulation</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// System.out.println("Geek's roll: " +</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// obj.geekName);</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number58 index57 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Geek's name: Harsh
        Geek's age: 19
        Geek's roll: 51</pre>
        </div>
        <p>In the above program, the class Encapsulate is encapsulated as the variables are declared as private. The get methods like getAge() , getName() , getRoll() are set as public, these methods are used to access these variables. The setter methods like setName(), setAge(), setRoll() are also declared as public and are used to set the values of the variables.</p>
        <p><strong>Advantages of Encapsulation</strong>:&nbsp;&nbsp;</p>
        <ul>
        <li><strong>Data Hiding:</strong>&nbsp;The user will have no idea about the inner implementation of the class. It will not be visible to the user how the class is storing values in the variables. The user will only know that we are passing the values to a setter method and variables are getting initialized with that value.</li>
        <li><strong>Increased Flexibility:</strong>&nbsp;We can make the variables of the class read-only or write-only depending on our requirement. If we wish to make the variables read-only then we have to omit the setter methods like setName(), setAge(), etc. from the above program or if we wish to make the variables as write-only then we have to omit the get methods like getName(), getAge(), etc. from the above program</li>
        <li><strong>Reusability:</strong>&nbsp;Encapsulation also improves the re-usability and is easy to change with new requirements.</li>
        <li><strong>Testing code is easy:</strong>&nbsp;Encapsulated code is easy to test for unit testing.</li>
        </ul>
        <p>&nbsp;</p>`,
    },
    {
        topic: "Interfaces in Java",
        content: `<h1>Interfaces in Java</h1>
        <p>An Interface in Java programming language is defined as an abstract type used to specify the behavior of a class. An interface in Java is a blueprint of a class. A Java interface contains static constants and abstract methods.</p>
        <p>The interface in Java is a mechanism to achieve abstraction. There can be only abstract methods in the Java interface, not the method body. It is used to achieve abstraction and multiple inheritance in Java. In other words, you can say that interfaces can have abstract methods and variables. It cannot have a method body. Java Interface also represents the IS-A relationship.</p>
        <p>Like a class, an interface can have methods and variables, but the methods declared in an interface are by default abstract (only method signature, no body).</p>
        <p>Interfaces specify what a class must do and not how. It is the blueprint of the class.<br />An Interface is about capabilities like a Player may be an interface and any class implementing Player must be able to (or must implement) move(). So it specifies a set of methods that the class has to implement.<br />If a class implements an interface and does not provide method bodies for all functions specified in the interface, then the class must be declared abstract.<br />A Java library example is Comparator Interface. If a class implements this interface, then it can be used to sort a collection.<br />Syntax:</p>
        <p>interface {</p>
        <p>// declare constant fields<br /> // declare methods that abstract <br /> // by default. <br />}<br />To declare an interface, use the interface keyword. It is used to provide total abstraction. That means all the methods in an interface are declared with an empty body and are public and all fields are public, static, and final by default. A class that implements an interface must implement all the methods declared in the interface. To implement interface use implements keyword.</p>
        <p>Why do we use an Interface?<br />It is used to achieve total abstraction.<br />Since java does not support multiple inheritances in the case of class, by using an interface it can achieve multiple inheritances.<br />It is also used to achieve loose coupling.<br />Interfaces are used to implement abstraction. So the question arises why use interfaces when we have abstract classes?<br />The reason is, abstract classes may contain non-final variables, whereas variables in the interface are final, public and static.</p>
        <p>// A simple interface</p>
        <p>interface Player<br />{<br /> final int id = 10;<br /> int move();<br />}<br />Difference Between Class and Interface<br />The major differences between a class and an interface are:</p>
        <p>S. No. Class Interface<br />1. In class, you can instantiate variables and create an object. In an interface, you can&rsquo;t instantiate variables and create an object.<br />2. Class can contain concrete(with implementation) methods The interface cannot contain concrete(with implementation) methods<br />3. The access specifiers used with classes are private, protected, and public. In Interface only one specifier is used- Public.<br />Implementation: To implement an interface we use the keyword implements</p>
        <p><br />// Java program to demonstrate working of<br />// interface<br /> <br />import java.io.*;<br /> <br />// A simple interface<br />interface In1 {<br /> <br /> // public, static and final<br /> final int a = 10;<br /> <br /> // public and abstract<br /> void display();<br />}<br /> <br />// A class that implements the interface.<br />class TestClass implements In1 {<br /> <br /> // Implementing the capabilities of<br /> // interface.<br /> public void display(){ <br /> System.out.println("Geek"); <br /> }<br /> <br /> // Driver Code<br /> public static void main(String[] args)<br /> {<br /> TestClass t = new TestClass();<br /> t.display();<br /> System.out.println(a);<br /> }<br />}<br />Output<br />Geek<br />10<br />Real-World Example: Let&rsquo;s consider the example of vehicles like bicycle, car, bike&hellip;&hellip;&hellip;, they have common functionalities. So we make an interface and put all these common functionalities. And lets Bicycle, Bike, car &hellip;.etc implement all these functionalities in their own class in their own way.</p>
        <p><br />// Java program to demonstrate the <br />// real-world example of Interfaces<br /> <br />import java.io.*;<br /> <br />interface Vehicle {<br /> <br /> // all are the abstract methods.<br /> void changeGear(int a);<br /> void speedUp(int a);<br /> void applyBrakes(int a);<br />}<br /> <br />class Bicycle implements Vehicle{<br /> <br /> int speed;<br /> int gear;<br /> <br /> // to change gear<br /> @Override<br /> public void changeGear(int newGear){<br /> <br /> gear = newGear;<br /> }<br /> <br /> // to increase speed<br /> @Override<br /> public void speedUp(int increment){<br /> <br /> speed = speed + increment;<br /> }<br /> <br /> // to decrease speed<br /> @Override<br /> public void applyBrakes(int decrement){<br /> <br /> speed = speed - decrement;<br /> }<br /> <br /> public void printStates() {<br /> System.out.println("speed: " + speed<br /> + " gear: " + gear);<br /> }<br />}<br /> <br />class Bike implements Vehicle {<br /> <br /> int speed;<br /> int gear;<br /> <br /> // to change gear<br /> @Override<br /> public void changeGear(int newGear){<br /> <br /> gear = newGear;<br /> }<br /> <br /> // to increase speed<br /> @Override<br /> public void speedUp(int increment){<br /> <br /> speed = speed + increment;<br /> }<br /> <br /> // to decrease speed<br /> @Override<br /> public void applyBrakes(int decrement){<br /> <br /> speed = speed - decrement;<br /> }<br /> <br /> public void printStates() {<br /> System.out.println("speed: " + speed<br /> + " gear: " + gear);<br /> }<br /> <br />}<br />class GFG {<br /> <br /> public static void main (String[] args) {<br /> <br /> // creating an inatance of Bicycle<br /> // doing some operations<br /> Bicycle bicycle = new Bicycle();<br /> bicycle.changeGear(2);<br /> bicycle.speedUp(3);<br /> bicycle.applyBrakes(1);<br /> <br /> System.out.println("Bicycle present state :");<br /> bicycle.printStates();<br /> <br /> // creating instance of the bike.<br /> Bike bike = new Bike();<br /> bike.changeGear(1);<br /> bike.speedUp(4);<br /> bike.applyBrakes(3);<br /> <br /> System.out.println("Bike present state :");<br /> bike.printStates();<br /> }<br />}<br />Output<br />Bicycle present state :<br />speed: 2 gear: 2<br />Bike present state :<br />speed: 1 gear: 1<br />Advantages of Interfaces in Java<br />The advantages of using interfaces in Java are as follows:</p>
        <p>Without bothering about the implementation part, we can achieve the security of the implementation.<br />In Java, multiple inheritance is not allowed, however, you can use an interface to make use of it as you can implement more than one interface.<br />New Features Added in Interfaces in JDK 8<br />1. Prior to JDK 8, the interface could not define the implementation. We can now add default implementation for interface methods. This default implementation has a special use and does not affect the intention behind interfaces.</p>
        <p>Suppose we need to add a new function in an existing interface. Obviously, the old code will not work as the classes have not implemented those new functions. So with the help of default implementation, we will give a default body for the newly added functions. Then the old codes will still work.</p>
        <p><br />// Java program to show that interfaces can<br />// have methods from JDK 1.8 onwards<br /> <br />interface In1<br />{<br /> final int a = 10;<br /> default void display()<br /> {<br /> System.out.println("hello");<br /> }<br />}<br /> <br />// A class that implements the interface.<br />class TestClass implements In1<br />{<br /> // Driver Code<br /> public static void main (String[] args)<br /> {<br /> TestClass t = new TestClass();<br /> t.display();<br /> }<br />}<br />Output<br />hello<br />2. Another feature that was added in JDK 8 is that we can now define static methods in interfaces that can be called independently without an object. Note: these methods are not inherited.</p>
        <p><br />// Java Program to show that interfaces can<br />// have methods from JDK 1.8 onwards<br /> <br />interface In1<br />{<br /> final int a = 10;<br /> static void display()<br /> {<br /> System.out.println("hello");<br /> }<br />}<br /> <br />// A class that implements the interface.<br />class TestClass implements In1<br />{<br /> // Driver Code<br /> public static void main (String[] args)<br /> {<br /> In1.display();<br /> }<br />}<br />Output<br />hello<br />Important Points About Interface or Summary of the Article:<br />We can&rsquo;t create an instance(interface can&rsquo;t be instantiated) of the interface but we can make the reference of it that refers to the Object of its implementing class.<br />A class can implement more than one interface.<br />An interface can extend to another interface or interface (more than one interface).<br />A class that implements the interface must implement all the methods in the interface.<br />All the methods are public and abstract. And all the fields are public, static, and final.<br />It is used to achieve multiple inheritances.<br />It is used to achieve loose coupling.<br />New Features Added in Interfaces in JDK 9<br />From Java 9 onwards, interfaces can contain the following also:</p>
        <p>Static methods<br />Private methods<br />Private Static methods</p>
        <p>&nbsp;</p>`,
    },


    {
        topic: "Keywords in Java"
        , content: `<h1 class="h1">Java Keywords</h1>
        <p>Java keywords are also known as reserved words. Keywords are particular words that act as a key to a code. These are predefined words by Java so they cannot be used as a variable or object name or class name.</p>
        <h2 class="h2">List of Java Keywords</h2>
        <p>A list of Java keywords or reserved words are given below:</p>
        <ol class="points">
        <li><strong><a href="https://www.javatpoint.com/abstract-keyword-in-java">abstract</a>:</strong>&nbsp;Java abstract keyword is used to declare an abstract class. An abstract class can provide the implementation of the interface. It can have abstract and non-abstract methods.</li>
        <li><strong><a href="https://www.javatpoint.com/boolean-keyword-in-java">boolean:</a></strong>&nbsp;Java boolean keyword is used to declare a variable as a boolean type. It can hold True and False values only.</li>
        <li><strong><a href="https://www.javatpoint.com/java-break">break</a>:</strong>&nbsp;Java break keyword is used to break the loop or switch statement. It breaks the current flow of the program at specified conditions.</li>
        <li><strong><a href="https://www.javatpoint.com/byte-keyword-in-java">byte</a>:</strong>&nbsp;Java byte keyword is used to declare a variable that can hold 8-bit data values.</li>
        <li><strong><a href="https://www.javatpoint.com/case-keyword-in-java">case</a>:</strong>&nbsp;Java case keyword is used with the switch statements to mark blocks of text.</li>
        <li><strong><a href="https://www.javatpoint.com/try-catch-block">catch</a>:</strong>&nbsp;Java catch keyword is used to catch the exceptions generated by try statements. It must be used after the try block only.</li>
        <li><strong><a href="https://www.javatpoint.com/char-keyword-in-java">char</a>:</strong>&nbsp;Java char keyword is used to declare a variable that can hold unsigned 16-bit Unicode characters</li>
        <li><strong><a href="https://www.javatpoint.com/class-keyword-in-java">class</a>:</strong>&nbsp;Java class keyword is used to declare a class.</li>
        <li><strong><a href="https://www.javatpoint.com/java-continue">continue</a>:</strong>&nbsp;Java continue keyword is used to continue the loop. It continues the current flow of the program and skips the remaining code at the specified condition.</li>
        <li><strong><a href="https://www.javatpoint.com/default-keyword-in-java">default</a>:</strong>&nbsp;Java default keyword is used to specify the default block of code in a switch statement.</li>
        <li><strong><a href="https://www.javatpoint.com/java-do-while-loop">do</a>:</strong>&nbsp;Java do keyword is used in the control statement to declare a loop. It can iterate a part of the program several times.</li>
        <li><strong><a href="https://www.javatpoint.com/double-keyword-in-java">double</a>:</strong>&nbsp;Java double keyword is used to declare a variable that can hold 64-bit floating-point number.</li>
        <li><strong><a href="https://www.javatpoint.com/java-if-else">else</a>:</strong>&nbsp;Java else keyword is used to indicate the alternative branches in an if statement.</li>
        <li><strong><a href="https://www.javatpoint.com/enum-in-java">enum</a>:</strong>&nbsp;Java enum keyword is used to define a fixed set of constants. Enum constructors are always private or default.</li>
        <li><strong><a href="https://www.javatpoint.com/inheritance-in-java">extends</a>:</strong>&nbsp;Java extends keyword is used to indicate that a class is derived from another class or interface.</li>
        <li><strong><a href="https://www.javatpoint.com/final-keyword">final</a>:</strong>&nbsp;Java final keyword is used to indicate that a variable holds a constant value. It is used with a variable. It is used to restrict the user from updating the value of the variable.</li>
        <li><strong><a href="https://www.javatpoint.com/finally-block-in-exception-handling">finally</a>:</strong>&nbsp;Java finally keyword indicates a block of code in a try-catch structure. This block is always executed whether an exception is handled or not.</li>
        <li><strong><a href="https://www.javatpoint.com/float-keyword-in-java">float</a>:</strong>&nbsp;Java float keyword is used to declare a variable that can hold a 32-bit floating-point number.</li>
        <li><strong><a href="https://www.javatpoint.com/java-for-loop">for</a>:</strong>&nbsp;Java for keyword is used to start a for loop. It is used to execute a set of instructions/functions repeatedly when some condition becomes true. If the number of iteration is fixed, it is recommended to use for loop.</li>
        <li><strong><a href="https://www.javatpoint.com/java-if-else">if</a>:</strong>&nbsp;Java if keyword tests the condition. It executes the if block if the condition is true.</li>
        <li><strong><a href="https://www.javatpoint.com/interface-in-java">implements</a>:</strong>&nbsp;Java implements keyword is used to implement an interface.</li>
        <li><strong><a href="https://www.javatpoint.com/package">import</a>:</strong>&nbsp;Java import keyword makes classes and interfaces available and accessible to the current source code.</li>
        <li><strong><a href="https://www.javatpoint.com/downcasting-with-instanceof-operator">instanceof</a>:</strong>&nbsp;Java instanceof keyword is used to test whether the object is an instance of the specified class or implements an interface.</li>
        <li><strong><a href="https://www.javatpoint.com/int-keyword-in-java">int</a>:</strong>&nbsp;Java int keyword is used to declare a variable that can hold a 32-bit signed integer.</li>
        <li><strong><a href="https://www.javatpoint.com/interface-in-java">interface</a>:</strong>&nbsp;Java interface keyword is used to declare an interface. It can have only abstract methods.</li>
        <li><strong><a href="https://www.javatpoint.com/long-keyword-in-java">long</a>:</strong>&nbsp;Java long keyword is used to declare a variable that can hold a 64-bit integer.</li>
        <li><strong>native:</strong>&nbsp;Java native keyword is used to specify that a method is implemented in native code using JNI (Java Native Interface).</li>
        <li><strong><a href="https://www.javatpoint.com/new-keyword-in-java">new</a>:</strong>&nbsp;Java new keyword is used to create new objects.</li>
        <li><strong><a href="https://www.javatpoint.com/null-keyword-in-java">null</a>:</strong>&nbsp;Java null keyword is used to indicate that a reference does not refer to anything. It removes the garbage value.</li>
        <li><strong><a href="https://www.javatpoint.com/package">package</a>:</strong>&nbsp;Java package keyword is used to declare a Java package that includes the classes.</li>
        <li><strong><a href="https://www.javatpoint.com/private-keyword-in-java">private</a>:</strong>&nbsp;Java private keyword is an access modifier. It is used to indicate that a method or variable may be accessed only in the class in which it is declared.</li>
        <li><strong><a href="https://www.javatpoint.com/protected-keyword-in-java">protected</a>:</strong>&nbsp;Java protected keyword is an access modifier. It can be accessible within the package and outside the package but through inheritance only. It can't be applied with the class.</li>
        <li><strong><a href="https://www.javatpoint.com/public-keyword-in-java">public</a>:</strong>&nbsp;Java public keyword is an access modifier. It is used to indicate that an item is accessible anywhere. It has the widest scope among all other modifiers.</li>
        <li><strong><a href="https://www.javatpoint.com/return-keyword-in-java">return</a>:</strong>&nbsp;Java return keyword is used to return from a method when its execution is complete.</li>
        <li><strong><a href="https://www.javatpoint.com/short-keyword-in-java">short</a>:</strong>&nbsp;Java short keyword is used to declare a variable that can hold a 16-bit integer.</li>
        <li><strong><a href="https://www.javatpoint.com/static-keyword-in-java">static</a>:</strong>&nbsp;Java static keyword is used to indicate that a variable or method is a class method. The static keyword in Java is mainly used for memory management.</li>
        <li><strong><a href="https://www.javatpoint.com/strictfp-keyword">strictfp</a>:</strong>&nbsp;Java strictfp is used to restrict the floating-point calculations to ensure portability.</li>
        <li><strong><a href="https://www.javatpoint.com/super-keyword">super</a>:</strong>&nbsp;Java super keyword is a reference variable that is used to refer to parent class objects. It can be used to invoke the immediate parent class method.</li>
        <li><strong><a href="https://www.javatpoint.com/java-switch">switch</a>:</strong>&nbsp;The Java switch keyword contains a switch statement that executes code based on test value. The switch statement tests the equality of a variable against multiple values.</li>
        <li><strong><a href="https://www.javatpoint.com/synchronization-in-java">synchronized</a>:</strong>&nbsp;Java synchronized keyword is used to specify the critical sections or methods in multithreaded code.</li>
        <li><strong><a href="https://www.javatpoint.com/this-keyword">this</a>:</strong>&nbsp;Java this keyword can be used to refer the current object in a method or constructor.</li>
        <li><strong><a href="https://www.javatpoint.com/throw-keyword">throw</a>:</strong>&nbsp;The Java throw keyword is used to explicitly throw an exception. The throw keyword is mainly used to throw custom exceptions. It is followed by an instance.</li>
        <li><strong><a href="https://www.javatpoint.com/throws-keyword-and-difference-between-throw-and-throws">throws</a>:</strong>&nbsp;The Java throws keyword is used to declare an exception. Checked exceptions can be propagated with throws.</li>
        <li><strong><a href="https://www.javatpoint.com/transient-keyword">transient</a>:</strong>&nbsp;Java transient keyword is used in serialization. If you define any data member as transient, it will not be serialized.</li>
        <li><strong><a href="https://www.javatpoint.com/try-catch-block">try</a>:</strong>&nbsp;Java try keyword is used to start a block of code that will be tested for exceptions. The try block must be followed by either catch or finally block.</li>
        <li><strong>void:</strong>&nbsp;Java void keyword is used to specify that a method does not have a return value.</li>
        <li><strong><a href="https://www.javatpoint.com/volatile-keyword-in-java">volatile</a>:</strong>&nbsp;Java volatile keyword is used to indicate that a variable may change asynchronously.</li>
        <li><strong><a href="https://www.javatpoint.com/java-while-loop">while</a>:</strong>&nbsp;Java while keyword is used to start a while loop. This loop iterates a part of the program several times. If the number of iteration is not fixed, it is recommended to use the while loop.</li>
        </ol>`
    },
    {
        topic: "Exception Handling in Java",
        content: `<h1>Exception Handling in Java</h1><h2><strong>What is meant by exception handling?</strong></h2>
        <p>Errors arise unexpectedly and can result in disrupting the normal flow of execution. This is something that every programmer faces at one point or the other while coding.&nbsp;<strong><a href="https://www.edureka.co/blog/java-tutorial/" target="_blank" rel="noopener noreferrer">Java,</a></strong>&nbsp;being the most prominent&nbsp;<strong><a href="https://www.edureka.co/blog/object-oriented-programming/" target="_blank" rel="noopener noreferrer">object-oriented language,</a></strong>&nbsp;provides a powerful mechanism to handle these errors/exceptions.</p>
        <h2><strong>What happens if exceptions are not handled?</strong></h2>
        <p>When an exception occurs, and if you don&rsquo;t handle it, the program will terminate abruptly (the piece of code after the line causing the exception will not get executed).</p>
        <p>Through this article on Java Exception Handling, I will give you a complete insight into the fundamentals and various methods of Exception Handling.</p>
        <p>In this article, I will be covering the following topics.</p>
        <h2><strong>Introduction to Exception Handling</strong></h2>
        <p>An exception is a problem that arises during the execution of a program. It can occur for various reasons say-</p>
        <ul>
        <li>A user has entered an invalid data</li>
        <li>File not found</li>
        <li>A network connection has been lost in the middle of communications</li>
        <li>The JVM has run out of a memory</li>
        </ul>
        <p>Exception Handling mechanism follows a flow which is depicted in the below figure. But if an exception is not handled, it may lead to a system failure. That is why handling an exception is very important.</p>
        <h2><strong>Exceptions Hierarchy&nbsp;</strong></h2>
        <p>All exception and error types are subclasses of class&nbsp;<em><strong>Throwable</strong></em>, which is the base class of hierarchy. One branch is headed by&nbsp;<em><strong>Error</strong>&nbsp;</em>which occurs at run-time and other by&nbsp;<strong><em>Exception</em>&nbsp;</strong>that can happen either at compile time or run-time.</p>
        <div class="wpb_text_column wpb_content_element vc_custom_1540455044453">
        <div class="wpb_wrapper">
        <p><img class="wp-image-72635 aligncenter  blur-up lazyloaded" src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka.png" sizes="(max-width: 724px) 100vw, 724px" srcset="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka.png 2048w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka-150x92.png 150w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka-300x185.png 300w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka-768x473.png 768w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka-487x300.png 487w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka-292x180.png 292w" alt="Exceptions Hierarchy - Java Exceptions Handling -Edureka" width="724" height="447" data-src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka.png" data-srcset="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka.png 2048w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka-150x92.png 150w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka-300x185.png 300w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka-768x473.png 768w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka-487x300.png 487w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Exceptions-Hierarchy-Java-Exceptions-Handling-Edureka-292x180.png 292w" data-sizes="(max-width: 724px) 100vw, 724px" />Basically,&nbsp; an&nbsp;<strong>Error&nbsp;</strong>is used by the Java run-time system (JVM) to indicate errors that are associated with the run-time environment (JRE).&nbsp;<em>StackOverflowError is an example of such an error. Whereas&nbsp;</em><strong>E</strong><strong>xception&nbsp;</strong><em>is used for exceptional conditions that user programs should catch. NullPointerException is an example of such an exception.&nbsp;</em></p>
        <p>Now that you know what errors and exceptions are, let&rsquo;s find out the basic difference between them. Take a look at the below table which draws a clear line between both of them.</p>
        <table border="1">
        <tbody>
        <tr>
        <td><strong>Errors</strong></td>
        <td><strong>Exceptions</strong></td>
        </tr>
        <tr>
        <td>&nbsp;1. Impossible to recover from an error</td>
        <td>&nbsp;1. Possible to recover from exceptions</td>
        </tr>
        <tr>
        <td>&nbsp;2. Errors are of type &lsquo;unchecked&rsquo;</td>
        <td>&nbsp;2. Exceptions can be either &lsquo;checked&rsquo; or &lsquo;unchecked&rsquo;</td>
        </tr>
        <tr>
        <td>&nbsp;3. Occur at runtime</td>
        <td>&nbsp;3. Can occur at compile time or run time</td>
        </tr>
        <tr>
        <td>&nbsp;4. Caused by the application running environment</td>
        <td>&nbsp;4. Caused by the application itself</td>
        </tr>
        </tbody>
        </table>
        <p>Now,&nbsp;<a name="BasicException"></a>we will dive deeper into exceptions and see how they can be handled. First, let&rsquo;s see the different types of exceptions.</p>
        <ul>
        <li><strong>Checked Exception</strong><br />It is&nbsp;an exception that occurs at compile time, also called compile time exceptions.&nbsp;If some code within a method throws a checked exception,&nbsp;then the method must either handle the exception or it must specify the exception using&nbsp;<em>throws&nbsp;</em>keyword.</li>
        <li><strong>Unchecked Exception</strong><br />It is&nbsp;an exception that occurs at the time of execution. These are also called&nbsp;<em>Runtime Exceptions.</em>&nbsp;In C++, all exceptions are unchecked, so it is not forced by the compiler to either handle or specify the exception. It is up to the programmers to specify or catch the exceptions.</li>
        </ul>
        </div>
        </div>
        <div class="wpb_text_column wpb_content_element vc_custom_1540462453461">
        <div class="wpb_wrapper">
        <h2><strong>Basic Example of Exception</strong></h2>
        <div>&nbsp;</div>
        <div class="line number1 index0 alt2"><code class="java keyword">class</code> <code class="java plain">Exception{</code></div>
        <div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String args[]){</code></div>
        <div class="line number3 index2 alt2"><code class="java keyword">try</code><code class="java plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="java comments">//code that may raise exception</code></div>
        <div class="line number5 index4 alt2"><code class="java plain">}</code></div>
        <div class="line number6 index5 alt1"><code class="java keyword">catch</code><code class="java plain">(Exception e){</code></div>
        <div class="line number7 index6 alt2"><code class="java comments">// rest of the program</code></div>
        <div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div>
        <div class="line number9 index8 alt2"><code class="java spaces">&nbsp;</code><code class="java plain">}</code></div>
        <div class="line number10 index9 alt1"><code class="java plain">}</code></div>
        <p>Above code represent an exception wherein inside try block we are going to write a code that may raise an exception and then, that exception will be handled in the catch block.&nbsp;&nbsp;</p>
        <h2><strong>Types of Exceptions</strong></h2>
        <ol>
        <li>
        <h3><strong>Built-in Exceptions<br /></strong></h3>
        <table border="1">
        <tbody>
        <tr>
        <td><strong>Built-in Exceptions</strong></td>
        <td><strong>Description</strong></td>
        </tr>
        <tr>
        <td><em><strong>&nbsp; ArithmeticException</strong></em></td>
        <td>It is thrown when an exceptional condition has occurred in an arithmetic operation.</td>
        </tr>
        <tr>
        <td><em><strong>&nbsp;ArrayIndexOutOfBoundsException</strong></em></td>
        <td>It is thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.</td>
        </tr>
        <tr>
        <td><em><strong>&nbsp;ClassNotFoundException</strong></em></td>
        <td>This exception is raised when we try to access a class whose definition is not found.</td>
        </tr>
        <tr>
        <td><em><strong>FileNotFoundException</strong></em></td>
        <td>An exception that is raised when a file is not accessible or does not open.</td>
        </tr>
        <tr>
        <td><em><strong>IOException</strong></em></td>
        <td>It is thrown when an input-output operation is failed or interrupted.</td>
        </tr>
        <tr>
        <td><em><strong>InterruptedException</strong></em></td>
        <td>It is thrown when a thread is waiting, sleeping, or doing some processing, and it is interrupted.</td>
        </tr>
        <tr>
        <td><em><strong>NoSuchFieldException</strong></em></td>
        <td>It is thrown when a class does not contain the field (or variable) specified.</td>
        </tr>
        </tbody>
        </table>
        </li>
        <li>
        <h3><strong>User-Defined Exceptions<br /></strong></h3>
        <p>Sometimes, the built-in exceptions in Java are not able to describe a certain situation. In such cases, a user can also create exceptions which are called &lsquo;User-Defined Exceptions&rsquo;.<br /><strong>Key points to note:</strong></p>
        <ol>
        <li>A user-defined exception must extend Exception class.</li>
        <li>The exception is thrown using&nbsp;<em>throw</em>&nbsp;keyword.</li>
        </ol>
        </li>
        </ol>
        <p><strong>Example:</strong></p>
        <div>
        <div id="highlighter_116626" class="syntaxhighlighter  java">&nbsp;</div>
        <div class="syntaxhighlighter  java">
        <div class="line number1 index0 alt2"><code class="java keyword">class</code> <code class="java plain">MyException </code><code class="java keyword">extends</code> <code class="java plain">Exception{ </code></div>
        <div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code><code class="java plain">String str1;</code></div>
        <div class="line number3 index2 alt2"><code class="java spaces">&nbsp;</code><code class="java plain">MyException(String str2) {str1=str2;}</code></div>
        <div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java plain">String toString(){</code></div>
        <div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java keyword">return</code> <code class="java plain">(</code><code class="java string">"MyException Occurred: "</code><code class="java plain">+str1);</code></div>
        <div class="line number6 index5 alt1"><code class="java spaces">&nbsp;</code><code class="java plain">}</code></div>
        <div class="line number7 index6 alt2"><code class="java plain">}</code></div>
        <div class="line number8 index7 alt1"><code class="java keyword">class</code> <code class="java plain">Example1{</code></div>
        <div class="line number9 index8 alt2"><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String args[]){</code></div>
        <div class="line number10 index9 alt1"><code class="java spaces">&nbsp;</code><code class="java keyword">try</code><code class="java plain">{</code></div>
        <div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"Start of try block"</code><code class="java plain">);</code></div>
        <div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">throw</code> <code class="java keyword">new</code> <code class="java plain">MyException(&ldquo;Error Message");</code></div>
        <div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div>
        <div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">catch</code><code class="java plain">(MyException exp){System.out.println(</code><code class="java string">"Catch Block"</code><code class="java plain">);</code></div>
        <div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(exp);</code></div>
        <div class="line number16 index15 alt1"><code class="java spaces">&nbsp;</code><code class="java plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="java plain">}</code></div>
        <div class="line number17 index16 alt2">&nbsp;</div>
        <div class="line number17 index16 alt2">
        <div class="wpb_wrapper">
        <p>Now that you have seen the different types of exceptions, let&rsquo;s dive deeper into this Java Exception Handling blog to understand various methods for handling these exceptions.</p>
        <h2><strong>Exception Handling Methods</strong></h2>
        <h3><strong>How to handle exceptions in Java?&nbsp;&nbsp;</strong></h3>
        <p>As I have already mentioned, handling an exception is very important, else it leads to system failure. But how do you handle these exceptions?</p>
        <p>Java provides various methods to handle the Exceptions like:</p>
        <ul>
        <li>try</li>
        <li>catch</li>
        <li>finally</li>
        <li>throw</li>
        <li>throws</li>
        </ul>
        <p>Let&rsquo;s understand each of these methods in detail.</p>
        </div>
        <div>
        <div class="wpb_text_column wpb_content_element vc_custom_1540464054036">
        <div class="wpb_wrapper">
        <h3><strong>try block</strong></h3>
        <p>The try block contains a set of statements where an exception can occur. It is always followed by a catch block, which handles the exception that occurs in the associated try block. A try block must be followed by catch blocks or finally block or both.</p>
        </div>
        </div>
        <div class="wpb_text_column wpb_content_element vc_custom_1540532030112">
        <div class="wpb_wrapper">
        <div>
        <div id="highlighter_405912" class="syntaxhighlighter  java">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="gutter">
        <div class="line number1 index0 alt2">1</div>
        <div class="line number2 index1 alt1">2</div>
        <div class="line number3 index2 alt2">3</div>
        </td>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="java keyword">try</code><code class="java plain">{</code></div>
        <div class="line number2 index1 alt1"><code class="java comments">//code that may throw exception</code></div>
        <div class="line number3 index2 alt2"><code class="java plain">}</code><code class="java keyword">catch</code><code class="java plain">(Exception_class_Name ref){}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        <h3><strong>Nested try block</strong></h3>
        <div class="wpb_text_column wpb_content_element vc_custom_1540455013355">
        <div class="wpb_wrapper">
        <p>try block within a try block is known as nested try block in java.</p>
        </div>
        </div>
        <div class="wpb_text_column wpb_content_element vc_custom_1540532010890">
        <div class="wpb_wrapper">
        <div>
        <div id="highlighter_297809" class="syntaxhighlighter  java">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="gutter">
        <div class="line number1 index0 alt2">1</div>
        <div class="line number2 index1 alt1">2</div>
        <div class="line number3 index2 alt2">3</div>
        <div class="line number4 index3 alt1">4</div>
        <div class="line number5 index4 alt2">5</div>
        <div class="line number6 index5 alt1">6</div>
        <div class="line number7 index6 alt2">7</div>
        <div class="line number8 index7 alt1">8</div>
        <div class="line number9 index8 alt2">9</div>
        <div class="line number10 index9 alt1">10</div>
        <div class="line number11 index10 alt2">11</div>
        <div class="line number12 index11 alt1">12</div>
        <div class="line number13 index12 alt2">13</div>
        <div class="line number14 index13 alt1">14</div>
        <div class="line number15 index14 alt2">15</div>
        <div class="line number16 index15 alt1">16</div>
        <div class="line number17 index16 alt2">17</div>
        <div class="line number18 index17 alt1">18</div>
        </td>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="java keyword">class</code> <code class="java plain">Exception{</code></div>
        <div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String args[]){</code></div>
        <div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">try</code><code class="java plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">try</code><code class="java plain">{</code></div>
        <div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"going to divide"</code><code class="java plain">);</code></div>
        <div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">b=</code><code class="java value">59</code><code class="java plain">/</code><code class="java value">0</code><code class="java plain">;</code></div>
        <div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code><code class="java keyword">catch</code><code class="java plain">(ArithmeticException e){System.out.println(e);}</code></div>
        <div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">try</code><code class="java plain">{</code></div>
        <div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">a[]=</code><code class="java keyword">new</code> <code class="java keyword">int</code><code class="java plain">[</code><code class="java value">5</code><code class="java plain">];</code></div>
        <div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">a[</code><code class="java value">5</code><code class="java plain">]=</code><code class="java value">4</code><code class="java plain">;</code></div>
        <div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">catch</code><code class="java plain">(ArrayIndexOutOfBoundsException e) {System.out.println(e);}</code></div>
        <div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println("other statement);</code></div>
        <div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code><code class="java keyword">catch</code><code class="java plain">(Exception e)</code></div>
        <div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{System.out.println(</code><code class="java string">"Exception handeled"</code><code class="java plain">);}</code></div>
        <div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"casual flow"</code><code class="java plain">);</code></div>
        <div class="line number17 index16 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div>
        <div class="line number18 index17 alt1"><code class="java plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        <h3><strong>catch block</strong></h3>
        <p>A catch block is where you handle the exceptions. This block must follow the try block and a single try block can have several catch blocks associated with it. You can catch different exceptions in different catch blocks. When an exception occurs in a try block, the corresponding catch block that handles that particular exception executes.&nbsp;</p>
        <div class="wpb_text_column wpb_content_element vc_custom_1540533358769">
        <div class="wpb_wrapper">
        <div>
        <div id="highlighter_379653" class="syntaxhighlighter  java">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="gutter">
        <div class="line number1 index0 alt2">1</div>
        <div class="line number2 index1 alt1">2</div>
        <div class="line number3 index2 alt2">3</div>
        <div class="line number4 index3 alt1">4</div>
        <div class="line number5 index4 alt2">5</div>
        <div class="line number6 index5 alt1">6</div>
        </td>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Testtrycatch1{</code></div>
        <div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String args[]){</code></div>
        <div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">data=</code><code class="java value">50</code><code class="java plain">/</code><code class="java value">0</code><code class="java plain">;</code><code class="java comments">//may throw exception</code></div>
        <div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"rest of the code..."</code><code class="java plain">);</code></div>
        <div class="line number5 index4 alt2"><code class="java spaces">&nbsp;</code><code class="java plain">}</code></div>
        <div class="line number6 index5 alt1"><code class="java plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        <div class="wpb_text_column wpb_content_element vc_custom_1540352643952">
        <div class="wpb_wrapper">
        <h3><strong>Multi-catch block</strong></h3>
        <p>If you have to perform various tasks at the occurrence of various exceptions, you can use the multi-catch block.</p>
        </div>
        </div>
        <div class="wpb_text_column wpb_content_element vc_custom_1540532063935">
        <div class="wpb_wrapper">
        <div>
        <div id="highlighter_149405" class="syntaxhighlighter  java">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="gutter">
        <div class="line number1 index0 alt2">1</div>
        <div class="line number2 index1 alt1">2</div>
        <div class="line number3 index2 alt2">3</div>
        <div class="line number4 index3 alt1">4</div>
        <div class="line number5 index4 alt2">5</div>
        <div class="line number6 index5 alt1">6</div>
        <div class="line number7 index6 alt2">7</div>
        <div class="line number8 index7 alt1">8</div>
        <div class="line number9 index8 alt2">9</div>
        <div class="line number10 index9 alt1">10</div>
        <div class="line number11 index10 alt2">11</div>
        <div class="line number12 index11 alt1">12</div>
        <div class="line number13 index12 alt2">13</div>
        <div class="line number14 index13 alt1">14</div>
        <div class="line number15 index14 alt2">15</div>
        </td>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">SampleMultipleCatchBlock{</code></div>
        <div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String args[]){</code></div>
        <div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">try</code><code class="java plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">a[]=</code><code class="java keyword">new</code> <code class="java keyword">int</code><code class="java plain">[</code><code class="java value">5</code><code class="java plain">];</code></div>
        <div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">a[</code><code class="java value">5</code><code class="java plain">]=</code><code class="java value">30</code><code class="java plain">/</code><code class="java value">0</code><code class="java plain">;</code></div>
        <div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div>
        <div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">catch</code><code class="java plain">(ArithmeticException e)</code></div>
        <div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{System.out.println(</code><code class="java string">"task1 is completed"</code><code class="java plain">);}</code></div>
        <div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">catch</code><code class="java plain">(ArrayIndexOutOfBoundsException e)</code></div>
        <div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{System.out.println(</code><code class="java string">"task 2 completed"</code><code class="java plain">);}</code></div>
        <div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">catch</code><code class="java plain">(Exception e)</code></div>
        <div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{System.out.println(</code><code class="java string">"task 3 completed"</code><code class="java plain">);}</code></div>
        <div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"remaining code"</code><code class="java plain">);</code></div>
        <div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div>
        <div class="line number15 index14 alt2"><code class="java plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        <div class="wpb_text_column wpb_content_element vc_custom_1540348709295">
        <div class="wpb_wrapper">
        <h3><strong>finally block</strong></h3>
        <p><em>A&nbsp;finally block</em>&nbsp;contains all the crucial statements that must be executed whether an exception occurs or not. The statements present in this block will always execute, regardless an exception occurs in the try block or not such as closing a connection, stream etc.</p>
        </div>
        </div>
        <div class="wpb_text_column wpb_content_element vc_custom_1540532052954">
        <div class="wpb_wrapper">
        <div>
        <div id="highlighter_243369" class="syntaxhighlighter  java">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="gutter">
        <div class="line number1 index0 alt2">1</div>
        <div class="line number2 index1 alt1">2</div>
        <div class="line number3 index2 alt2">3</div>
        <div class="line number4 index3 alt1">4</div>
        <div class="line number5 index4 alt2">5</div>
        <div class="line number6 index5 alt1">6</div>
        <div class="line number7 index6 alt2">7</div>
        <div class="line number8 index7 alt1">8</div>
        <div class="line number9 index8 alt2">9</div>
        <div class="line number10 index9 alt1">10</div>
        <div class="line number11 index10 alt2">11</div>
        <div class="line number12 index11 alt1">12</div>
        </td>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="java keyword">class</code> <code class="java plain">SampleFinallyBlock{</code></div>
        <div class="line number2 index1 alt1"><code class="java spaces">&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String args[]){</code></div>
        <div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;</code><code class="java keyword">try</code><code class="java plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">int</code> <code class="java plain">data=</code><code class="java value">55</code><code class="java plain">/</code><code class="java value">5</code><code class="java plain">;</code></div>
        <div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(data);</code></div>
        <div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div>
        <div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">catch</code><code class="java plain">(NullPointerException e)</code></div>
        <div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">{System.out.println(e);} </code></div>
        <div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">finally</code> <code class="java plain">{System.out.println(</code><code class="java string">"finally block is executed"</code><code class="java plain">);}</code></div>
        <div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(</code><code class="java string">"remaining code"</code><code class="java plain">);</code></div>
        <div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="java plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        <p><a name="finalvsfinallyvsfinalize"></a></p>
        </div>
        </div>
        <p>So, this was all about the various methods of handling exceptions.</p>
        <p>You might have heard that final, finally and finalize are keywords in Java. Yes, they are, but they differ from each other in various aspects. So, let&rsquo;s see how&nbsp;<strong><em>final, finally and finalize</em></strong>&nbsp;are different from each other with the help of below table.</p>
        <h2><strong>final vs finally vs finalize</strong></h2>
        <p><a name="throwvsthrows"></a></p>
        <table border="1">
        <tbody>
        <tr>
        <td><strong>final</strong></td>
        <td><strong>finally</strong></td>
        <td><strong>finalize</strong></td>
        </tr>
        <tr>
        <td>It is a keyword.</td>
        <td>It is a block.</td>
        <td>It is a method.</td>
        </tr>
        <tr>
        <td>Used to apply restrictions on class, methods &amp; variables.</td>
        <td>Used to place an important code.</td>
        <td>Used to perform clean-up processing just before the object is garbage collected.</td>
        </tr>
        <tr>
        <td>final class can&rsquo;t be inherited, method can&rsquo;t be overridden &amp; the variable value can&rsquo;t be changed.</td>
        <td>It will be executed whether the exception is handled or not.</td>
        <td>&ndash;</td>
        </tr>
        </tbody>
        </table>
        <p>Similarly, throw &amp; throws sound alike, but they are different from each other. Let&rsquo;s see how, with the help of the below table.</p>
        <h2><strong>throw vs throws&nbsp;</strong></h2>
        <table border="1">
        <tbody>
        <tr>
        <td><strong>throw</strong></td>
        <td><strong>throws</strong></td>
        </tr>
        <tr>
        <td>&nbsp;1. Used to explicitly throw an exception</td>
        <td>&nbsp;1. Used to declare an exception</td>
        </tr>
        <tr>
        <td>&nbsp;2. Checked exceptions cannot be propagated using throw only</td>
        <td>&nbsp;2. Checked exceptions can be propagated</td>
        </tr>
        <tr>
        <td>&nbsp;3. Followed by an instance</td>
        <td>&nbsp;3. Followed by a class</td>
        </tr>
        <tr>
        <td>&nbsp;4. Used within a method</td>
        <td>&nbsp;4. Used with a method signature</td>
        </tr>
        <tr>
        <td>&nbsp;5. Cannot throw multiple exceptions</td>
        <td>&nbsp;5. Can declare multiple exceptions</td>
        </tr>
        </tbody>
        </table>
        <div>
        <div id="highlighter_839523" class="syntaxhighlighter  java">&nbsp;</div>
        <div class="syntaxhighlighter  java">&nbsp;</div>
        <div class="syntaxhighlighter  java">
        <div class="line number1 index0 alt2"><code class="java comments">//Java throw example</code></div>
        <div class="line number2 index1 alt1"><code class="java keyword">void</code> <code class="java plain">a()</code></div>
        <div class="line number3 index2 alt2"><code class="java plain">{</code></div>
        <div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java keyword">throw</code> <code class="java keyword">new</code> <code class="java plain">ArithmeticException(</code><code class="java string">"Incorrect"</code><code class="java plain">);</code></div>
        <div class="line number5 index4 alt2"><code class="java plain">}</code></div>
        <div class="line number6 index5 alt1"><code class="java comments">//Java throws example</code></div>
        <div class="line number7 index6 alt2"><code class="java keyword">void</code> <code class="java plain">a()</code><code class="java keyword">throws</code> <code class="java plain">ArithmeticException</code></div>
        <div class="line number8 index7 alt1"><code class="java plain">{</code></div>
        <div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;</code><code class="java comments">//method code</code></div>
        <div class="line number10 index9 alt1"><code class="java plain">}</code></div>
        <div class="line number11 index10 alt2"><code class="java comments">//Java throw and throws example</code></div>
        <div class="line number12 index11 alt1"><code class="java keyword">void</code> <code class="java plain">a()</code><code class="java keyword">throws</code> <code class="java plain">ArithmeticException</code></div>
        <div class="line number13 index12 alt2"><code class="java plain">{</code></div>
        <div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;</code><code class="java keyword">throw</code> <code class="java keyword">new</code> <code class="java plain">ArithmeticException(</code><code class="java string">"Incorrect"</code><code class="java plain">);</code></div>
        <div class="line number15 index14 alt2"><code class="java plain">}</code></div>
        </div>
        </div>
        <p><em>This brings us to the end of our blog on Exception Handling in Java. I hope you found this blog informative and added value to your knowledge.</em></p>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p>&nbsp;</p>
        <div class="cta_inline">&nbsp;</div>
        </div>
        </div>`,
    },
    {
        topic: "Collection Framework",
        content: `<h1>Collections in Java</h1><p>&nbsp;Java provided ad hoc classes such as&nbsp;<strong>Dictionary, Vector, Stack,</strong>&nbsp;and&nbsp;<strong>Properties</strong>&nbsp;to store and manipulate groups of objects. Although these classes were quite useful, they lacked a central, unifying theme. Thus, the way that you used Vector was different from the way that you used Properties.</p>
        <p>The collections framework was designed to meet several goals, such as &minus;</p>
        <ul class="list">
        <li>
        <p>The framework had to be high-performance. The implementations for the fundamental collections (dynamic arrays, linked lists, trees, and hashtables) were to be highly efficient.</p>
        </li>
        <li>
        <p>The framework had to allow different types of collections to work in a similar manner and with a high degree of interoperability.</p>
        </li>
        <li>
        <p>The framework had to extend and/or adapt a collection easily.</p>
        </li>
        </ul>
        <p>Towards this end, the entire collections framework is designed around a set of standard interfaces. Several standard implementations such as&nbsp;<strong>LinkedList, HashSet,</strong>&nbsp;and&nbsp;<strong>TreeSet</strong>, of these interfaces are provided that you may use as-is and you may also implement your own collection, if you choose.</p>
        <p>A collections framework is a unified architecture for representing and manipulating collections. All collections frameworks contain the following &minus;</p>
        <ul class="list">
        <li>
        <p><strong>Interfaces</strong>&nbsp;&minus; These are abstract data types that represent collections. Interfaces allow collections to be manipulated independently of the details of their representation. In object-oriented languages, interfaces generally form a hierarchy.</p>
        </li>
        <li>
        <p><strong>Implementations, i.e., Classes</strong>&nbsp;&minus; These are the concrete implementations of the collection interfaces. In essence, they are reusable data structures.</p>
        </li>
        <li>
        <p><strong>Algorithms</strong>&nbsp;&minus; These are the methods that perform useful computations, such as searching and sorting, on objects that implement collection interfaces. The algorithms are said to be polymorphic: that is, the same method can be used on many different implementations of the appropriate collection interface.</p>
        </li>
        </ul>
        <p>In addition to collections, the framework defines several map interfaces and classes. Maps store key/value pairs. Although maps are not&nbsp;<em>collections</em>&nbsp;in the proper use of the term, but they are fully integrated with collections.</p>
        <h2>The Collection Interfaces</h2>
        <p>The collections framework defines several interfaces. This section provides an overview of each interface &minus;</p>
        <table class="table table-bordered">
        <tbody>
        <tr>
        <th>Sr.No.</th>
        <th>Interface &amp; Description</th>
        </tr>
        <tr>
        <td class="ts">1</td>
        <td><a href="https://www.tutorialspoint.com/java/java_collection_interface.htm">The Collection Interface</a>
        <p>This enables you to work with groups of objects; it is at the top of the collections hierarchy.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">2</td>
        <td><a href="https://www.tutorialspoint.com/java/java_list_interface.htm">The List Interface</a>
        <p>This extends&nbsp;<strong>Collection</strong>&nbsp;and an instance of List stores an ordered collection of elements.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">3</td>
        <td><a href="https://www.tutorialspoint.com/java/java_set_interface.htm">The Set</a>
        <p>This extends Collection to handle sets, which must contain unique elements.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">4</td>
        <td><a href="https://www.tutorialspoint.com/java/java_sortedset_interface.htm">The SortedSet</a>
        <p>This extends Set to handle sorted sets.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">5</td>
        <td><a href="https://www.tutorialspoint.com/java/java_map_interface.htm">The Map</a>
        <p>This maps unique keys to values.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">6</td>
        <td><a href="https://www.tutorialspoint.com/java/java_mapentry_interface.htm">The Map.Entry</a>
        <p>This describes an element (a key/value pair) in a map. This is an inner class of Map.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">7</td>
        <td><a href="https://www.tutorialspoint.com/java/java_sortedmap_interface.htm">The SortedMap</a>
        <p>This extends Map so that the keys are maintained in an ascending order.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">8</td>
        <td><a href="https://www.tutorialspoint.com/java/java_enumeration_interface.htm">The Enumeration</a>
        <p>This is legacy interface defines the methods by which you can enumerate (obtain one at a time) the elements in a collection of objects. This legacy interface has been superceded by Iterator.</p>
        </td>
        </tr>
        </tbody>
        </table>
        <h2>The Collection Classes</h2>
        <p>Java provides a set of standard collection classes that implement Collection interfaces. Some of the classes provide full implementations that can be used as-is and others are abstract class, providing skeletal implementations that are used as starting points for creating concrete collections.</p>
        <p>The standard collection classes are summarized in the following table &minus;</p>
        <table class="table table-bordered">
        <tbody>
        <tr>
        <th>Sr.No.</th>
        <th>Class &amp; Description</th>
        </tr>
        <tr>
        <td class="ts">1</td>
        <td>
        <p><strong>AbstractCollection</strong></p>
        <p>Implements most of the Collection interface.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">2</td>
        <td>
        <p><strong>AbstractList</strong></p>
        <p>Extends AbstractCollection and implements most of the List interface.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">3</td>
        <td>
        <p><strong>AbstractSequentialList</strong></p>
        <p>Extends AbstractList for use by a collection that uses sequential rather than random access of its elements.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">4</td>
        <td><a href="https://www.tutorialspoint.com/java/java_linkedlist_class.htm">LinkedList</a>
        <p>Implements a linked list by extending AbstractSequentialList.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">5</td>
        <td><a href="https://www.tutorialspoint.com/java/java_arraylist_class.htm">ArrayList</a>
        <p>Implements a dynamic array by extending AbstractList.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">6</td>
        <td>
        <p><strong>AbstractSet</strong></p>
        <p>Extends AbstractCollection and implements most of the Set interface.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">7</td>
        <td><a href="https://www.tutorialspoint.com/java/java_hashset_class.htm">HashSet</a>
        <p>Extends AbstractSet for use with a hash table.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">8</td>
        <td><a href="https://www.tutorialspoint.com/java/java_linkedhashset_class.htm">LinkedHashSet</a>
        <p>Extends HashSet to allow insertion-order iterations.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">9</td>
        <td><a href="https://www.tutorialspoint.com/java/java_treeset_class.htm">TreeSet</a>
        <p>Implements a set stored in a tree. Extends AbstractSet.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">10</td>
        <td>
        <p><strong>AbstractMap</strong></p>
        <p>Implements most of the Map interface.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">11</td>
        <td><a href="https://www.tutorialspoint.com/java/java_hashmap_class.htm">HashMap</a>
        <p>Extends AbstractMap to use a hash table.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">12</td>
        <td><a href="https://www.tutorialspoint.com/java/java_treemap_class.htm">TreeMap</a>
        <p>Extends AbstractMap to use a tree.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">13</td>
        <td><a href="https://www.tutorialspoint.com/java/java_weakhashmap_class.htm">WeakHashMap</a>
        <p>Extends AbstractMap to use a hash table with weak keys.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">14</td>
        <td><a href="https://www.tutorialspoint.com/java/java_linkedhashmap_class.htm">LinkedHashMap</a>
        <p>Extends HashMap to allow insertion-order iterations.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">15</td>
        <td><a href="https://www.tutorialspoint.com/java/java_identityhashmap_class.htm">IdentityHashMap</a>
        <p>Extends AbstractMap and uses reference equality when comparing documents.</p>
        </td>
        </tr>
        </tbody>
        </table>
        <p>The&nbsp;<em>AbstractCollection, AbstractSet, AbstractList, AbstractSequentialList</em>&nbsp;and&nbsp;<em>AbstractMap</em>&nbsp;classes provide skeletal implementations of the core collection interfaces, to minimize the effort required to implement them.</p>
        <p>The following legacy classes defined by java.util have been discussed in the previous chapter &minus;</p>
        <table class="table table-bordered">
        <tbody>
        <tr>
        <th>Sr.No.</th>
        <th>Class &amp; Description</th>
        </tr>
        <tr>
        <td class="ts">1</td>
        <td><a href="https://www.tutorialspoint.com/java/java_vector_class.htm">Vector</a>
        <p>This implements a dynamic array. It is similar to ArrayList, but with some differences.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">2</td>
        <td><a href="https://www.tutorialspoint.com/java/java_stack_class.htm">Stack</a>
        <p>Stack is a subclass of Vector that implements a standard last-in, first-out stack.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">3</td>
        <td><a href="https://www.tutorialspoint.com/java/java_dictionary_class.htm">Dictionary</a>
        <p>Dictionary is an abstract class that represents a key/value storage repository and operates much like Map.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">4</td>
        <td><a href="https://www.tutorialspoint.com/java/java_hashtable_class.htm">Hashtable</a>
        <p>Hashtable was part of the original java.util and is a concrete implementation of a Dictionary.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">5</td>
        <td><a href="https://www.tutorialspoint.com/java/java_properties_class.htm">Properties</a>
        <p>Properties is a subclass of Hashtable. It is used to maintain lists of values in which the key is a String and the value is also a String.</p>
        </td>
        </tr>
        <tr>
        <td class="ts">6</td>
        <td><a href="https://www.tutorialspoint.com/java/java_bitset_class.htm">BitSet</a>
        <p>A BitSet class creates a special type of array that holds bit values. This array can increase in size as needed.</p>
        </td>
        </tr>
        </tbody>
        </table>
        <h2>The Collection Algorithms</h2>
        <p>The collections framework defines several algorithms that can be applied to collections and maps. These algorithms are defined as static methods within the Collections class.</p>
        <p>Several of the methods can throw a&nbsp;<strong>ClassCastException</strong>, which occurs when an attempt is made to compare incompatible types, or an&nbsp;<strong>UnsupportedOperationException</strong>, which occurs when an attempt is made to modify an unmodifiable collection.</p>
        <p>Collections define three static variables: EMPTY_SET, EMPTY_LIST, and EMPTY_MAP. All are immutable.</p>
        <table class="table table-bordered">
        <tbody>
        <tr>
        <th>Sr.No.</th>
        <th>Algorithm &amp; Description</th>
        </tr>
        <tr>
        <td class="ts">1</td>
        <td><a href="https://www.tutorialspoint.com/java/java_collection_algorithms.htm">The Collection Algorithms</a>
        <p>Here is a list of all the algorithm implementation.</p>
        </td>
        </tr>
        </tbody>
        </table>
        <h2>How to Use an Iterator ?</h2>
        <p>Often, you will want to cycle through the elements in a collection. For example, you might want to display each element.</p>
        <p>The easiest way to do this is to employ an iterator, which is an object that implements either the Iterator or the ListIterator interface.</p>
        <p>Iterator enables you to cycle through a collection, obtaining or removing elements. ListIterator extends Iterator to allow bidirectional traversal of a list and the modification of elements.</p>
        <table class="table table-bordered">
        <tbody>
        <tr>
        <th>Sr.No.</th>
        <th>Iterator Method &amp; Description</th>
        </tr>
        <tr>
        <td class="ts">1</td>
        <td><a href="https://www.tutorialspoint.com/java/java_using_iterator.htm">Using Java Iterator</a>
        <p>Here is a list of all the methods with examples provided by Iterator and ListIterator interfaces.</p>
        </td>
        </tr>
        </tbody>
        </table>`,
    },
    {
        topic: " Multi-threading in Java",
        content: `<h1>Multithreading in Java</h1>
        <p>Multithreading is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of CPU. Each part of such program is called a thread. So, threads are light-weight processes within a process.</p>
        <p>Threads can be created by using two mechanisms :&nbsp;</p>
        <ol>
        <li>Extending the Thread class&nbsp;</li>
        <li>Implementing the Runnable Interface</li>
        </ol>
        <p><strong>Thread creation by extending the Thread class</strong><br />We create a class that extends the&nbsp;<strong>java.lang.Thread</strong>&nbsp;class. This class overrides the run() method available in the Thread class. A thread begins its life inside run() method. We create an object of our new class and call start() method to start the execution of a thread. Start() invokes the run() method on the Thread object.</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_410071" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java code for thread creation by extending</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// the Thread class</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">MultithreadingDemo </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Displaying the thread that is running</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Thread "</code> <code class="plain">+ Thread.currentThread().getId()</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">" is running"</code><code class="plain">);</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception e) {</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Throwing an exception</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Exception is caught"</code><code class="plain">);</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="plain">}</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="comments">// Main Class</code></div>
        <div class="line number20 index19 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Multithread {</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = </code><code class="value">8</code><code class="plain">; </code><code class="comments">// Number of threads</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">MultithreadingDemo object</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= </code><code class="keyword">new</code> <code class="plain">MultithreadingDemo();</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">object.start();</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number30 index29 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Thread 15 is running
        Thread 14 is running
        Thread 16 is running
        Thread 12 is running
        Thread 11 is running
        Thread 13 is running
        Thread 18 is running
        Thread 17 is running
        </pre>
        </div>
        <p><strong>Thread creation by implementing the Runnable Interface</strong><br />We create a new class which implements java.lang.Runnable interface and override run() method. Then we instantiate a Thread object and call start() method on this object.&nbsp;<br />&nbsp;</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_223134" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java code for thread creation by implementing</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// the Runnable Interface</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">MultithreadingDemo </code><code class="keyword">implements</code> <code class="plain">Runnable {</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Displaying the thread that is running</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Thread "</code> <code class="plain">+ Thread.currentThread().getId()</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">" is running"</code><code class="plain">);</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception e) {</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Throwing an exception</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Exception is caught"</code><code class="plain">);</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="plain">}</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="comments">// Main Class</code></div>
        <div class="line number20 index19 alt1"><code class="keyword">class</code> <code class="plain">Multithread {</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">int</code> <code class="plain">n = </code><code class="value">8</code><code class="plain">; </code><code class="comments">// Number of threads</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; n; i++) {</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread object</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= </code><code class="keyword">new</code> <code class="plain">Thread(</code><code class="keyword">new</code> <code class="plain">MultithreadingDemo());</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">object.start();</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number30 index29 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Thread 13 is running
        Thread 11 is running
        Thread 12 is running
        Thread 15 is running
        Thread 14 is running
        Thread 18 is running
        Thread 17 is running
        Thread 16 is running
        </pre>
        </div>
        <p><strong>Thread Class vs Runnable Interface</strong>&nbsp;</p>
        <ol>
        <li>If we extend the Thread class, our class cannot extend any other class because Java doesn&rsquo;t support multiple inheritance. But, if we implement the Runnable interface, our class can still extend other base classes.</li>
        <li>We can achieve basic functionality of a thread by extending Thread class because it provides some inbuilt methods like yield(), interrupt() etc. that are not available in Runnable interface.</li>
        <li>Using runnable will give you an object that can be shared amongst multiple threads.&nbsp;</li>
        </ol>
        <h1>Lifecycle and States of a Thread in Java</h1>
        <p>A&nbsp;<a href="https://www.geeksforgeeks.org/multithreading-in-java/">thread</a>&nbsp;in Java at any point of time exists in any one of the following states. A thread lies only in one of the shown states at any instant:&nbsp;</p>
        <ol>
        <li>New</li>
        <li>Runnable</li>
        <li>Blocked</li>
        <li>Waiting</li>
        <li>Timed Waiting</li>
        <li>Terminated</li>
        </ol>
        <p>The diagram shown below represents various states of a thread at any instant in time.</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/threadLifeCycle.jpg" alt="" /></p>
        <h4>Life Cycle of a thread</h4>
        <ol>
        <li><strong>New Thread:</strong>&nbsp;When a new thread is created, it is in the new state. The thread has not yet started to run when the thread is in this state. When a thread lies in the new state, its code is yet to be run and hasn&rsquo;t started to execute.</li>
        <li><strong>Runnable State:</strong>&nbsp;A thread that is ready to run is moved to a runnable state. In this state, a thread might actually be running or it might be ready to run at any instant of time. It is the responsibility of the thread scheduler to give the thread, time to run.&nbsp;<br />A multi-threaded program allocates a fixed amount of time to each individual thread. Each and every thread runs for a short while and then pauses and relinquishes the CPU to another thread so that other threads can get a chance to run. When this happens, all such threads that are ready to run, waiting for the CPU and the currently running thread lie in a runnable state.</li>
        <li><strong>Blocked/Waiting state:</strong>&nbsp;When a thread is temporarily inactive, then it&rsquo;s in one of the following states:&nbsp;
        <ul>
        <li>Blocked</li>
        <li>Waiting</li>
        </ul>
        </li>
        <li><strong>Timed Waiting:</strong>&nbsp;A thread lies in a timed waiting state when it calls a method with a time-out parameter. A thread lies in this state until the timeout is completed or until a notification is received. For example, when a thread calls sleep or a conditional wait, it is moved to a timed waiting state.</li>
        <li><strong>Terminated State:</strong>&nbsp;A thread terminates because of either of the following reasons:&nbsp;
        <ul>
        <li>Because it exits normally. This happens when the code of the thread has been entirely executed by the program.</li>
        <li>Because there occurred some unusual erroneous event, like segmentation fault or an unhandled exception.</li>
        </ul>
        </li>
        </ol>
        <h3>Implementing the Thread States in Java</h3>
        <p>In Java, to get the current state of the thread, use&nbsp;<strong>Thread.getState()</strong>&nbsp;method to get the current state of the thread. Java provides&nbsp;<strong>java.lang.Thread.State</strong>&nbsp;class that defines the ENUM constants for the state of a thread, as a summary of which is given below:&nbsp;</p>
        <h4>1. New&nbsp;</h4>
        <pre>Declaration: public static final Thread.State NEW</pre>
        <p><strong>Description:&nbsp;</strong>Thread state for a thread that has not yet started.&nbsp;</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <h4>2. Runnable&nbsp;</h4>
        <pre>Declaration: public static final Thread.State RUNNABLE</pre>
        <p><strong>Description:&nbsp;</strong>Thread state for a runnable thread. A thread in the runnable state is executing in the Java virtual machine but it may be waiting for other resources from the operating system such as a processor.&nbsp;</p>
        <h4>3. Blocked&nbsp;</h4>
        <pre>Declaration: public static final Thread.State BLOCKED</pre>
        <p><strong>Description:&nbsp;</strong>Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait().&nbsp;</p>
        <h4>4. Waiting&nbsp;</h4>
        <pre>Declaration: public static final Thread.State WAITING</pre>
        <p><strong>Description:&nbsp;</strong>Thread state for a waiting thread. Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:&nbsp;</p>
        <ul>
        <li>Object.wait with no timeout</li>
        <li><a href="https://www.geeksforgeeks.org/joining-threads-in-java/">Thread.join</a>&nbsp;with no timeout</li>
        <li>LockSupport.park</li>
        </ul>
        <h4>5. Timed Waiting&nbsp;</h4>
        <pre>Declaration: public static final Thread.State TIMED_WAITING</pre>
        <p><strong>Description:&nbsp;</strong>Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of the following methods with a specified positive waiting time:&nbsp;</p>
        <ul>
        <li>Thread.sleep</li>
        <li>Object.wait with timeout</li>
        <li>Thread.join with timeout</li>
        <li>LockSupport.parkNanos</li>
        <li>LockSupport.parkUntil</li>
        </ul>
        <h4>6. Terminated&nbsp;</h4>
        <pre>Declaration: public static final Thread.State TERMINATED</pre>
        <p><strong>Description:&nbsp;</strong>Thread state for a terminated thread. The thread has completed execution.&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_669391" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate thread states</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">class</code> <code class="plain">thread </code><code class="keyword">implements</code> <code class="plain">Runnable {</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// moving thread2 to timed waiting state</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">1500</code><code class="plain">);</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(InterruptedException e) {</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">e.printStackTrace();</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number12 index11 alt1">&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"State of thread1 while it called join() method on thread2 -"</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ Test.thread1.getState());</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">200</code><code class="plain">);</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(InterruptedException e) {</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">e.printStackTrace();</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2"><code class="plain">}</code></div>
        <div class="line number24 index23 alt1">&nbsp;</div>
        <div class="line number25 index24 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Test </code><code class="keyword">implements</code> <code class="plain">Runnable {</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="plain">Thread thread1;</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="plain">Test obj;</code></div>
        <div class="line number28 index27 alt1">&nbsp;</div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">obj = </code><code class="keyword">new</code> <code class="plain">Test();</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">thread1 = </code><code class="keyword">new</code> <code class="plain">Thread(obj);</code></div>
        <div class="line number33 index32 alt2">&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// thread1 created and is currently in the NEW</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// state.</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"State of thread1 after creating it - "</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ thread1.getState());</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">thread1.start();</code></div>
        <div class="line number40 index39 alt1">&nbsp;</div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// thread1 moved to Runnable state</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"State of thread1 after calling .start() method on it - "</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ thread1.getState());</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number46 index45 alt1">&nbsp;</div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">thread myThread = </code><code class="keyword">new</code> <code class="plain">thread();</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread thread2 = </code><code class="keyword">new</code> <code class="plain">Thread(myThread);</code></div>
        <div class="line number51 index50 alt2">&nbsp;</div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// thread1 created and is currently in the NEW</code></div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// state.</code></div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"State of thread2 after creating it - "</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ thread2.getState());</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">thread2.start();</code></div>
        <div class="line number58 index57 alt1">&nbsp;</div>
        <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// thread2 moved to Runnable state</code></div>
        <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"State of thread2 after calling .start() method on it - "</code></div>
        <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ thread2.getState());</code></div>
        <div class="line number63 index62 alt2">&nbsp;</div>
        <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// moving thread1 to timed waiting state</code></div>
        <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// moving thread1 to timed waiting state</code></div>
        <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">200</code><code class="plain">);</code></div>
        <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(InterruptedException e) {</code></div>
        <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">e.printStackTrace();</code></div>
        <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"State of thread2 after calling .sleep() method on it - "</code></div>
        <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ thread2.getState());</code></div>
        <div class="line number75 index74 alt2">&nbsp;</div>
        <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// waiting for thread2 to die</code></div>
        <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">thread2.join();</code></div>
        <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(InterruptedException e) {</code></div>
        <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">e.printStackTrace();</code></div>
        <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"State of thread2 when it has finished it's execution - "</code></div>
        <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ thread2.getState());</code></div>
        <div class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number87 index86 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>State of thread1 after creating it - NEW
        State of thread1 after calling .start() method on it - RUNNABLE
        State of thread2 after creating it - NEW
        State of thread2 after calling .start() method on it - RUNNABLE
        State of thread2 after calling .sleep() method on it - TIMED_WAITING
        State of thread1 while it called join() method on thread2 -WAITING
        State of thread2 when it has finished it's execution - TERMINATED</pre>
        </div>
        <p><strong>Explanation:&nbsp;</strong>When a new thread is created, the thread is in the NEW state. When the start() method is called on a thread, the thread scheduler moves it to Runnable state. Whenever the join() method is called on a thread instance, the current thread executing that statement will wait for this thread to move to the Terminated state. So, before the final statement is printed on the console, the program calls join() on thread2 making the thread1 wait while thread2 completes its execution and is moved to the Terminated state. thread1 goes to Waiting state because it is waiting for thread2 to complete its execution as it has called join on thread2.</p>
        <h1>Main thread in Java</h1>
        <p>Java provides built-in support for multithreaded programming. A multi-threaded program contains two or more parts that can run concurrently. Each part of such a program is called a thread, and each thread defines a separate path of execution.<br />When a Java program starts up, one thread begins running immediately. This is usually called the&nbsp;<em>main</em>&nbsp;thread of our program because it is the one that is executed when our program begins.&nbsp;</p>
        <p>There are certain properties associated with the main thread which are as follows:</p>
        <ul>
        <li>It is the thread from which other &ldquo;child&rdquo; threads will be spawned.</li>
        <li>Often, it must be the last thread to finish execution because it performs various shutdown actions</li>
        </ul>
        <p>The flow diagram is as follows:</p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/main-thread-in-java.jpeg" alt="main thread in java" /></p>
        <p><strong>How to control Main thread</strong></p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p>The main thread is created automatically when our program is started. To control it we must obtain a reference to it. This can be done by calling the method&nbsp;<em>currentThread( )</em>&nbsp;which is present in Thread class. This method returns a reference to the thread on which it is called. The default priority of Main thread is 5 and for all remaining user threads priority will be inherited from parent to child.</p>
        <p><strong>Example</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_131371" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to control the Main Thread</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="comments">// Importing required classes</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// Class 1</code></div>
        <div class="line number8 index7 alt1"><code class="comments">// Main class extending thread class</code></div>
        <div class="line number9 index8 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Test </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number10 index9 alt1">&nbsp;</div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number14 index13 alt1">&nbsp;</div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Getting reference to Main thread</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread t = Thread.currentThread();</code></div>
        <div class="line number17 index16 alt2">&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Getting name of Main thread</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Current thread: "</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ t.getName());</code></div>
        <div class="line number21 index20 alt2">&nbsp;</div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Changing the name of Main thread</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t.setName(</code><code class="string">"Geeks"</code><code class="plain">);</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"After name change: "</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ t.getName());</code></div>
        <div class="line number26 index25 alt1">&nbsp;</div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Getting priority of Main thread</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Main thread priority: "</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ t.getPriority());</code></div>
        <div class="line number30 index29 alt1">&nbsp;</div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Setting priority of Main thread to MAX(10)</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t.setPriority(MAX_PRIORITY);</code></div>
        <div class="line number33 index32 alt2">&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print and display the main thread priority</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Main thread new priority: "</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ t.getPriority());</code></div>
        <div class="line number37 index36 alt2">&nbsp;</div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; </code><code class="value">5</code><code class="plain">; i++) {</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Main thread"</code><code class="plain">);</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number41 index40 alt2">&nbsp;</div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main thread creating a child thread</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread ct = </code><code class="keyword">new</code> <code class="plain">Thread() {</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// run() method of a thread</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number47 index46 alt2">&nbsp;</div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; </code><code class="value">5</code><code class="plain">; i++) {</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Child thread"</code><code class="plain">);</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">};</code></div>
        <div class="line number53 index52 alt2">&nbsp;</div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Getting priority of child thread</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// which will be inherited from Main thread</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// as it is created by Main thread</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Child thread priority: "</code></div>
        <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ ct.getPriority());</code></div>
        <div class="line number59 index58 alt2">&nbsp;</div>
        <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Setting priority of Main thread to MIN(1)</code></div>
        <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ct.setPriority(MIN_PRIORITY);</code></div>
        <div class="line number62 index61 alt1">&nbsp;</div>
        <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Child thread new priority: "</code></div>
        <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ ct.getPriority());</code></div>
        <div class="line number65 index64 alt2">&nbsp;</div>
        <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Starting child thread</code></div>
        <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ct.start();</code></div>
        <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number69 index68 alt2"><code class="plain">}</code></div>
        <div class="line number70 index69 alt1">&nbsp;</div>
        <div class="line number71 index70 alt2"><code class="comments">// Class 2</code></div>
        <div class="line number72 index71 alt1"><code class="comments">// Helper class extending Thread class</code></div>
        <div class="line number73 index72 alt2"><code class="comments">// Child Thread class</code></div>
        <div class="line number74 index73 alt1"><code class="keyword">class</code> <code class="plain">ChildThread </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number75 index74 alt2">&nbsp;</div>
        <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1">@Override</code> <code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number78 index77 alt1">&nbsp;</div>
        <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; </code><code class="value">5</code><code class="plain">; i++) {</code></div>
        <div class="line number80 index79 alt1">&nbsp;</div>
        <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement whenever child thread is</code></div>
        <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// called</code></div>
        <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Child thread"</code><code class="plain">);</code></div>
        <div class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number86 index85 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>Current thread: main
        After name change: Geeks
        Main thread priority: 5
        Main thread new priority: 10
        Main thread
        Main thread
        Main thread
        Main thread
        Main thread
        Child thread priority: 10
        Child thread new priority: 1
        Child thread
        Child thread
        Child thread
        Child thread
        Child thread</pre>
        </div>
        <p>Now let us discuss the relationship between the main() method and the main thread in Java.<strong>&nbsp;</strong>For each program, a Main thread is created by&nbsp;<a href="https://www.geeksforgeeks.org/jvm-works-jvm-architecture/">JVM</a>(Java Virtual Machine). The &ldquo;Main&rdquo; thread first verifies the existence of the main() method, and then it initializes the class. Note that from JDK 6, main() method is mandatory in a standalone java application.</p>
        <p><strong>Deadlocking with use of Main Thread(only single thread)</strong></p>
        <p>We can create a deadlock by just using the Main thread, i.e. by just using a single thread.</p>
        <p><strong>Example</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_235673" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate deadlock</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// using Main thread</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Main class</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">GFG {</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args) {</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Try block to check for exceptions</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number12 index11 alt1">&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Entering into Deadlock"</code><code class="plain">);</code></div>
        <div class="line number15 index14 alt2">&nbsp;</div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Joining the current thread</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.currentThread().join();</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This statement will never execute</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"This statement will never execute"</code><code class="plain">);</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number22 index21 alt1">&nbsp;</div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Catch block to handle the exceptions</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(InterruptedException e) {</code></div>
        <div class="line number25 index24 alt2">&nbsp;</div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Display the exception along with line number</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// using printStackTrace() method</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">e.printStackTrace();</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number31 index30 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:&nbsp;</strong></p>
        <p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20210729044716/Screenshot20210729at44645AM.png" alt="" /></p>
        <p>Output explanation:&nbsp;<br />The statement &ldquo;Thread.currentThread().join()&rdquo;, will tell Main thread to wait for this thread(i.e. wait for itself) to die. Thus Main thread wait for itself to die, which is nothing but a deadlock.</p>
        <h1>Java Thread Priority in Multithreading</h1>
        <p>As we already know java being completely object-oriented works within a&nbsp;<a href="https://www.geeksforgeeks.org/multithreading-in-java/">multithreading environment&nbsp;</a>in which&nbsp;<a href="https://www.geeksforgeeks.org/thread-scheduling/">thread scheduler</a>&nbsp;assigns the processor to a thread based on the priority of thread. Whenever we create a thread in Java, it always has some priority assigned to it. Priority can either be given by JVM while creating the thread or it can be given by the programmer explicitly.&nbsp;</p>
        <p><a href="https://www.geeksforgeeks.org/java-thread-priority-multithreading/"><strong><u>Priorities in threads</u></strong></a>&nbsp;is a concept where each thread is having a priority which in layman&rsquo;s language one can say every object is having priority here which is represented by numbers ranging from 1 to 10.&nbsp;</p>
        <ul>
        <li>The default priority is set to 5 as excepted.</li>
        <li>Minimum priority is set to 1.</li>
        <li>Maximum priority is set to 10.</li>
        </ul>
        <p>Here 3 constants are defined in it namely as follows:</p>
        <ol>
        <li>public static int NORM_PRIORITY</li>
        <li>public static int MIN_PRIORITY</li>
        <li>public static int MAX_PRIORITY</li>
        </ol>
        <p>Let us discuss it with an example to get how internally the work is getting executed. Here we will be using the knowledge gathered above as follows:</p>
        <ul>
        <li>We will use&nbsp;<a href="https://www.geeksforgeeks.org/naming-thread-fetching-name-current-thread-java/"><em><u>currentThread()</u></em></a>&nbsp;method to get the name of the current thread. User can also use&nbsp;<a href="https://www.geeksforgeeks.org/naming-thread-fetching-name-current-thread-java/"><em><u>setName()</u></em></a>&nbsp;method if he/she wants to make names of thread as per choice for understanding purposes.</li>
        <li><a href="https://www.geeksforgeeks.org/method-class-getname-method-in-java/"><em><u>getName()</u></em><u>&nbsp;method&nbsp;</u></a>will be used to get the name of the thread.</li>
        </ul>
        <blockquote>
        <p>The accepted value of priority for a thread is in the range of 1 to 10.&nbsp;</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        </blockquote>
        <p>Let us do discuss how to get and set priority of a thread in java.&nbsp;</p>
        <ol>
        <li><strong>public final int getPriority():</strong>&nbsp;java.lang.Thread.getPriority() method returns priority of given thread.</li>
        <li><strong>public final void setPriority(int newPriority):</strong>&nbsp;java.lang.Thread.setPriority() method changes the priority of thread to the value newPriority. This method throws IllegalArgumentException if value of parameter newPriority goes beyond minimum(1) and maximum(10) limit.</li>
        </ol>
        <p><strong>Example&nbsp;</strong></p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_328981" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program to Illustrate Priorities in Multithreading</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// via help of getPriority() and setPriority() method</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing required classes</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.lang.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// Main class</code></div>
        <div class="line number8 index7 alt1"><code class="keyword">class</code> <code class="plain">ThreadDemo </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 1</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// run() method for the thread that is called</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// as soon as start() is invoked for thread in main()</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Inside run method"</code><code class="plain">);</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating random threads</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// with the help of above class</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ThreadDemo t1 = </code><code class="keyword">new</code> <code class="plain">ThreadDemo();</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ThreadDemo t2 = </code><code class="keyword">new</code> <code class="plain">ThreadDemo();</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ThreadDemo t3 = </code><code class="keyword">new</code> <code class="plain">ThreadDemo();</code></div>
        <div class="line number27 index26 alt2">&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Thread 1</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Display the priority of above thread</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// using getPriority() method</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"t1 thread priority : "</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ t1.getPriority());</code></div>
        <div class="line number33 index32 alt2">&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Thread 1</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Display the priority of above thread</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"t2 thread priority : "</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ t2.getPriority());</code></div>
        <div class="line number38 index37 alt1">&nbsp;</div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Thread 3</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"t3 thread priority : "</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ t3.getPriority());</code></div>
        <div class="line number42 index41 alt1">&nbsp;</div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Setting priorities of above threads by</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// passing integer arguments</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t1.setPriority(</code><code class="value">2</code><code class="plain">);</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t2.setPriority(</code><code class="value">5</code><code class="plain">);</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t3.setPriority(</code><code class="value">8</code><code class="plain">);</code></div>
        <div class="line number48 index47 alt1">&nbsp;</div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// t3.setPriority(21); will throw</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// IllegalArgumentException</code></div>
        <div class="line number51 index50 alt2">&nbsp;</div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 2</code></div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"t1 thread priority : "</code></div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ t1.getPriority());</code></div>
        <div class="line number55 index54 alt2">&nbsp;</div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 5</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"t2 thread priority : "</code></div>
        <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ t2.getPriority());</code></div>
        <div class="line number59 index58 alt2">&nbsp;</div>
        <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 8</code></div>
        <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"t3 thread priority : "</code></div>
        <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ t3.getPriority());</code></div>
        <div class="line number63 index62 alt2">&nbsp;</div>
        <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main thread</code></div>
        <div class="line number65 index64 alt2">&nbsp;</div>
        <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Displays the name of</code></div>
        <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// currently executing Thread</code></div>
        <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Currently Executing Thread : "</code></div>
        <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ Thread.currentThread().getName());</code></div>
        <div class="line number71 index70 alt2">&nbsp;</div>
        <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Main thread priority : "</code></div>
        <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ Thread.currentThread().getPriority());</code></div>
        <div class="line number75 index74 alt2">&nbsp;</div>
        <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main thread priority is set to 10</code></div>
        <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.currentThread().setPriority(</code><code class="value">10</code><code class="plain">);</code></div>
        <div class="line number78 index77 alt1">&nbsp;</div>
        <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"Main thread priority : "</code></div>
        <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ Thread.currentThread().getPriority());</code></div>
        <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number83 index82 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>t1 thread priority : 5
        t2 thread priority : 5
        t3 thread priority : 5
        t1 thread priority : 2
        t2 thread priority : 5
        t3 thread priority : 8
        Currently Executing Thread : main
        Main thread priority : 5
        Main thread priority : 10</pre>
        </div>
        <p>&nbsp;Output explanation:</p>
        <ul>
        <li>Thread with the highest priority will get an execution chance prior to other threads. Suppose there are 3 threads t1, t2, and t3 with priorities 4, 6, and 1. So, thread t2 will execute first based on maximum priority 6 after that t1 will execute and then t3.</li>
        <li>The default priority for the main thread is always 5, it can be changed later. The default priority for all other threads depends on the priority of the parent thread.</li>
        </ul>
        <p>Now geeks you must be wondering out what if we do assign the same priorities to threads than what will happen. All the processing in order to look after threads is carried with help of the thread scheduler. One can refer to the below example of what will happen if the priorities are set to the same and later onwards we will discuss it as an output explanation to have a better understanding conceptually and practically.</p>
        <p><strong>Example</strong>&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_375074" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to demonstrate that a Child thread</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Getting Same Priority as Parent thread</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Importing all classes from java.lang package</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.lang.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// Main class</code></div>
        <div class="line number8 index7 alt1"><code class="comments">// ThreadDemo</code></div>
        <div class="line number9 index8 alt2"><code class="comments">// Extending Thread class</code></div>
        <div class="line number10 index9 alt1"><code class="keyword">class</code> <code class="plain">GFG </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number11 index10 alt2">&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 1</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// run() method for the thread that is</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// invoked as threads are started</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print statement</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Inside run method"</code><code class="plain">);</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 2</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// main thread priority is set to 6 now</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.currentThread().setPriority(</code><code class="value">6</code><code class="plain">);</code></div>
        <div class="line number27 index26 alt2">&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Current thread is accessed</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// using currentThread() method</code></div>
        <div class="line number30 index29 alt1">&nbsp;</div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print and display main thread priority</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// using getPriority() method of Thread class</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"main thread priority : "</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ Thread.currentThread().getPriority());</code></div>
        <div class="line number36 index35 alt1">&nbsp;</div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating a thread by creating object inside</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// main()</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">GFG t1 = </code><code class="keyword">new</code> <code class="plain">GFG();</code></div>
        <div class="line number40 index39 alt1">&nbsp;</div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// t1 thread is child of main thread</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// so t1 thread will also have priority 6</code></div>
        <div class="line number43 index42 alt2">&nbsp;</div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print and display priority of current thread</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"t1 thread priority : "</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ t1.getPriority());</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number48 index47 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="code-output"><strong>Output</strong>
        <pre>main thread priority : 6
        t1 thread priority : 6</pre>
        </div>
        <p>&nbsp;Output explanation:</p>
        <ul>
        <li>If two threads have the same priority then we can&rsquo;t expect which thread will execute first. It depends on the thread scheduler&rsquo;s algorithm(Round-Robin, First Come First Serve, etc)</li>
        <li>If we are using thread priority for thread scheduling then we should always keep in mind that the underlying platform should provide support for scheduling based on thread priority.</li>
        </ul>
        <h1>Synchronization in Java</h1>
        <p><a href="https://www.geeksforgeeks.org/multithreading-in-java/">Multi-threaded&nbsp;</a>programs may often come to a situation where multiple threads try to access the same resources and finally produce erroneous and unforeseen results.&nbsp;</p>
        <p>So it needs to be made sure by some synchronization method that only one thread can access the resource at a given point in time. Java provides a way of creating threads and synchronizing their tasks using synchronized blocks. Synchronized blocks in Java are marked with the synchronized keyword. A synchronized block in Java is synchronized on some object. All synchronized blocks synchronize on the same object can only have one thread executing inside them at a time. All other threads attempting to enter the synchronized block are blocked until the thread inside the synchronized block exits the block.</p>
        <p>Following is the general form of a synchronized block:&nbsp;</p>
        <pre>// Only one thread can execute at a time. 
        // sync_object is a reference to an object
        // whose lock associates with the <a href="https://www.geeksforgeeks.org/monitors-in-process-synchronization/">monitor</a>. 
        // The code is said to be synchronized on
        // the monitor object
        synchronized(sync_object)
        {
           // Access shared variables and other
           // shared resources
        }</pre>
        <p>This synchronization is implemented in Java with a concept called monitors. Only one thread can own a monitor at a given time. When a thread acquires a lock, it is said to have entered the monitor. All other threads attempting to enter the locked monitor will be suspended until the first thread exits the monitor.</p>
        <p>Following is an example of multi-threading with synchronized.</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_390581" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// A Java program to demonstrate working of</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// synchronized.</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number5 index4 alt2"><code class="keyword">import</code> <code class="plain">java.util.*;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="comments">// A Class used to send a message</code></div>
        <div class="line number8 index7 alt1"><code class="keyword">class</code> <code class="plain">Sender</code></div>
        <div class="line number9 index8 alt2"><code class="plain">{</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">send(String msg)</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Sending\t"</code>&nbsp; <code class="plain">+ msg );</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">1000</code><code class="plain">);</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception e)</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Thread&nbsp; interrupted."</code><code class="plain">);</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"\n"</code> <code class="plain">+ msg + </code><code class="string">"Sent"</code><code class="plain">);</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2"><code class="plain">}</code></div>
        <div class="line number24 index23 alt1">&nbsp;</div>
        <div class="line number25 index24 alt2"><code class="comments">// Class for send a message using Threads</code></div>
        <div class="line number26 index25 alt1"><code class="keyword">class</code> <code class="plain">ThreadedSend </code><code class="keyword">extends</code> <code class="plain">Thread</code></div>
        <div class="line number27 index26 alt2"><code class="plain">{</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">private</code> <code class="plain">String msg;</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Sender&nbsp; sender;</code></div>
        <div class="line number30 index29 alt1">&nbsp;</div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Receives a message object and a string</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// message to be sent</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ThreadedSend(String m,&nbsp; Sender obj)</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">msg = m;</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">sender = obj;</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number38 index37 alt1">&nbsp;</div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Only one thread can send a message</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// at a time.</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">synchronized</code><code class="plain">(sender)</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// synchronizing the send object</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">sender.send(msg);</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number49 index48 alt2"><code class="plain">}</code></div>
        <div class="line number50 index49 alt1">&nbsp;</div>
        <div class="line number51 index50 alt2"><code class="comments">// Driver class</code></div>
        <div class="line number52 index51 alt1"><code class="keyword">class</code> <code class="plain">SyncDemo</code></div>
        <div class="line number53 index52 alt2"><code class="plain">{</code></div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String args[])</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Sender send = </code><code class="keyword">new</code> <code class="plain">Sender();</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ThreadedSend S1 =</code></div>
        <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">ThreadedSend( </code><code class="string">" Hi "</code> <code class="plain">, send );</code></div>
        <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">ThreadedSend S2 =</code></div>
        <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">ThreadedSend( </code><code class="string">" Bye "</code> <code class="plain">, send );</code></div>
        <div class="line number61 index60 alt2">&nbsp;</div>
        <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Start two threads of ThreadedSend type</code></div>
        <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">S1.start();</code></div>
        <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">S2.start();</code></div>
        <div class="line number65 index64 alt2">&nbsp;</div>
        <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// wait for threads to end</code></div>
        <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code></div>
        <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">S1.join();</code></div>
        <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">S2.join();</code></div>
        <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code><code class="plain">(Exception e)</code></div>
        <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Interrupted"</code><code class="plain">);</code></div>
        <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number77 index76 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p>&nbsp;<br />&nbsp;</p>
        <div class="code-output"><strong>Output</strong>
        <pre>Sending     Hi 
        
         Hi Sent
        Sending     Bye 
        
         Bye Sent</pre>
        </div>
        <p>&nbsp;</p>
        <p>The output is the same every time we run the program.</p>
        <p>&nbsp;</p>
        <p>In the above example, we choose to synchronize the Sender object inside the run() method of the ThreadedSend class. Alternately, we could define the&nbsp;<strong>whole send() block as synchronized</strong>,<strong>&nbsp;</strong>producing the same result. Then we don&rsquo;t have to synchronize the Message object inside the run() method in ThreadedSend class.&nbsp;</p>
        <p>&nbsp;</p>
        <pre>// An alternate implementation to demonstrate
        // that we can use synchronized with method also.
        
        class Sender {
           public synchronized void send(String msg)
           {
               System.out.println("Sending\t" + msg);
               try {
                   Thread.sleep(1000);
               }
               catch (Exception e) {
                   System.out.println("Thread interrupted.");
               }
               System.out.println("\n" + msg + "Sent");
           }
        }</pre>
        <p>We do not always have to synchronize a whole method. Sometimes it is preferable to&nbsp;<strong>synchronize only part of a method</strong>. Java synchronized blocks inside methods make this possible.</p>
        <p>&nbsp;</p>
        <pre>// One more alternate implementation to demonstrate
        // that synchronized can be used with only a part of  
        // method
        
        class Sender  
        {
           public void send(String msg)
           {
               synchronized(this)
               {
                   System.out.println("Sending\t" + msg );
                   try  
                   {
                       Thread.sleep(1000);
                   }  
                   catch (Exception e)  
                   {
                       System.out.println("Thread interrupted.");
                   }
                   System.out.println("\n" + msg + "Sent");
               }
           }
        }</pre>
        <h1>Method and Block Synchronization in Java</h1>
        <p>Threads communicate primarily by sharing access to fields and the objects reference fields refer to. This form of communication is extremely efficient, but makes two kinds of errors possible: thread interference and memory consistency errors. Some synchronization constructs are needed to prevent these errors. Following example shows a situation where we need synchronization.</p>
        <p align="center"><strong>Need of Synchronization</strong></p>
        <p>Consider the following Example:</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_946265" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java program to illustrate need</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// of Synchronization</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">Multithread</code></div>
        <div class="line number6 index5 alt1"><code class="plain">{</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">private</code> <code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">;</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">increment()</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">i++;</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">getValue()</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">return</code> <code class="plain">i;</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="plain">}</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="keyword">class</code> <code class="plain">GfG</code></div>
        <div class="line number20 index19 alt1"><code class="plain">{</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args)</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Multithread t = </code><code class="keyword">new</code> <code class="plain">Multithread();</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t.increment();</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(t.getValue());</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number27 index26 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output:</p>
        <pre>1</pre>
        <p>In above example three operations are performed:</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <ol>
        <li>Fetch the value of variable i.</li>
        <li>Increment the fetched value.</li>
        <li>And store the increased value of i to its location.</li>
        </ol>
        <p>Here,</p>
        <ul>
        <li>1st thread fetches the value of i. (Currently value i is 0) and increases it by one, so value of variable i becomes 1.</li>
        <li>Now 2nd thread accesses the value of i that would be 0 as 1st thread did not store it back to its location.<br />And 2nd thread also increment it and store it back to its location. And 1st also store it.</li>
        <li>Finally value of variable i is 1. But it should be 2 by the effect of both threads. That&rsquo;s why we need to synchronize the access to shared variable i.</li>
        </ul>
        <p>Java is multi-threaded language where multiple threads runs parallel to complete their execution. We need to synchronize the shared resources to ensure that at a time only one thread is able to access the shared resource.<br />If an Object is shared by multiple threads then there is need of synchronization in order to avoid the Object&rsquo;s state to be getting corrupted. Synchronization is needed when Object is mutable. If shared Object is immutable or all the threads which share the same Object are only reading the Object&rsquo;s state not modifying then you don&rsquo;t need to synchronize it.</p>
        <p>Java programming language provide two synchronization idioms:</p>
        <ul>
        <li>Methods synchronization</li>
        <li>Statement(s) synchronization (Block synchronization)</li>
        </ul>
        <p align="center"><strong>Method Synchronization</strong></p>
        <p>Synchronized methods enables a simple strategy for preventing the thread interference and memory consistency errors. If a Object is visible to more than one threads, all reads or writes to that Object&rsquo;s fields are done through the&nbsp;<strong>synchronized</strong>&nbsp;method.</p>
        <p>It is not possible for two invocations for synchronized methods to interleave. If one thread is executing the synchronized method, all others thread that invoke synchronized method on the same Object will have to wait until first thread is done with the Object.</p>
        <p><strong>Example: This shows if more than one threads accessing getLine() method without synchronization.</strong></p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_464112" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Example illustrates multiple threads are executing</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// on the same Object at same time without synchronization.</code></div>
        <div class="line number3 index2 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="keyword">class</code> <code class="plain">Line</code></div>
        <div class="line number6 index5 alt1"><code class="plain">{</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if multiple threads(trains) will try to</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// access this unsynchronized method,</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// they all will get it. So there is chance</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// that Object's&nbsp; state will be corrupted.</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">getLine()</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; </code><code class="value">3</code><code class="plain">; i++)</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(i);</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">400</code><code class="plain">);</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception e)</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(e);</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number26 index25 alt1"><code class="plain">}</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="keyword">class</code> <code class="plain">Train </code><code class="keyword">extends</code> <code class="plain">Thread</code></div>
        <div class="line number29 index28 alt2"><code class="plain">{</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// reference to Line's Object.</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Line line;</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Train(Line line)</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.line = line;</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1">@Override</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">line.getLine();</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number43 index42 alt2"><code class="plain">}</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number45 index44 alt2"><code class="keyword">class</code> <code class="plain">GFG</code></div>
        <div class="line number46 index45 alt1"><code class="plain">{</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Object of Line class that is shared</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// among the threads.</code></div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Line obj = </code><code class="keyword">new</code> <code class="plain">Line();</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// creating the threads that are</code></div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// sharing the same Object.</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Train train1 = </code><code class="keyword">new</code> <code class="plain">Train(obj);</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Train train2 = </code><code class="keyword">new</code> <code class="plain">Train(obj);</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// threads start their execution.</code></div>
        <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">train1.start();</code></div>
        <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">train2.start();</code></div>
        <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number62 index61 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output</p>
        <pre>0
        0
        1
        1
        2
        2
        </pre>
        <p>There can be two trains (more than two) which need to use same at same time so there is chance of collision. Therefore to avoid collision we need to synchronize the line in which multiple want to run.</p>
        <p><strong>Example: Synchronized access to getLine() method on the same Object</strong></p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_947929" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Example that shows multiple threads</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// can execute the same method but in</code></div>
        <div class="line number3 index2 alt2"><code class="comments">// synchronized way.</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">class</code> <code class="plain">Line</code></div>
        <div class="line number5 index4 alt2"><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// if multiple threads(trains) trying to access</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// this synchronized method on the same Object</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// but only one thread will be able</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// to execute it at a time.</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">synchronized</code> <code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">getLine()</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; </code><code class="value">3</code><code class="plain">; i++)</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(i);</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">400</code><code class="plain">);</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception e)</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(e);</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number26 index25 alt1"><code class="plain">}</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="keyword">class</code> <code class="plain">Train </code><code class="keyword">extends</code> <code class="plain">Thread</code></div>
        <div class="line number29 index28 alt2"><code class="plain">{</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Reference variable of type Line.</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Line line;</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Train(Line line)</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">this</code><code class="plain">.line = line;</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="color1">@Override</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">line.getLine();</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number43 index42 alt2"><code class="plain">}</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number45 index44 alt2"><code class="keyword">class</code> <code class="plain">GFG</code></div>
        <div class="line number46 index45 alt1"><code class="plain">{</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Line obj = </code><code class="keyword">new</code> <code class="plain">Line();</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// we are creating two threads which share</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// same Object.</code></div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Train train1 = </code><code class="keyword">new</code> <code class="plain">Train(obj);</code></div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Train train2 = </code><code class="keyword">new</code> <code class="plain">Train(obj);</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// both threads start executing .</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">train1.start();</code></div>
        <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">train2.start();</code></div>
        <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number60 index59 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output:</p>
        <pre>0
        1
        2
        0
        1
        2
        </pre>
        <p align="center"><strong>Block Synchronization</strong></p>
        <p>If we only need to execute some subsequent lines of code not all lines (instructions) of code within a method, then we should synchronize only block of the code within which required instructions are exists.<br />For example, lets suppose there is a method that contains 100 lines of code but there are only 10 lines (one after one) of code which contain critical section of code i.e. these lines can modify (change) the Object&rsquo;s state. So we only need to synchronize these 10 lines of code method to avoid any modification in state of the Object and to ensure that other threads can execute rest of the lines within the same method without any interruption.</p>
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_649227" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.io.*;</code></div>
        <div class="line number2 index1 alt1"><code class="keyword">import</code> <code class="plain">java.util.*;</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Geek</code></div>
        <div class="line number5 index4 alt2"><code class="plain">{</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String name = </code><code class="string">""</code><code class="plain">;</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">count = </code><code class="value">0</code><code class="plain">;</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">geekName(String geek, List&lt;String&gt; list)</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Only one thread is permitted</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// to change geek's name at a time.</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">synchronized</code><code class="plain">(</code><code class="keyword">this</code><code class="plain">)</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">name = geek;</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">count++;&nbsp; </code><code class="comments">// how many threads change geek's name.</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// All other threads are permitted</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// to add geek name into list.</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">list.add(geek);</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number23 index22 alt2"><code class="plain">}</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number25 index24 alt2"><code class="keyword">class</code> <code class="plain">GFG</code></div>
        <div class="line number26 index25 alt1"><code class="plain">{</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main (String[] args)</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Geek gk = </code><code class="keyword">new</code> <code class="plain">Geek();</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">List&lt;String&gt; list = </code><code class="keyword">new</code> <code class="plain">ArrayList&lt;String&gt;();</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">gk.geekName(</code><code class="string">"mohit"</code><code class="plain">, list);</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(gk.name);</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;</code>&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number35 index34 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        <p>Output :</p>
        <pre>mohit
        </pre>
        <p><strong>Important points:</strong></p>
        <ul>
        <li>When a thread enters into synchronized method or block, it acquires lock and once it completes its task and exits from the synchronized method, it releases the lock.</li>
        <li>When thread enters into synchronized instance method or block, it acquires Object level lock and when it enters into synchronized static method or block it acquires class level lock.</li>
        <li>Java synchronization will throw null pointer exception if Object used in synchronized block is null. For example, If in&nbsp;<strong>synchronized(instance)&nbsp;</strong>,&nbsp;<strong>instance</strong>&nbsp;is null then it will throw null pointer exception.</li>
        <li>In Java,&nbsp;<strong>wait(), notify() and notifyAll()</strong>&nbsp;are the important methods that are used in synchronization.</li>
        <li>You can not apply java&nbsp;<strong>synchronized</strong>&nbsp;keyword with the variables.</li>
        <li>Don&rsquo;t synchronize on the non-final field on synchronized block because the reference to the non-final field may change anytime and then different threads might synchronize on different objects i.e. no synchronization at all.</li>
        </ul>
        <p><strong>Advantages</strong></p>
        <ul>
        <li><strong>Multithreading:</strong>&nbsp;Since java is multithreaded language, synchronization is a good way to achieve mutual exclusion on shared resource(s).</li>
        <li><strong>Instance and Static Methods:</strong>&nbsp;Both synchronized instance methods and synchronized static methods can be executed concurrently because they are used to lock different Objects.</li>
        </ul>
        <p><strong>Limitations</strong></p>
        <ul>
        <li><strong>Concurrency Limitations:</strong>&nbsp;Java synchronization does not allow concurrent reads.</li>
        <li><strong>Decreases Efficiency:</strong>&nbsp;Java synchronized method run very slowly and can degrade the performance, so you should synchronize the method when it is absolutely necessary otherwise not and to synchronize block only for critical section of the code.</li>
        </ul>
        <p>This article is contributed by&nbsp;<strong>Nitsdheerendra</strong>. If you like GeeksforGeeks and would like to contribute, you can also write an article using&nbsp;<a href="http://www.contribute.geeksforgeeks.org/">contribute.geeksforgeeks.org</a>&nbsp;or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.</p>
        <p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
        <h1>Importance of Thread Synchronization in Java</h1>
        <p>Our systems are working in a multithreading environment that becomes an important part for OS to provide better utilization of resources. The process of running two or more parts of the program simultaneously is known as Multithreading. A program is a set of instructions in which multiple processes are running and within a process, multiple threads are working. Threads are nothing but lightweight processes. For example, in the computer we are playing video games at the same time we are working with MS word and listen to music. So, these are the processes we are working on concurrently. In this, every application has multiple sub-processes i.e. threads. In the previous example, we listen to music in which we are having a music player as an application that contains multiple sub-processes which are running like managing playlist, accessing the internet, etc. So, threads are the task to be performed and multithreading is multiple tasks/processes getting executed at the same time in the same program. &nbsp;</p>
        <p>This is the basic introduction of multithreading which will further help to understand the importance of thread synchronization.</p>
        <p><strong>Thread Priorities</strong></p>
        <p>In java, every thread is assigned with a priority that determines how the threads should be treated with respect to each other. Thread&rsquo;s priority is used to decide when to switch from one running thread to the next. A higher priority thread can preempt a lower priority thread and may take more CPU time. In a simple way, a thread with higher priority gets the resource first as compared to the thread with lower priority. But, in case, when two threads with the same priority want the same resource then the situation becomes more complicated. So, in a multithreading environment, if threads with the same priority are working with the same resource give unwanted results or erroneous code.</p>
        <p>Let&rsquo;s take an example. In a room, we have multiple computers that are attached to a single printer. At one time, one computer wants to print a document, so it uses a printer. At the same time, another computer wants the printer to print its document. So, two computers are demanding the same resource i.e. printer. So if both the processes running together then the printer will print the document of one as well as of another computer. This will produce invalid output. Now, the same thing happens in the case of threads if two threads with the same priority or want the same resource leads to inconsistent output.</p>
        <div id="AP_G4GR_5">&nbsp;</div>
        <p>In java, when two or more threads try to access the same resource simultaneously it causes the java runtime to execute one or more threads slowly, or even suspend their execution. In order to overcome this problem, we have thread synchronization.&nbsp;</p>
        <p><a href="https://www.geeksforgeeks.org/synchronized-in-java/">Synchronization</a><strong>&nbsp;</strong>means coordination between multiple processes/threads. &nbsp;</p>
        <p><strong>Types of synchronization:</strong></p>
        <p>There are two types of synchronization that are as follows:</p>
        <ol>
        <li>Process synchronization</li>
        <li>Thread synchronization</li>
        </ol>
        <p>Here we will be mainly focusing on thread synchronization.&nbsp;</p>
        <p>Thread synchronization basically refers<strong>&nbsp;</strong>to<strong>&nbsp;</strong>The concept of one thread execute at a time and the rest of the threads are in&nbsp;<a href="https://www.geeksforgeeks.org/lifecycle-and-states-of-a-thread-in-java/">waiting state</a>. This process is known as thread synchronization. It prevents the thread interference and inconsistency problem.</p>
        <p>Synchronization is build using&nbsp;<a href="https://www.geeksforgeeks.org/difference-between-lock-and-monitor-in-java-concurrency/">locks or monitor</a>. In Java, a monitor is an object that is used as a mutually exclusive lock. Only a single thread at a time has the right to own a monitor. When a thread gets a lock then all other threads will get suspended which are trying to acquire the locked monitor. So, other threads are said to be waiting for the monitor, until the first thread exits the monitor. In a simple way, when a thread request a resource then that resource gets locked so that no other thread can work or do any modification until the resource gets released.</p>
        <p><strong>Thread Synchronization are of two types:</strong></p>
        <ol>
        <li><strong>Mutual Exclusive</strong></li>
        <li><a href="https://www.geeksforgeeks.org/inter-thread-communication-java/"><strong>Inter-Thread Communication</strong></a></li>
        </ol>
        <p><strong>A.</strong>&nbsp;<strong>Mutual Exclusive</strong></p>
        <p>While sharing any resource, this will keep the thread interfering with one another i.e. mutual exclusive. We can achieve this via</p>
        <ul>
        <li>Synchronized Method</li>
        <li>Synchronized Block</li>
        <li>Static Synchronization</li>
        </ul>
        <p><strong>Synchronized Method</strong></p>
        <p>We can declare a method as synchronized using<strong>&nbsp;</strong>the&nbsp;<a href="https://www.geeksforgeeks.org/synchronized-in-java/"><em>&ldquo;synchronized&rdquo;</em></a><strong>&nbsp;</strong>keyword. This will make the code written inside the method thread-safe so that no other thread will execute while the resource is shared.</p>
        <p><strong>Implementation:</strong></p>
        <p>We will be proposing prints the two threads simultaneously showing the asynchronous behavior without thread synchronization.&nbsp;</p>
        <p><strong>Example 1:</strong></p>
        <div class="noIdeBtnDiv">
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_790705" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Class 1</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Helper class</code></div>
        <div class="line number3 index2 alt2"><code class="comments">// Extending Thread class</code></div>
        <div class="line number4 index3 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">PrintTest </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number5 index4 alt2">&nbsp;</div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Non synchronized Code</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method 1</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">printThread(</code><code class="keyword">int</code> <code class="plain">n)</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number11 index10 alt2">&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This loop will print the&nbsp; currently executed</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// thread</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt;= </code><code class="value">10</code><code class="plain">; i++) {</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Thread "</code> <code class="plain">+ n</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">" is working..."</code><code class="plain">);</code></div>
        <div class="line number17 index16 alt2">&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Try block to check for exceptions</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Pause the execution of current thread</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// for 0.600 seconds using sleep() method</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">600</code><code class="plain">);</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number25 index24 alt2">&nbsp;</div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Catch block to handle the exceptions</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception ex) {</code></div>
        <div class="line number28 index27 alt1">&nbsp;</div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Overriding existing toString() method and</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// prints exception if occur</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(ex.toString());</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number34 index33 alt1">&nbsp;</div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Display message for better readability</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"--------------------------"</code><code class="plain">);</code></div>
        <div class="line number37 index36 alt2">&nbsp;</div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number39 index38 alt2">&nbsp;</div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Pause the execution of current&nbsp; thread</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// for 0.1000 millisecond or 1sec using sleep</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// method</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">1000</code><code class="plain">);</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number45 index44 alt2">&nbsp;</div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception ex) {</code></div>
        <div class="line number47 index46 alt2">&nbsp;</div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Printing the exception</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(ex.toString());</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number52 index51 alt1"><code class="plain">}</code></div>
        <div class="line number53 index52 alt2">&nbsp;</div>
        <div class="line number54 index53 alt1"><code class="comments">// Class 2</code></div>
        <div class="line number55 index54 alt2"><code class="comments">// Helper class extending Thread Class</code></div>
        <div class="line number56 index55 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Thread1 </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number57 index56 alt2">&nbsp;</div>
        <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Declaring variable of type Class1</code></div>
        <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PrintTest test;</code></div>
        <div class="line number60 index59 alt1">&nbsp;</div>
        <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Constructor for class1</code></div>
        <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread1(PrintTest p) { test = p; }</code></div>
        <div class="line number63 index62 alt2">&nbsp;</div>
        <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// run() method of this class for</code></div>
        <div class="line number65 index64 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// entry point for thread1</code></div>
        <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number68 index67 alt1">&nbsp;</div>
        <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling method&nbsp; 1 as in above class</code></div>
        <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">test.printThread(</code><code class="value">1</code><code class="plain">);</code></div>
        <div class="line number71 index70 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number72 index71 alt1"><code class="plain">}</code></div>
        <div class="line number73 index72 alt2">&nbsp;</div>
        <div class="line number74 index73 alt1"><code class="comments">// Class 3</code></div>
        <div class="line number75 index74 alt2"><code class="comments">// Helper class extending Thread Class</code></div>
        <div class="line number76 index75 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Thread2 </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number77 index76 alt2">&nbsp;</div>
        <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Declaring variable of type Class1</code></div>
        <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PrintTest test;</code></div>
        <div class="line number80 index79 alt1">&nbsp;</div>
        <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Constructor for class2</code></div>
        <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread2(PrintTest p) { test = p; }</code></div>
        <div class="line number83 index82 alt2">&nbsp;</div>
        <div class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// run() method of this class for</code></div>
        <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// entry point for thread2</code></div>
        <div class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run() { test.printThread(</code><code class="value">2</code><code class="plain">); }</code></div>
        <div class="line number87 index86 alt2"><code class="plain">}</code></div>
        <div class="line number88 index87 alt1">&nbsp;</div>
        <div class="line number89 index88 alt2"><code class="comments">// Class 4</code></div>
        <div class="line number90 index89 alt1"><code class="comments">// Main class</code></div>
        <div class="line number91 index90 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">SynchroTest {</code></div>
        <div class="line number92 index91 alt1">&nbsp;</div>
        <div class="line number93 index92 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number94 index93 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number96 index95 alt1">&nbsp;</div>
        <div class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating object of class 1 inside main() method</code></div>
        <div class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PrintTest p = </code><code class="keyword">new</code> <code class="plain">PrintTest();</code></div>
        <div class="line number99 index98 alt2">&nbsp;</div>
        <div class="line number100 index99 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Passing the same object of class PrintTest to</code></div>
        <div class="line number101 index100 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// both threads</code></div>
        <div class="line number102 index101 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread1 t1 = </code><code class="keyword">new</code> <code class="plain">Thread1(p);</code></div>
        <div class="line number103 index102 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread2 t2 = </code><code class="keyword">new</code> <code class="plain">Thread2(p);</code></div>
        <div class="line number104 index103 alt1">&nbsp;</div>
        <div class="line number105 index104 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Start executing the threads</code></div>
        <div class="line number106 index105 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// using start() method</code></div>
        <div class="line number107 index106 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t1.start();</code></div>
        <div class="line number108 index107 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t2.start();</code></div>
        <div class="line number109 index108 alt2">&nbsp;</div>
        <div class="line number110 index109 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// This will print both the threads&nbsp; simultaneously</code></div>
        <div class="line number111 index110 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number112 index111 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p>&nbsp;</p>
        <div class="wp-video">
        <div id="mep_0" class="mejs-container mejs-container-keyboard-inactive wp-video-shortcode mejs-video" tabindex="0">
        <div class="mejs-inner">
        <div class="mejs-layers">&nbsp;</div>
        <div class="mejs-controls">
        <div class="mejs-button mejs-playpause-button mejs-play">&nbsp;</div>
        <div class="mejs-button mejs-fullscreen-button">&nbsp;Now using synchronized method, it will &nbsp;lock the object for the shared resource and gives the consistent output.&nbsp;</div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Example 2:</strong>&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_550872" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program Illustrating Lock the Object for</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// the shared resource giving consistent output</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Class 1</code></div>
        <div class="line number5 index4 alt2"><code class="comments">// Helper class extending Thread class</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">PrintTest </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// synchronized code</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// synchronized method will lock the object and</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// releases when thread is terminated or completed its</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// execution.</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">synchronized</code> <code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">printThread(</code><code class="keyword">int</code> <code class="plain">n)</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt;= </code><code class="value">10</code><code class="plain">; i++) {</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Thread "</code> <code class="plain">+ n</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">" is working..."</code><code class="plain">);</code></div>
        <div class="line number17 index16 alt2">&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number19 index18 alt2">&nbsp;</div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// pause the execution of current&nbsp; thread</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// for 600 millisecond</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">600</code><code class="plain">);</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception ex) {</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// overrides toString() method&nbsp; and prints</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// exception if occur</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(ex.toString());</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"--------------------------"</code><code class="plain">);</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number32 index31 alt1">&nbsp;</div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// pause the execution of current&nbsp; thread for</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// 1000 millisecond</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">1000</code><code class="plain">);</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception ex) {</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(ex.toString());</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number41 index40 alt2"><code class="plain">}</code></div>
        <div class="line number42 index41 alt1"><code class="comments">// creating thread1 extending Thread Class</code></div>
        <div class="line number43 index42 alt2">&nbsp;</div>
        <div class="line number44 index43 alt1"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Thread1 </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number45 index44 alt2">&nbsp;</div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PrintTest test;</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread1(PrintTest p) { test = p; }</code></div>
        <div class="line number48 index47 alt1">&nbsp;</div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run() </code><code class="comments">// entry point for thread1</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number51 index50 alt2">&nbsp;</div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">test.printThread(</code><code class="value">1</code><code class="plain">);</code></div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number54 index53 alt1"><code class="plain">}</code></div>
        <div class="line number55 index54 alt2"><code class="comments">// creating thread2 extending Thread Class</code></div>
        <div class="line number56 index55 alt1">&nbsp;</div>
        <div class="line number57 index56 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">Thread2 </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number58 index57 alt1">&nbsp;</div>
        <div class="line number59 index58 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PrintTest test;</code></div>
        <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread2(PrintTest p) { test = p; }</code></div>
        <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run() </code><code class="comments">// entry point for thread2</code></div>
        <div class="line number62 index61 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">test.printThread(</code><code class="value">2</code><code class="plain">);</code></div>
        <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number65 index64 alt2"><code class="plain">}</code></div>
        <div class="line number66 index65 alt1">&nbsp;</div>
        <div class="line number67 index66 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">SynchroTest {</code></div>
        <div class="line number68 index67 alt1">&nbsp;</div>
        <div class="line number69 index68 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number70 index69 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number71 index70 alt2">&nbsp;</div>
        <div class="line number72 index71 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PrintTest p = </code><code class="keyword">new</code> <code class="plain">PrintTest();</code></div>
        <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// passing the same object of class PrintTest to</code></div>
        <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// both threads</code></div>
        <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread1 t1 = </code><code class="keyword">new</code> <code class="plain">Thread1(p);</code></div>
        <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread2 t2 = </code><code class="keyword">new</code> <code class="plain">Thread2(p);</code></div>
        <div class="line number78 index77 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
        <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// start function will execute the threads</code></div>
        <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t1.start();</code></div>
        <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t2.start();</code></div>
        <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number83 index82 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p>&nbsp;</p>
        <p><strong>B. Synchronized Block</strong></p>
        <p>If we declare a block as synchronized, only the code which is written inside that block is executed sequentially not the complete code. This is used when we want sequential access to some part of code or to synchronize some part of code.</p>
        <p><strong>Syntax:</strong></p>
        <pre>synchronized (object reference) 
        {    
           // Insert code here
        }</pre>
        <p><strong>Example&nbsp;</strong></p>
        <div class="noIdeBtnDiv">
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist3-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist3-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_872236" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program Illustrating&nbsp; Synchronized Code</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Using synchronized block</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Class 1</code></div>
        <div class="line number5 index4 alt2"><code class="comments">// Helper class extending Thread class</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">PrintTest </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Method&nbsp; 1</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// To print the thread</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">printThread(</code><code class="keyword">int</code> <code class="plain">n)</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number12 index11 alt1">&nbsp;</div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Making synchronized block that makes the block</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// synchronized</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">synchronized</code> <code class="plain">(</code><code class="keyword">this</code><code class="plain">)</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number17 index16 alt2">&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Iterating using for loop</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt;= </code><code class="value">10</code><code class="plain">; i++) {</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print message when these thread are</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// executing</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Thread "</code> <code class="plain">+ n</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">" is working..."</code><code class="plain">);</code></div>
        <div class="line number25 index24 alt2">&nbsp;</div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Try block to check for exceptions</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number28 index27 alt1">&nbsp;</div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Making thread to pause for 0.6</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// seconds</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">600</code><code class="plain">);</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number33 index32 alt2">&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Catch block to handle exceptions</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception ex) {</code></div>
        <div class="line number36 index35 alt1">&nbsp;</div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print message when exception.s occur</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(ex.toString());</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number42 index41 alt1">&nbsp;</div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Display message only</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"--------------------------"</code><code class="plain">);</code></div>
        <div class="line number45 index44 alt2">&nbsp;</div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number47 index46 alt2">&nbsp;</div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Making thread t osleep for 1 sec</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">1000</code><code class="plain">);</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number51 index50 alt2">&nbsp;</div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception ex) {</code></div>
        <div class="line number53 index52 alt2">&nbsp;</div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(ex.toString());</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number57 index56 alt2"><code class="plain">}</code></div>
        <div class="line number58 index57 alt1">&nbsp;</div>
        <div class="line number59 index58 alt2"><code class="comments">// Class 2</code></div>
        <div class="line number60 index59 alt1"><code class="comments">// Helper class extending Thread class</code></div>
        <div class="line number61 index60 alt2"><code class="keyword">class</code> <code class="plain">Thread1 </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number62 index61 alt1">&nbsp;</div>
        <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PrintTest test;</code></div>
        <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread1(PrintTest p) { test = p; }</code></div>
        <div class="line number65 index64 alt2">&nbsp;</div>
        <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run() { test.printThread(</code><code class="value">1</code><code class="plain">); }</code></div>
        <div class="line number67 index66 alt2"><code class="plain">}</code></div>
        <div class="line number68 index67 alt1">&nbsp;</div>
        <div class="line number69 index68 alt2"><code class="comments">// Class 3</code></div>
        <div class="line number70 index69 alt1"><code class="comments">// Helper class extending Thread class</code></div>
        <div class="line number71 index70 alt2"><code class="keyword">class</code> <code class="plain">Thread2 </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number72 index71 alt1">&nbsp;</div>
        <div class="line number73 index72 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PrintTest test;</code></div>
        <div class="line number74 index73 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread2(PrintTest p) { test = p; }</code></div>
        <div class="line number75 index74 alt2">&nbsp;</div>
        <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run() { test.printThread(</code><code class="value">2</code><code class="plain">); }</code></div>
        <div class="line number77 index76 alt2"><code class="plain">}</code></div>
        <div class="line number78 index77 alt1">&nbsp;</div>
        <div class="line number79 index78 alt2"><code class="comments">// Class 4</code></div>
        <div class="line number80 index79 alt1"><code class="comments">// Main class</code></div>
        <div class="line number81 index80 alt2"><code class="keyword">class</code> <code class="plain">SynchroTest {</code></div>
        <div class="line number82 index81 alt1">&nbsp;</div>
        <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number84 index83 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number86 index85 alt1">&nbsp;</div>
        <div class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating instance for class 1 inside main()</code></div>
        <div class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PrintTest p = </code><code class="keyword">new</code> <code class="plain">PrintTest();</code></div>
        <div class="line number89 index88 alt2">&nbsp;</div>
        <div class="line number90 index89 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating threads and</code></div>
        <div class="line number91 index90 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// passing same object</code></div>
        <div class="line number92 index91 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread1 t1 = </code><code class="keyword">new</code> <code class="plain">Thread1(p);</code></div>
        <div class="line number93 index92 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread2 t2 = </code><code class="keyword">new</code> <code class="plain">Thread2(p);</code></div>
        <div class="line number94 index93 alt1">&nbsp;</div>
        <div class="line number95 index94 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Starting these thread using start() method</code></div>
        <div class="line number96 index95 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t1.start();</code></div>
        <div class="line number97 index96 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t2.start();</code></div>
        <div class="line number98 index97 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number99 index98 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        <p><strong>C. Static Synchronization</strong></p>
        <p>In this, the synchronized method is declared as<strong>&nbsp;&ldquo;static&rdquo;&nbsp;</strong>which means the lock or monitor is applied on the class not on the object so that only one thread will access the class at a time.</p>
        <p><strong>Example&nbsp;</strong>&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist4-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist4-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_706985" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="comments">// Java Program Illustrate&nbsp; Synchronized</code></div>
        <div class="line number2 index1 alt1"><code class="comments">// Using static synchronization</code></div>
        <div class="line number3 index2 alt2">&nbsp;</div>
        <div class="line number4 index3 alt1"><code class="comments">// Class 1</code></div>
        <div class="line number5 index4 alt2"><code class="comments">// Helper class</code></div>
        <div class="line number6 index5 alt1"><code class="keyword">class</code> <code class="plain">PrintTest </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Static synchronization locks the class PrintTest</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">synchronized</code> <code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">printThread(</code><code class="keyword">int</code> <code class="plain">n)</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number11 index10 alt2">&nbsp;</div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt;= </code><code class="value">10</code><code class="plain">; i++) {</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print message when threads are executing</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"Thread "</code> <code class="plain">+ n</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">+ </code><code class="string">" is working..."</code><code class="plain">);</code></div>
        <div class="line number17 index16 alt2">&nbsp;</div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Try block to check for exceptions</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// making thread to sleep for 0.6 seconds</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">600</code><code class="plain">);</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number24 index23 alt1">&nbsp;</div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Catch block to handle the exceptions</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception ex) {</code></div>
        <div class="line number27 index26 alt2">&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Print message when exception occurs</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(ex.toString());</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number32 index31 alt1">&nbsp;</div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Display message for better readability</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code><code class="string">"--------------------------"</code><code class="plain">);</code></div>
        <div class="line number35 index34 alt2">&nbsp;</div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">try</code> <code class="plain">{</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread.sleep(</code><code class="value">1000</code><code class="plain">);</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number39 index38 alt2">&nbsp;</div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">catch</code> <code class="plain">(Exception ex) {</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(ex.toString());</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number44 index43 alt1"><code class="plain">}</code></div>
        <div class="line number45 index44 alt2">&nbsp;</div>
        <div class="line number46 index45 alt1"><code class="comments">// Class 2</code></div>
        <div class="line number47 index46 alt2"><code class="comments">// Helper class extending Thread class</code></div>
        <div class="line number48 index47 alt1"><code class="keyword">class</code> <code class="plain">Thread1 </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number49 index48 alt2">&nbsp;</div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// run() method for thread</code></div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number53 index52 alt2">&nbsp;</div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Passing the class not the object</code></div>
        <div class="line number55 index54 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PrintTest.printThread(</code><code class="value">1</code><code class="plain">);</code></div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number57 index56 alt2"><code class="plain">}</code></div>
        <div class="line number58 index57 alt1">&nbsp;</div>
        <div class="line number59 index58 alt2"><code class="comments">// Class 3</code></div>
        <div class="line number60 index59 alt1"><code class="comments">// Helper class extending Thread class</code></div>
        <div class="line number61 index60 alt2"><code class="keyword">class</code> <code class="plain">Thread2 </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number62 index61 alt1">&nbsp;</div>
        <div class="line number63 index62 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number64 index63 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number65 index64 alt2">&nbsp;</div>
        <div class="line number66 index65 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Passing the class not the object</code></div>
        <div class="line number67 index66 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">PrintTest.printThread(</code><code class="value">2</code><code class="plain">);</code></div>
        <div class="line number68 index67 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number69 index68 alt2"><code class="plain">}</code></div>
        <div class="line number70 index69 alt1">&nbsp;</div>
        <div class="line number71 index70 alt2"><code class="comments">// Class 4</code></div>
        <div class="line number72 index71 alt1"><code class="comments">// Main class</code></div>
        <div class="line number73 index72 alt2"><code class="keyword">class</code> <code class="plain">SynchroTest {</code></div>
        <div class="line number74 index73 alt1">&nbsp;</div>
        <div class="line number75 index74 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Main driver method</code></div>
        <div class="line number76 index75 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number77 index76 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number78 index77 alt1">&nbsp;</div>
        <div class="line number79 index78 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// No shared object</code></div>
        <div class="line number80 index79 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating objects of class 2 and 3 that</code></div>
        <div class="line number81 index80 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// are extending to Thread class</code></div>
        <div class="line number82 index81 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread1 t1 = </code><code class="keyword">new</code> <code class="plain">Thread1();</code></div>
        <div class="line number83 index82 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread2 t2 = </code><code class="keyword">new</code> <code class="plain">Thread2();</code></div>
        <div class="line number84 index83 alt1">&nbsp;</div>
        <div class="line number85 index84 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Starting thread with help of start() method</code></div>
        <div class="line number86 index85 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t1.start();</code></div>
        <div class="line number87 index86 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t2.start();</code></div>
        <div class="line number88 index87 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number89 index88 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        <h1>Thread Safety and how to achieve it in Java</h1>
        <p>As we know Java has a feature,&nbsp;<a href="https://www.geeksforgeeks.org/multithreading-in-java/">Multithreading</a>, which is a process of running multiple threads simultaneously. When multiple threads are working on the same data, and the value of our data is changing, that scenario is not thread-safe and we will get inconsistent results. When a thread is already working on an object and preventing another thread on working on the same object, this process is called Thread-Safety.&nbsp;</p>
        <h3><strong>How to achieve Thread Safety</strong></h3>
        <p>There are four ways to achieve Thread Safety in&nbsp;<a href="https://www.geeksforgeeks.org/java-programming-basics/">Java</a>. These are:</p>
        <ol>
        <li>Using&nbsp;<a href="https://www.geeksforgeeks.org/synchronized-in-java/">Synchronization</a>.</li>
        <li>Using&nbsp;<a href="https://www.geeksforgeeks.org/volatile-keyword-in-java/">Volatile Keyword</a>.</li>
        <li>Using&nbsp;<a href="https://www.geeksforgeeks.org/atomic-variables-in-java-with-examples/">Atomic Variable</a>.</li>
        <li>Using&nbsp;<a href="https://www.geeksforgeeks.org/final-keyword-java/">Final Keyword</a>.</li>
        </ol>
        <h3><strong>Using Synchronization</strong></h3>
        <p>Synchronization is the process of allowing only one thread at a time to complete the particular task. It means when multiple threads executing simultaneously, and want to access the same resource at the same time, then the problem of inconsistency will occur. so synchronization is used to resolve inconsistency problem by allowing only one thread at a time.&nbsp;<br />Synchronization uses a&nbsp;<em>synchronized keyword</em>. Synchronized is the modifier that creates a block of code known as a critical section.&nbsp;<br />&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist1-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist1-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_865453" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">class</code> <code class="plain">A {</code></div>
        <div class="line number2 index1 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">synchronized</code> <code class="keyword">void</code> <code class="plain">sum(</code><code class="keyword">int</code> <code class="plain">n)</code></div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number4 index3 alt1">&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating a thread instance</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread t = Thread.currentThread();</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt;= </code><code class="value">5</code><code class="plain">; i++) {</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t.getName() + </code><code class="string">" : "</code> <code class="plain">+ (n + i));</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number12 index11 alt1"><code class="plain">}</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="comments">// Class B extending thread class</code></div>
        <div class="line number15 index14 alt2"><code class="keyword">class</code> <code class="plain">B </code><code class="keyword">extends</code> <code class="plain">Thread {</code></div>
        <div class="line number16 index15 alt1">&nbsp;</div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating an object of class A</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">A a = </code><code class="keyword">new</code> <code class="plain">A();</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number21 index20 alt2">&nbsp;</div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling sum() method</code></div>
        <div class="line number23 index22 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">a.sum(</code><code class="value">10</code><code class="plain">);</code></div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number25 index24 alt2"><code class="plain">}</code></div>
        <div class="line number26 index25 alt1"><code class="keyword">class</code> <code class="plain">Test {</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number29 index28 alt2">&nbsp;</div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating an object of class B</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">B b = </code><code class="keyword">new</code> <code class="plain">B();</code></div>
        <div class="line number32 index31 alt1">&nbsp;</div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initializing instance t1 of Thread</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// class with object of class B</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread t1 = </code><code class="keyword">new</code> <code class="plain">Thread(b);</code></div>
        <div class="line number36 index35 alt1">&nbsp;</div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initializing instance t2 of Thread</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// class with object of class B</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread t2 = </code><code class="keyword">new</code> <code class="plain">Thread(b);</code></div>
        <div class="line number40 index39 alt1">&nbsp;</div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initializing thread t1 with name</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//'Thread A'</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t1.setName(</code><code class="string">"Thread A"</code><code class="plain">);</code></div>
        <div class="line number44 index43 alt1">&nbsp;</div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initializing thread t2 with name</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">//'Thread B'</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t2.setName(</code><code class="string">"Thread B"</code><code class="plain">);</code></div>
        <div class="line number48 index47 alt1">&nbsp;</div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Starting thread instance t1 and t2</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t1.start();</code></div>
        <div class="line number51 index50 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t2.start();</code></div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number53 index52 alt2"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p>&nbsp;<br />&nbsp;</p>
        <div class="code-output"><strong>Output:</strong>&nbsp;
        <div id="AP_G4GR_5">&nbsp;</div>
        <pre>Thread A : 11
        Thread A : 12
        Thread A : 13
        Thread A : 14
        Thread A : 15
        Thread B : 11
        Thread B : 12
        Thread B : 13
        Thread B : 14
        Thread B : 15</pre>
        <p>&nbsp;</p>
        </div>
        <p>&nbsp;</p>
        <h3><strong>Using Volatile keyword</strong></h3>
        <p>&nbsp;</p>
        <p>A volatile keyword is a field modifier that ensures that the object can be used by multiple threads at the same time without having any problem. volatile is one good way of ensuring that the Java program is thread-safe. a volatile keyword can be used as an alternative way of achieving Thread Safety in Java.<br />&nbsp;</p>
        <p>&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist2-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist2-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_236575" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">VolatileExample {</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initializing volatile variables</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// a, b</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">volatile</code> <code class="keyword">int</code> <code class="plain">a = </code><code class="value">0</code><code class="plain">, b = </code><code class="value">0</code><code class="plain">;</code></div>
        <div class="line number6 index5 alt1">&nbsp;</div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Defining a static void method</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">method_one()</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">a++;</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">b++;</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number13 index12 alt2">&nbsp;</div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Defining static void method</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">method_two()</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number17 index16 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(</code></div>
        <div class="line number18 index17 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="string">"a="</code> <code class="plain">+ a + </code><code class="string">" b="</code> <code class="plain">+ b);</code></div>
        <div class="line number19 index18 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number20 index19 alt1">&nbsp;</div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(String[] args)</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number23 index22 alt2">&nbsp;</div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating an instance t1 of</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Thread class</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread t1 = </code><code class="keyword">new</code> <code class="plain">Thread() {</code></div>
        <div class="line number27 index26 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; </code><code class="value">5</code><code class="plain">; i++)</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">method_one();</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">};</code></div>
        <div class="line number33 index32 alt2">&nbsp;</div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating an instance t2 of</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Thread class</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread t2 = </code><code class="keyword">new</code> <code class="plain">Thread() {</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number39 index38 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">0</code><code class="plain">; i &lt; </code><code class="value">5</code><code class="plain">; i++)</code></div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">method_two();</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">};</code></div>
        <div class="line number43 index42 alt2">&nbsp;</div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Starting instance t1 and t2</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t1.start();</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t2.start();</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number48 index47 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p>&nbsp;<br />&nbsp;</p>
        <div class="code-output"><strong>Output:</strong>&nbsp;
        <pre>a=5 b=5
        a=5 b=5
        a=5 b=5
        a=5 b=5
        a=5 b=5</pre>
        <p>&nbsp;</p>
        </div>
        <p>&nbsp;</p>
        <h3><strong>Using Atomic Variable</strong></h3>
        <p>&nbsp;</p>
        <p>Using an atomic variable is another way to achieve thread-safety in java. When variables are shared by multiple threads, the atomic variable ensures that threads don&rsquo;t crash into each other.&nbsp;<br />&nbsp;</p>
        <p>&nbsp;</p>
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist3-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist3-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_701392" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">import</code> <code class="plain">java.util.concurrent.atomic.AtomicInteger;</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="keyword">class</code> <code class="plain">Counter {</code></div>
        <div class="line number4 index3 alt1">&nbsp;</div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating a variable of</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// class type AtomicInteger</code></div>
        <div class="line number7 index6 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">AtomicInteger count</code></div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= </code><code class="keyword">new</code> <code class="plain">AtomicInteger();</code></div>
        <div class="line number9 index8 alt2">&nbsp;</div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Defining increment() method</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// to change value of</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// AtomicInteger variable</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">increment()</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">count.incrementAndGet();</code></div>
        <div class="line number16 index15 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number17 index16 alt2"><code class="plain">}</code></div>
        <div class="line number18 index17 alt1">&nbsp;</div>
        <div class="line number19 index18 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">TestCounter {</code></div>
        <div class="line number20 index19 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">main(</code></div>
        <div class="line number21 index20 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">String[] args) </code><code class="keyword">throws</code> <code class="plain">Exception</code></div>
        <div class="line number22 index21 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number23 index22 alt2">&nbsp;</div>
        <div class="line number24 index23 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating an instance of</code></div>
        <div class="line number25 index24 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Counter class</code></div>
        <div class="line number26 index25 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Counter c = </code><code class="keyword">new</code> <code class="plain">Counter();</code></div>
        <div class="line number27 index26 alt2">&nbsp;</div>
        <div class="line number28 index27 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating an instance t1 of</code></div>
        <div class="line number29 index28 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Thread class</code></div>
        <div class="line number30 index29 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread t1 = </code><code class="keyword">new</code> <code class="plain">Thread(</code></div>
        <div class="line number31 index30 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">Runnable() {</code></div>
        <div class="line number32 index31 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number33 index32 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number34 index33 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt;= </code><code class="value">2000</code><code class="plain">; i++) {</code></div>
        <div class="line number35 index34 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">c.increment();</code></div>
        <div class="line number36 index35 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number37 index36 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number38 index37 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">});</code></div>
        <div class="line number39 index38 alt2">&nbsp;</div>
        <div class="line number40 index39 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Creating an instance t2</code></div>
        <div class="line number41 index40 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// of Thread class</code></div>
        <div class="line number42 index41 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">Thread t2 = </code><code class="keyword">new</code> <code class="plain">Thread(</code></div>
        <div class="line number43 index42 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">new</code> <code class="plain">Runnable() {</code></div>
        <div class="line number44 index43 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">run()</code></div>
        <div class="line number45 index44 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number46 index45 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">for</code> <code class="plain">(</code><code class="keyword">int</code> <code class="plain">i = </code><code class="value">1</code><code class="plain">; i &lt;= </code><code class="value">2000</code><code class="plain">; i++) {</code></div>
        <div class="line number47 index46 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">c.increment();</code></div>
        <div class="line number48 index47 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number49 index48 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number50 index49 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">});</code></div>
        <div class="line number51 index50 alt2">&nbsp;</div>
        <div class="line number52 index51 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling start() method with t1 and t2</code></div>
        <div class="line number53 index52 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t1.start();</code></div>
        <div class="line number54 index53 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t2.start();</code></div>
        <div class="line number55 index54 alt2">&nbsp;</div>
        <div class="line number56 index55 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Calling join method with t1 and t2</code></div>
        <div class="line number57 index56 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t1.join();</code></div>
        <div class="line number58 index57 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">t2.join();</code></div>
        <div class="line number59 index58 alt2">&nbsp;</div>
        <div class="line number60 index59 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">System.out.println(c.count);</code></div>
        <div class="line number61 index60 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number62 index61 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p>&nbsp;<br />&nbsp;</p>
        <div class="code-output"><strong>Output:</strong>&nbsp;
        <pre>4000</pre>
        <p>&nbsp;</p>
        </div>
        <p>&nbsp;</p>
        <h3><strong>Using Final keyword</strong>&nbsp;</h3>
        <p>&nbsp;</p>
        <p>Final Variables are also thread-safe in java because once assigned some reference of an object It cannot point to reference of another object.&nbsp;<br />&nbsp;</p>
        <p>&nbsp;</p>
        <div class="noIdeBtnDiv">
        <div class="responsive-tabs-wrapper">
        <div class="responsive-tabs responsive-tabs--enabled">
        <ul class="responsive-tabs__list">
        <li id="tablist4-tab1" class="responsive-tabs__list__item responsive-tabs__list__item--active" tabindex="0">Java</li>
        </ul>
        <div id="tablist4-panel1" class="tabcontent responsive-tabs__panel responsive-tabs__panel--active">
        <div class="code-block">
        <div class="code-gutter">&nbsp;</div>
        <div class="code-container">
        <div id="highlighter_668723" class="syntaxhighlighter nogutter">
        <table border="0" cellspacing="0" cellpadding="0">
        <tbody>
        <tr>
        <td class="code">
        <div class="container">
        <div class="line number1 index0 alt2"><code class="keyword">public</code> <code class="keyword">class</code> <code class="plain">FinalTest {</code></div>
        <div class="line number2 index1 alt1">&nbsp;</div>
        <div class="line number3 index2 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Initializing a string</code></div>
        <div class="line number4 index3 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// variable of final type</code></div>
        <div class="line number5 index4 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">final</code> <code class="plain">String str</code></div>
        <div class="line number6 index5 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">= </code><code class="keyword">new</code> <code class="plain">String(</code><code class="string">"hello"</code><code class="plain">);</code></div>
        <div class="line number7 index6 alt2">&nbsp;</div>
        <div class="line number8 index7 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// Defining a method to</code></div>
        <div class="line number9 index8 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// change the value of the final</code></div>
        <div class="line number10 index9 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// variable which is not possible,</code></div>
        <div class="line number11 index10 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="comments">// hence the error will be shown</code></div>
        <div class="line number12 index11 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="keyword">void</code> <code class="plain">method()</code></div>
        <div class="line number13 index12 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">{</code></div>
        <div class="line number14 index13 alt1"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">str = </code><code class="string">"world"</code><code class="plain">;</code></div>
        <div class="line number15 index14 alt2"><code class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">}</code></div>
        <div class="line number16 index15 alt1"><code class="plain">}</code></div>
        </div>
        </td>
        </tr>
        </tbody>
        </table>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <p><strong>Output:</strong></p>
        <pre>Compilation Error in java code :- 
        prog.java:14: error: cannot assign a value to final variable str
                str = "world";
                ^
        1 error</pre>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        </div>
        <div class="textBasedMannualAds_2">&nbsp;</div>`,
    },


]